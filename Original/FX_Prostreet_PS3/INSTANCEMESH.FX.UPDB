<?xml version="1.0" encoding="utf-8"?>
<shader-pdb pdbHint="4e4a0001-d1092cc1-bd838f5c" version="6132">
 <files>
  <file id="0" path="D:\eax-build1-s09-xenon\Oban\Speed\Xenon\Src\Render\Shaders\InstanceMesh.fx" time="01c7f8c7-b0d73560">#include "registermap.h"

shared float4 cvInstanceData : REG_cvInstanceData; //INSTANCEINFO;
#include "registermap.h"

#define kNumDebrisTPagesAcross 8  // for a total 64 tpages total

struct VtoP
{
	float4 position  : POSITION;
	float4 color     : COLOR0;
	float4 tex       : TEXCOORD0; 
};

sampler DIFFUSE_SAMPLER = sampler_state
{
	AddressU = WRAP;
	AddressV = WRAP;
	MIPFILTER = LINEAR;
	MINFILTER = LINEAR;
	MAGFILTER = LINEAR;
};

struct PS_OUTPUT
{
	float4 color : COLOR0;
};

VtoP vs_main( int Index : INDEX )
{
    // Compute the instance index
	int iInstanceIndex = ( Index + 0.5 ) / cvInstanceData.x;

	// Fetch the instance data
	float4 vWVP0;
	float4 vWVP1;
	float4 vWVP2;
	float4 vWVP3;
	float4 param;
	asm
	{
	    vfetch vWVP0, iInstanceIndex, position2;
	    vfetch vWVP1, iInstanceIndex, position3;
	    vfetch vWVP2, iInstanceIndex, position4;
	    vfetch vWVP3, iInstanceIndex, position5;
	    vfetch param, iInstanceIndex, position6;
	};

	// Compute the mesh index - this is the index to fetch within the current instance
	int iMeshIndex = Index - ( iInstanceIndex * cvInstanceData.x ) + cvInstanceData.y;
	
	// Fetch the mesh index value
	int4 iMeshIndexValue = 0;
	asm
	{
	    vfetch iMeshIndexValue, iMeshIndex, position1;
	};
	
	// Now fetch the actual mesh vertex data
	float4 vMeshPosition;
	float4 vMeshColor;
	float4 vMeshUV;
	float vertIndex = iMeshIndexValue.x + param.x;
	asm
	{
		vfetch vMeshPosition, vertIndex, position0;
		vfetch vMeshColor, vertIndex, color0;
		vfetch vMeshUV, vertIndex, texcoord0;
	};
	
	// Combine the instance position with the mesh position
	//vMeshPosition.xyz += localPos;
	
	// Output the vertex data
	// This part looks like a regular vertex shader.
	VtoP Out;

	float4x4 wvp = float4x4(	vWVP0, vWVP1, vWVP2, vWVP3 );
	Out.position = mul( vMeshPosition, wvp );
	Out.color = vMeshColor;
	float4 outUV = vMeshUV * 1.0f/kNumDebrisTPagesAcross;
	outUV.xz += param.z;
	outUV.yw += param.w;
	Out.tex = outUV;
	return Out;
};

PS_OUTPUT ps_main(const VtoP IN)
{
	PS_OUTPUT OUT;

	float4 diffuse = tex2D(DIFFUSE_SAMPLER, IN.tex);
	
	OUT.color = diffuse;
	OUT.color *= IN.color;
	
	return OUT;
}

technique InstancedMesh
{
	pass
	{
	    fillmode = solid;
		zenable = true;
		zwriteenable = true;
		zfunc = lessequal;
		alphablendenable = true;
		srcblend = srcalpha;
		destblend = zero;
		vertexshader = compile vs_3_0 vs_main();
		pixelshader = compile ps_3_0 ps_main();
	}
}
</file>
  <file id="1" path="D:\eax-build1-s09-xenon\Oban\Speed\Xenon\Src\Render\Shaders\registermap.h" time="01c7f8c7-b0d997bb">
// ------------------------------------------------------------------------------------------------------------------------------------------

#define CONSTANT_RESERVED_DO_NOT_USE			(0)		/* 4 vectors [c0,c3] */

// ------------------------------------------------------------------------------------------------------------------------------------------

#define REG_RESERVED_DO_NOT_USE			register(c0)	/* 4 vectors [c0,c3] */

#define REG_cmWorldMat					register(c4)	/* 4 vectors [c0,c3] */
#define REG_cmWorldMatTranspose			register(c8)	/* 4 vectors [c4,c7] */
#define REG_cmWorldView					register(c12)	/* 4 vectors [c8,c11] */
#define REG_cmShadowMapWVP				register(c16)	/* 4 vectors [c12,c15] */
#define REG_cmLightWVP					register(c20)	/* 4 vectors [c16,c19] */
#define REG_cmWorldViewProj				register(c24)	/* 4 vectors [c20,c23] */
#define REG_cmPrevWorldViewProj			register(c28)	/* 4 vectors [c24,c27] */
#define REG_cvLocalEyePos				register(c32)	/* 1 vecotr	 [c32] */
#define REG_cvLocalLightVec				register(c33)	/* 1 vecotr	 [c33] */
#define REG_cfSkyDomeRotation			register(c34)	/* 1 vecotr	 [c34] */

#define REG_cmLocalColourMatrix			register(c36)	/* 4 vectors [c36,c39] */
#define REG_cmLocalDirectionMatrix		register(c40)	/* 4 vectors [c40,c43] */
#define REG_cmLocalPositionMatrix		register(c44)	/* 4 vectors [c44,c47] */
#define REG_cavHarmonicCoeff			register(c48)	/* 10 floats, 3 vectors, 1 pad vector [48,51] */

#define REG_camBlendMatrices			register(c52)	/* 16 vectors [c52,c67] */
#define REG_cavWorldHeadlightDirection	register(c68)	/* 2 vectors [c68,c69] */
#define REG_cavWorldHeadlightPosition	register(c70)	/* 2 vectors [c70,c71] */
#define REG_cavWorldHeadlightUpDirection register(c72)	/* 2 vectors [c72,c73] */

#define REG_cmShadowMapVP				register(c68) // note clash with head light
#define REG_cmShadowMapBiasMatrix		register(c72)	/* 4 vectors [c72, c75] */



#define REG_cvWorldSunColour			register(c79)
#define REG_cvWorldAmbientColour		register(c80)

// available: [c82,c115] (but would alias cavPcaWeightsR and cavPcaWeightsG)
// PCA/UCap parameters (ucap.fx, water.fx)
#define REG_cafPcaMean					register(c81)	/* 1 vector */
#define REG_cavPcaWeightsR				register(c82)	/* 22 vectors [c82,c103] */
#define REG_cavPcaWeightsG				register(c104)	/* 22 vectors [c104,c125] */
#define REG_cavPcaWeightsB				register(c126)	/* 22 vectors [c126,c147] */
#define REG_cavPcaWeightsX				register(c148)	/* 8 vectors [c148,c155] */
#define REG_cavPcaWeightsY				register(c156)	/* 8 vectors [c156,c163] */
#define REG_cavPcaWeightsZ				register(c164)	/* 8 vectors [c164,c171] */
#define REG_cavPcaWeightsNX				register(c172)	/* 8 vectors [c172,c179] */
#define REG_cavPcaWeightsNY				register(c180)	/* 8 vectors [c180,c187] */
#define REG_cavPcaWeightsNZ				register(c188)	/* 8 vectors [c188,c195] */
#define REG_cavFeatureHeights			register(c196)	/* 1 vector */


// The following parameters alias cavPcaWeightsG:
#define REG_cfMipMapBias				register(c116)
#define REG_cfBrightness				register(c117)
#define REG_cfSurfaceReflection			register(c118)
#define REG_cfRainIntensity				register(c119)
#define REG_cfSpecularPower				register(c120)
#define REG_cfMetallicScale				register(c121)
#define REG_cfEnvmapPullAmount			register(c122)
#define REG_cfEnvmapPower				register(c123)
#define REG_PAD2						register(c125)

// The following parameters alias cavPcaWeightsB:
#define REG_cfCombinedBrightness		register(c126)
#define REG_cvVisualEffectFadeColour	register(c127)	/* also aliases cfSkyAlphaTag */
#define REG_cfSkyAlphaTag				register(c127)	/* also aliases cvVisualEffectFadeColour */
#define REG_cfShadowVolumeOffset		register(c128)
#define REG_cfRVMWorldBrightness		register(c129)
#define REG_cfDesaturation				register(c130)
#define REG_cfBloomScale				register(c131)
#define REG_cfSplitScreenUVScale		register(c132)
#define REG_cfColourCubeFilterBlend		register(c133)
#define REG_cfTimeTicker				register(c134)
#define REG_cfMiddleGray				register(c135)
#define REG_cfBrightPassThreshold		register(c136)

#define REG_cvScreenOffset				register(c137)
#define REG_cvFog_Br_Plus_Bm			register(c138)
#define REG_cvFog_One_Over_BrBm			register(c139)
#define REG_cvFog_Const_1				register(c140)
#define REG_cvFog_Const_2				register(c141)
#define REG_cvFog_Const_3				register(c142)
#define REG_cvAmbientColour				register(c143)
#define REG_cvShadowParams0				register(c144)
#define REG_cvShadowParams1				register(c145)


// The following parameters alias cavPcaWeightsX:
#define REG_cvDiffuseColour				register(c148)
#define REG_cvSpecularColour			register(c149)
// available: [c150,c155] (but would alias cavPcaWeightsX)

// The following parameters alias cavPcaWeightsY:
#define REG_cvShadowColour				register(c156)
#define REG_cvTextureOffset				register(c161)
#define REG_cvLocalCenter				register(c162)
#define REG_cvTreeParams				register(c163)

// The following parameters alias cavPcaWeightsZ:
#define REG_cvBaseAlphaRef				register(c164)
#define REG_cvCloudIntensity			register(c165)
#define REG_cvLocalLightPos				register(c166)
#define REG_cvPixelizationScale			register(c167)
#define REG_cvGrassColour				register(c169)

// The following parameters alias cavPcaWeightsNX:
#define REG_cvDepthOfFieldParams		register(c172)	/* aliases cavFeatureHeights */
#define REG_cvBlurParams				register(c173)
// The following parameters alias cavPcaWeightsNX and cavPcaWeightsNY:
#define REG_cavSampleOffsetWeights		register(c174)	/* 16 vectors [c174,c189] */

#define REG_PAD0						register(c190)	/* free space!! */

#define REG_cvFogValue					register(c206)
#define REG_cvFogColour					register(c207)
#define REG_cfSkyFogFalloff				register(c208)
#define REG_cfLightMapVertColBlend		register(c209)

#define REG_cvLightColour				register(c210)
#define REG_cvLightPosition				register(c211)

#define REG_cvLightDirection			register(c212)
#define REG_cfShadowMapEnabled			register(c213)
#define REG_cfVSMEnabled				register(c214)
#define REG_cfReceiveShadow				register(c215)

#define REG_cvVertexPowerBrightness		register(c216)

#define REG_cfFogEnable					register(c240)



// Light Material Registers - alias REG_cavLightDirections

#define REG_cvDiffuseMin				register(c228)
#define REG_cvDiffuseRange				register(c229)
#define REG_cvEnvmapMin					register(c230)
#define REG_cvEnvmapRange				register(c231)
#define REG_cvSpecularMin				register(c232)
#define REG_cvSpecularRange				register(c233)
#define REG_cvSpecular1Min				register(c234)
#define REG_cvSpecular1Range			register(c235)
#define REG_cvPowers					register(c236)
#define REG_cvClampAndScales			register(c237)
#define REG_cvFlakes					register(c238)
#define REG_cvVinylScales				register(c239)

#define	REG_cvGradientParams            register(c240)
#define	REG_cvGradientColour            register(c241)
#define	REG_cvGradientColourE           register(c242)
#define	REG_ScreenRez                  	register(c243)
#define REG_cfScaleUVs					register(c244)

// for the constants heavy shader instancing
// 4 vectors, c4 to c7
#define REG_cmInstanceVP					register(c4)
#define REG_cvInstanceData					register(c8)
#define REG_cvInstanceWorldSunPosition		register(c9)
#define REG_cvInstanceWorldSunColour		register(c10)
#define REG_cvInstanceWorldAmbientColour	register(c11)
#define REG_cvInstancedFogColour			register(c12)
#define REG_cvInstancedFogValue				register(c13)
#define REG_cvInstanceArray					register(c14)


// Aliased With Light Materials ...

#define REG_cfDrawDepthOfField			register(c230)


#define REG_ciVSMEnabled				register(c)
#define REG_ciShadowMapPCFLevel			register(c)
#define REG_ciShadowMapAlphaEnabled		register(c)
#define REG_ciDoCarShadowMap			register(c)
#define REG_cbIsParallexMapped			register(c)
#define REG_cbDecompressPCA				register(c)

#define REG_DIFFUSE_SAMPLER				register(c)
#define REG_HEIGHTMAP_SAMPLER			register(c)
#define REG_MISCMAP1_SAMPLER			register(c)
#define REG_MISCMAP2_SAMPLER			register(c)
#define REG_MISCMAP3_SAMPLER			register(c)
#define REG_MISCMAP4_SAMPLER			register(c)
#define REG_OPACITY_SAMPLER				register(c)
#define REG_VOLUMEMAP_SAMPLER			register(c)
#define REG_ENVIROMAP_SAMPLER			register(c)
#define REG_NORMALMAP_SAMPLER			register(c)
#define REG_SHADOWMAP_SAMPLER			register(c)
#define REG_SHADOWVOLUME_COLOUR			register(c)
#define REG_SPECULARMAP_SAMPLER			register(c)
#define REG_PCA_COMPONENTS0_SAMPLER		register(c)
#define REG_PCA_COMPONENTS1_SAMPLER		register(c)
#define REG_PCA_COMPONENTS2_SAMPLER		register(c)
#define REG_PCA_COMPONENTS3_SAMPLER		register(c)
#define REG_HEADLIGHT_SAMPLER			register(c)
#define REG_HEADLIGHT_CLIP_SAMPLER		register(c)
#define REG_MIPMAP_GEN_SAMPLER			register(c)





</file>
 </files>
 <tool name="FXLite">
  <defines>
   <define name="PLAT_XENON" value="" />
  </defines>
  <arguments>
   <argument name="/Zi" value="false" />
   <argument name="/Vd" value="false" />
   <argument name="/Xu0_deprecated" value="false" />
   <argument name="/Odu_deprecated" value="false" />
   <argument name="/XOd_" value="false" />
   <argument name="/XOu" value="false" />
   <argument name="/Xmaxtempreg" value="0" />
   <argument name="PsSampBase" value="0" />
   <argument name="PsSampCount" value="0" />
   <argument name="VsSampBase" value="0" />
   <argument name="VsSampCount" value="0" />
   <argument name="VsInstCount" value="0" />
   <argument name="PsInstCount" value="0" />
   <argument name="/Od" value="false" />
   <argument name="/Zpr" value="false" />
   <argument name="/Zpc" value="false" />
   <argument name="/Gpp" value="false" />
   <argument name="/Op" value="false" />
   <argument name="/Gfa" value="false" />
   <argument name="/Gfp" value="false" />
   <argument name="/XZc:zeroInit" value="false" />
   <argument name="/XVe" value="false" />
   <argument name="/Xbe:3-" value="false" />
   <argument name="/Xbe:1-" value="false" />
   <argument name="/XQInomaskedexports" value="false" />
   <argument name="/XOautoz" value="false" />
   <argument name="/XfxAv" value="false" />
   <argument name="/XfxAs" value="false" />
   <argument name="/XfxPv" value="false" />
  </arguments>
 </tool>
 <shaders>
  <shader entrypoint="ps_main" target="ps_3_0" FxlTechniqueName="InstancedMesh" FxlTechnique="0" FxlPassName="" FxlPass="0" ZPass="0" pdbHint="4e4a0000-d1092cc1-bd838f5c">
   <constanttable>
    <constant register="s0">
     <type name="DIFFUSE_SAMPLER" class="object" type="sampler2D" />
    </constant>
   </constanttable>
   <sourcemap>
    <statement pc="2" file="0" line="92" scope="-1" lastinstruction="0" />
    <statement pc="0.1" file="0" line="92" scope="-1" lastinstruction="0" />
    <statement pc="3" file="0" line="95" scope="-1" lastinstruction="0" />
   </sourcemap>
   <variables>
   </variables>
   <variableDebugInfo>
   </variableDebugInfo>
   <scopes>
   </scopes>
   <funcInfo>
    <function id="0" name="ps_main" retID="26">
     <parameter id="25" />
    </function>
    <function id="1" name="vs_main" retID="9">
     <parameter id="8" />
    </function>
   </funcInfo>
   <funcEntryExitInfo>
   </funcEntryExitInfo>
   <VfetchInfo>
   </VfetchInfo>
   <InterpolatorInfo>
    <Interpolator Register="0" Semantic="0xa0" Mask="xyzw" />
    <Interpolator Register="1" Semantic="0x50" Mask="xyzw" />
   </InterpolatorInfo>
   <LiteralFloats>
   </LiteralFloats>
   <LiteralInts>
   </LiteralInts>
   <LiteralBools>
   </LiteralBools>
  </shader>
  <shader entrypoint="vs_main" target="vs_3_0" FxlTechniqueName="InstancedMesh" FxlTechnique="0" FxlPassName="" FxlPass="0" ZPass="0" pdbHint="4e4a0001-d1092cc1-bd838f5c">
   <constanttable>
    <constant register="c8">
     <type name="cvInstanceData" class="vector" type="float" columns="4" />
    </constant>
   </constanttable>
   <sourcemap>
    <statement pc="4" file="0" line="32" scope="-1" lastinstruction="0" />
    <statement pc="5" file="0" line="32" scope="-1" lastinstruction="0" />
    <statement pc="6" file="0" line="32" scope="-1" lastinstruction="0" />
    <statement pc="7" file="0" line="50" scope="-1" lastinstruction="0" />
    <statement pc="8" file="0" line="50" scope="-1" lastinstruction="0" />
    <statement pc="9" file="0" line="42" scope="-1" lastinstruction="0" />
    <statement pc="10" file="0" line="43" scope="-1" lastinstruction="0" />
    <statement pc="11" file="0" line="44" scope="-1" lastinstruction="0" />
    <statement pc="12" file="0" line="45" scope="-1" lastinstruction="0" />
    <statement pc="13" file="0" line="46" scope="-1" lastinstruction="0" />
    <statement pc="14" file="0" line="56" scope="-1" lastinstruction="0" />
    <statement pc="15" file="0" line="63" scope="-1" lastinstruction="0" />
    <statement pc="16" file="0" line="66" scope="-1" lastinstruction="0" />
    <statement pc="17" file="0" line="67" scope="-1" lastinstruction="0" />
    <statement pc="18" file="0" line="68" scope="-1" lastinstruction="0" />
    <statement pc="1.1" file="0" line="68" scope="-1" lastinstruction="0" />
    <statement pc="19" file="0" line="79" scope="-1" lastinstruction="0" />
    <statement pc="20" file="0" line="79" scope="-1" lastinstruction="0" />
    <statement pc="21" file="0" line="79" scope="-1" lastinstruction="0" />
    <statement pc="22" file="0" line="79" scope="-1" lastinstruction="0" />
    <statement pc="2.1" file="0" line="79" scope="-1" lastinstruction="0" />
    <statement pc="23" file="0" line="81" scope="-1" lastinstruction="0" />
    <statement pc="24" file="0" line="85" scope="-1" lastinstruction="0" />
   </sourcemap>
   <variables>
   </variables>
   <variableDebugInfo>
   </variableDebugInfo>
   <scopes>
   </scopes>
   <funcInfo>
    <function id="0" name="ps_main" retID="26">
     <parameter id="25" />
    </function>
    <function id="1" name="vs_main" retID="9">
     <parameter id="8" />
    </function>
   </funcInfo>
   <funcEntryExitInfo>
   </funcEntryExitInfo>
   <VfetchInfo>
    <vfetch Address="9" Register="4" DestSwizzle="xyzw" Semantic="0x02" End="false" />
    <vfetch Address="10" Register="6" DestSwizzle="xyzw" Semantic="0x03" End="false" />
    <vfetch Address="11" Register="7" DestSwizzle="xyzw" Semantic="0x04" End="false" />
    <vfetch Address="12" Register="3" DestSwizzle="xyzw" Semantic="0x05" End="false" />
    <vfetch Address="13" Register="1" DestSwizzle="xzw_" Semantic="0x06" End="true" />
    <vfetch Address="14" Register="0" DestSwizzle="x___" Semantic="0x01" End="false" />
    <vfetch Address="16" Register="5" DestSwizzle="xyzw" Semantic="0x00" End="false" />
    <vfetch Address="17" Register="0" DestSwizzle="xyzw" Semantic="0xa0" End="false" />
    <vfetch Address="18" Register="2" DestSwizzle="xyzw" Semantic="0x50" End="true" />
   </VfetchInfo>
   <InterpolatorInfo>
    <Interpolator Register="0" Semantic="0xa0" Mask="xyzw" />
    <Interpolator Register="1" Semantic="0x50" Mask="xyzw" />
   </InterpolatorInfo>
   <LiteralFloats>
    <Float Register="252" value0="0" value1="0" value2="0" value3="0" />
    <Float Register="253" value0="0" value1="0" value2="0" value3="0" />
    <Float Register="254" value0="0" value1="0" value2="0" value3="0" />
    <Float Register="255" value0="0.125" value1="0.5" value2="0" value3="0" />
   </LiteralFloats>
   <LiteralInts>
   </LiteralInts>
   <LiteralBools>
   </LiteralBools>
  </shader>
 </shaders>
</shader-pdb>
