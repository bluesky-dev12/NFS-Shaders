<?xml version="1.0" encoding="utf-8"?>
<shader-pdb pdbHint="4e4a000e-8ebd6876-ae72d484" version="6132">
 <files>
  <file id="0" path="D:\eax-build1-s09-xenon\Oban\Speed\Xenon\Src\Render\Shaders\ghostcar.fx" time="01c7f8c7-b0ef0cee">//
// Car Effects
//
#include "global.h"
#include "hdr.h"
#include "sphericalharmonics.h" 

static const float3	LUMINANCE_VECTOR  =	float3(0.2125f,	0.7154f, 0.0721f);

shared float4x4 cmWorldMat				: REG_cmWorldMat;				// WORLD
shared float4x4 cmWorldView				: REG_cmWorldView;				// WORLDVIEW
shared float4	cmLocalDirectionMatrix[4]	: REG_cmLocalDirectionMatrix;	// LOCALDIRECTIONMATRIX;
shared float4	cmLocalColourMatrix[4]		: REG_cmLocalColourMatrix;		// LOCALCOLOURMATRIX;

shared float3	cvLocalEyePos			: REG_cvLocalEyePos;			// LOCALEYEPOS;

shared float	cfEnvmapPullAmount		: REG_cfEnvmapPullAmount;		// cfEnvmapPullAmount


// Light Material
shared float4	cvDiffuseMin			: REG_cvDiffuseMin;				// DIFFUSEMIN;
shared float4	cvDiffuseRange			: REG_cvDiffuseRange;			// DIFFUSERANGE;
shared float4	cvSpecularMin			: REG_cvSpecularMin;			// SPECULARMIN;
shared float4	cvSpecularRange			: REG_cvSpecularRange;			// SPECULARRANGE;
shared float4	cvEnvmapMin				: REG_cvEnvmapMin;				// ENVMAPMIN;
shared float4	cvEnvmapRange			: REG_cvEnvmapRange;			// ENVMAPANGE;

shared float4	cvPowers				: REG_cvPowers;					// xyz  = Diffuse, Specular, Envmap powers
shared float4	cvClampAndScales		: REG_cvClampAndScales;			// xyzw = Diffuse, Envmap Clamp		zw = Diffuse, Envmap Scale
shared float4	cvFlakes				: REG_cvFlakes;					// xy   = Diffuse, Spec Metallic Flake amounts
shared float4	cvVinylScales			: REG_cvVinylScales;			// xyz  = Diffuse, Spec, Env lighting scale amounts




sampler DIFFUSE_SAMPLER = sampler_state
{
	AddressU = WRAP;
	AddressV = WRAP;
	MIPFILTER = LINEAR;
	MINFILTER = LINEAR;
	MAGFILTER = LINEAR;
};

samplerCUBE ENVIROMAP_SAMPLER = sampler_state
{
	AddressU = MIRROR;
	AddressV = MIRROR;
	MIPFILTER = LINEAR;
	MINFILTER = LINEAR;
	MAGFILTER = LINEAR;
};

struct VS_INPUT
{
	float4 position : POSITION;
	float4 normal   : NORMAL;
	float4 tangent	: TANGENT;
	float4 color    : COLOR;
	float4 tex		: TEXCOORD;
};

struct VtoP
{
	float4	position			: POSITION;		// xyzw
	float4  envmap_scale		: COLOR0;		// rgb  = envmap scale colour	a   = light luminance
	float4  reflection			: TEXCOORD0;	// xyz  = relfection			w   = 0.0
};

/////////////////////////////////////////////////////////////////////////////////////////
//
// Ghost car shader
//
//

// asm = 42		regs = 8
VtoP vertex_shader(const VS_INPUT IN)
{
	VtoP OUT;
	
	OUT.position				= world_position(IN.position);
	
	// Reflection Vector
	float3	view_vector			= normalize(cvLocalEyePos - IN.position);
	float4	reflection;
	
	reflection					= float4( reflect(-view_vector, IN.normal), 0.0f );		// R = 2 * (N.V) * N - V
	reflection					= float4( mul(reflection, cmWorldView).xyz, 0.0f );

	OUT.reflection.xyz			= reflection.xyz;
	OUT.reflection.w			= dot( view_vector, IN.normal );					// For specular lighting


	// Calcalute view direction powers for each lighting component
	float	vdotn				= saturate( dot(view_vector, IN.normal) );			// Range = 0.0 .. +1.0
	float	vdotn_envmap		= vdotn;

	vdotn_envmap				= clamp( vdotn_envmap,  0, cvClampAndScales.y );
	vdotn_envmap				*= cvClampAndScales.w;

	OUT.envmap_scale.xyz		= cvEnvmapMin  + ( vdotn_envmap  * cvEnvmapRange  );
	OUT.envmap_scale.w			= 0;//dot( LUMINANCE_VECTOR, light_colour );

	return OUT; 
}

// asm instructions	= 16	regs = 6
float4 pixel_shader(const VtoP IN) : COLOR0
{
	// Texture Samples
	float4	envmap_sample		= texCUBE  (ENVIROMAP_SAMPLER,	IN.reflection.xyz	);

	// Envmap
	float3	envmap_colour		= envmap_sample * IN.envmap_scale;
	

	// Total up the final colour
	float4	result;
	
	result.xyz	= envmap_colour * 0.75;
	result.w = 1;
	//result.xyz	+= spec_colour0;

	result.xyz					= CompressColourSpace(result.xyz);

	return result;
}

technique ghostcar &lt;int shader = 1;&gt;
{
    pass p0
    {
		VertexShader = compile vs_3_0 vertex_shader();
		PixelShader  = compile ps_3_0 pixel_shader();
    }
}

#include "ZPrePass_fx.h"

#include "shadowmap_fx_def.h"
#include "shadowmap_fx.h"
</file>
  <file id="1" path="D:\eax-build1-s09-xenon\Oban\Speed\Xenon\Src\Render\Shaders\global.h" time="01c7f8c7-b0ef0cee">#ifndef GLOBAL_H
#define GLOBAL_H

#include "registermap.h"   

// Defined out for the Xbox360 - only needed on the PC
#define DECLARE_TEXTURE(texture)	
#define ASSIGN_TEXTURE(texture)	
#define DECLARE_MINFILTER(default_filter)			 MINFILTER = default_filter;
#define DECLARE_MAGFILTER(default_filter)			 MAGFILTER = default_filter;
#define DECLARE_MIPFILTER(default_filter)			 MIPFILTER = default_filter;

/////////////////////////////////////////////////////////////////////////////////////////
float4x4	cmWorldViewProj			: REG_cmWorldViewProj; //WORLDVIEWPROJECTION ;
float4		cvScreenOffset			: REG_cvScreenOffset; //SCREENOFFSET;
float4		cvVertexPowerBrightness : REG_cvVertexPowerBrightness;

float4 world_position( float4 screen_pos )
{
 	float4 p = mul(screen_pos, cmWorldViewProj);  
	p.xy += cvScreenOffset.xy * p.w;
    return p;
}

float4 screen_position( float4 screen_pos )
{
	screen_pos.xy += cvScreenOffset.xy;
    return screen_pos;
}

float4 CalcVertexColour(float4 colour)
{
	float4 result = pow(colour, cvVertexPowerBrightness.x) * cvVertexPowerBrightness.y;
	result.w = colour.w;
	return result;
}

float3 ScaleHeadLightIntensity(float3 colour) 
{
	float3 result = colour * cvVertexPowerBrightness.z;
	return result;
}



/////////////////////////////////////////////////////////////////////////////////////////
// HDR Colour Space compression
//
// Convert to a log or psudeo-log colour space to save high dynamic range data
/////////////////////////////////////////////////////////////////////////////////////////
#define kCompressCoeff ( 1.0f )
float3 CompressColourSpace(float3 colour)
{
	return colour / (kCompressCoeff+colour);
}

float3 DeCompressColourSpace(float3 colour)
{
	return colour / (kCompressCoeff-colour);
}


/////////////////////////////////////////////////////////////////////////////////////////
// RGBE8 Encoding/Decoding
// The RGBE8 format stores a mantissa per color channel and a shared exponent 
// stored in alpha. Since the exponent is shared, it's computed based on the
// highest intensity color component. The resulting color is RGB * 2^Alpha,
// which scales the data across a logarithmic scale.
/////////////////////////////////////////////////////////////////////////////////////////

float4 EncodeRGBE8( in float3 rgb )	  
{
	float4 vEncoded;

    // Determine the largest color component
	float maxComponent = max( max(rgb.r, rgb.g), rgb.b );
	
	// Round to the nearest integer exponent
	float fExp = ceil( log2(maxComponent) );

    // Divide the components by the shared exponent
	vEncoded.rgb = rgb / exp2(fExp);
	
	// Store the shared exponent in the alpha channel
	vEncoded.a = (fExp + 128) / 255;

	return vEncoded;
}

/////////////////////////////////////////////////////////////////////////////////////////

float3 DecodeRGBE8( in float4 rgbe )
{
	float3 vDecoded;

    // Retrieve the shared exponent
	float fExp = rgbe.a * 255 - 128;
	
	// Multiply through the color components
	vDecoded = rgbe.rgb * exp2(fExp);
	
	return vDecoded;
}

/////////////////////////////////////////////////////////////////////////////////////////
#endif</file>
  <file id="2" path="D:\eax-build1-s09-xenon\Oban\Speed\Xenon\Src\Render\Shaders\registermap.h" time="01c7f8c7-b0d997bb">
// ------------------------------------------------------------------------------------------------------------------------------------------

#define CONSTANT_RESERVED_DO_NOT_USE			(0)		/* 4 vectors [c0,c3] */

// ------------------------------------------------------------------------------------------------------------------------------------------

#define REG_RESERVED_DO_NOT_USE			register(c0)	/* 4 vectors [c0,c3] */

#define REG_cmWorldMat					register(c4)	/* 4 vectors [c0,c3] */
#define REG_cmWorldMatTranspose			register(c8)	/* 4 vectors [c4,c7] */
#define REG_cmWorldView					register(c12)	/* 4 vectors [c8,c11] */
#define REG_cmShadowMapWVP				register(c16)	/* 4 vectors [c12,c15] */
#define REG_cmLightWVP					register(c20)	/* 4 vectors [c16,c19] */
#define REG_cmWorldViewProj				register(c24)	/* 4 vectors [c20,c23] */
#define REG_cmPrevWorldViewProj			register(c28)	/* 4 vectors [c24,c27] */
#define REG_cvLocalEyePos				register(c32)	/* 1 vecotr	 [c32] */
#define REG_cvLocalLightVec				register(c33)	/* 1 vecotr	 [c33] */
#define REG_cfSkyDomeRotation			register(c34)	/* 1 vecotr	 [c34] */

#define REG_cmLocalColourMatrix			register(c36)	/* 4 vectors [c36,c39] */
#define REG_cmLocalDirectionMatrix		register(c40)	/* 4 vectors [c40,c43] */
#define REG_cmLocalPositionMatrix		register(c44)	/* 4 vectors [c44,c47] */
#define REG_cavHarmonicCoeff			register(c48)	/* 10 floats, 3 vectors, 1 pad vector [48,51] */

#define REG_camBlendMatrices			register(c52)	/* 16 vectors [c52,c67] */
#define REG_cavWorldHeadlightDirection	register(c68)	/* 2 vectors [c68,c69] */
#define REG_cavWorldHeadlightPosition	register(c70)	/* 2 vectors [c70,c71] */
#define REG_cavWorldHeadlightUpDirection register(c72)	/* 2 vectors [c72,c73] */

#define REG_cmShadowMapVP				register(c68) // note clash with head light
#define REG_cmShadowMapBiasMatrix		register(c72)	/* 4 vectors [c72, c75] */



#define REG_cvWorldSunColour			register(c79)
#define REG_cvWorldAmbientColour		register(c80)

// available: [c82,c115] (but would alias cavPcaWeightsR and cavPcaWeightsG)
// PCA/UCap parameters (ucap.fx, water.fx)
#define REG_cafPcaMean					register(c81)	/* 1 vector */
#define REG_cavPcaWeightsR				register(c82)	/* 22 vectors [c82,c103] */
#define REG_cavPcaWeightsG				register(c104)	/* 22 vectors [c104,c125] */
#define REG_cavPcaWeightsB				register(c126)	/* 22 vectors [c126,c147] */
#define REG_cavPcaWeightsX				register(c148)	/* 8 vectors [c148,c155] */
#define REG_cavPcaWeightsY				register(c156)	/* 8 vectors [c156,c163] */
#define REG_cavPcaWeightsZ				register(c164)	/* 8 vectors [c164,c171] */
#define REG_cavPcaWeightsNX				register(c172)	/* 8 vectors [c172,c179] */
#define REG_cavPcaWeightsNY				register(c180)	/* 8 vectors [c180,c187] */
#define REG_cavPcaWeightsNZ				register(c188)	/* 8 vectors [c188,c195] */
#define REG_cavFeatureHeights			register(c196)	/* 1 vector */


// The following parameters alias cavPcaWeightsG:
#define REG_cfMipMapBias				register(c116)
#define REG_cfBrightness				register(c117)
#define REG_cfSurfaceReflection			register(c118)
#define REG_cfRainIntensity				register(c119)
#define REG_cfSpecularPower				register(c120)
#define REG_cfMetallicScale				register(c121)
#define REG_cfEnvmapPullAmount			register(c122)
#define REG_cfEnvmapPower				register(c123)
#define REG_PAD2						register(c125)

// The following parameters alias cavPcaWeightsB:
#define REG_cfCombinedBrightness		register(c126)
#define REG_cvVisualEffectFadeColour	register(c127)	/* also aliases cfSkyAlphaTag */
#define REG_cfSkyAlphaTag				register(c127)	/* also aliases cvVisualEffectFadeColour */
#define REG_cfShadowVolumeOffset		register(c128)
#define REG_cfRVMWorldBrightness		register(c129)
#define REG_cfDesaturation				register(c130)
#define REG_cfBloomScale				register(c131)
#define REG_cfSplitScreenUVScale		register(c132)
#define REG_cfColourCubeFilterBlend		register(c133)
#define REG_cfTimeTicker				register(c134)
#define REG_cfMiddleGray				register(c135)
#define REG_cfBrightPassThreshold		register(c136)

#define REG_cvScreenOffset				register(c137)
#define REG_cvFog_Br_Plus_Bm			register(c138)
#define REG_cvFog_One_Over_BrBm			register(c139)
#define REG_cvFog_Const_1				register(c140)
#define REG_cvFog_Const_2				register(c141)
#define REG_cvFog_Const_3				register(c142)
#define REG_cvAmbientColour				register(c143)
#define REG_cvShadowParams0				register(c144)
#define REG_cvShadowParams1				register(c145)


// The following parameters alias cavPcaWeightsX:
#define REG_cvDiffuseColour				register(c148)
#define REG_cvSpecularColour			register(c149)
// available: [c150,c155] (but would alias cavPcaWeightsX)

// The following parameters alias cavPcaWeightsY:
#define REG_cvShadowColour				register(c156)
#define REG_cvTextureOffset				register(c161)
#define REG_cvLocalCenter				register(c162)
#define REG_cvTreeParams				register(c163)

// The following parameters alias cavPcaWeightsZ:
#define REG_cvBaseAlphaRef				register(c164)
#define REG_cvCloudIntensity			register(c165)
#define REG_cvLocalLightPos				register(c166)
#define REG_cvPixelizationScale			register(c167)
#define REG_cvGrassColour				register(c169)

// The following parameters alias cavPcaWeightsNX:
#define REG_cvDepthOfFieldParams		register(c172)	/* aliases cavFeatureHeights */
#define REG_cvBlurParams				register(c173)
// The following parameters alias cavPcaWeightsNX and cavPcaWeightsNY:
#define REG_cavSampleOffsetWeights		register(c174)	/* 16 vectors [c174,c189] */

#define REG_PAD0						register(c190)	/* free space!! */

#define REG_cvFogValue					register(c206)
#define REG_cvFogColour					register(c207)
#define REG_cfSkyFogFalloff				register(c208)
#define REG_cfLightMapVertColBlend		register(c209)

#define REG_cvLightColour				register(c210)
#define REG_cvLightPosition				register(c211)

#define REG_cvLightDirection			register(c212)
#define REG_cfShadowMapEnabled			register(c213)
#define REG_cfVSMEnabled				register(c214)
#define REG_cfReceiveShadow				register(c215)

#define REG_cvVertexPowerBrightness		register(c216)

#define REG_cfFogEnable					register(c240)



// Light Material Registers - alias REG_cavLightDirections

#define REG_cvDiffuseMin				register(c228)
#define REG_cvDiffuseRange				register(c229)
#define REG_cvEnvmapMin					register(c230)
#define REG_cvEnvmapRange				register(c231)
#define REG_cvSpecularMin				register(c232)
#define REG_cvSpecularRange				register(c233)
#define REG_cvSpecular1Min				register(c234)
#define REG_cvSpecular1Range			register(c235)
#define REG_cvPowers					register(c236)
#define REG_cvClampAndScales			register(c237)
#define REG_cvFlakes					register(c238)
#define REG_cvVinylScales				register(c239)

#define	REG_cvGradientParams            register(c240)
#define	REG_cvGradientColour            register(c241)
#define	REG_cvGradientColourE           register(c242)
#define	REG_ScreenRez                  	register(c243)
#define REG_cfScaleUVs					register(c244)

// for the constants heavy shader instancing
// 4 vectors, c4 to c7
#define REG_cmInstanceVP					register(c4)
#define REG_cvInstanceData					register(c8)
#define REG_cvInstanceWorldSunPosition		register(c9)
#define REG_cvInstanceWorldSunColour		register(c10)
#define REG_cvInstanceWorldAmbientColour	register(c11)
#define REG_cvInstancedFogColour			register(c12)
#define REG_cvInstancedFogValue				register(c13)
#define REG_cvInstanceArray					register(c14)


// Aliased With Light Materials ...

#define REG_cfDrawDepthOfField			register(c230)


#define REG_ciVSMEnabled				register(c)
#define REG_ciShadowMapPCFLevel			register(c)
#define REG_ciShadowMapAlphaEnabled		register(c)
#define REG_ciDoCarShadowMap			register(c)
#define REG_cbIsParallexMapped			register(c)
#define REG_cbDecompressPCA				register(c)

#define REG_DIFFUSE_SAMPLER				register(c)
#define REG_HEIGHTMAP_SAMPLER			register(c)
#define REG_MISCMAP1_SAMPLER			register(c)
#define REG_MISCMAP2_SAMPLER			register(c)
#define REG_MISCMAP3_SAMPLER			register(c)
#define REG_MISCMAP4_SAMPLER			register(c)
#define REG_OPACITY_SAMPLER				register(c)
#define REG_VOLUMEMAP_SAMPLER			register(c)
#define REG_ENVIROMAP_SAMPLER			register(c)
#define REG_NORMALMAP_SAMPLER			register(c)
#define REG_SHADOWMAP_SAMPLER			register(c)
#define REG_SHADOWVOLUME_COLOUR			register(c)
#define REG_SPECULARMAP_SAMPLER			register(c)
#define REG_PCA_COMPONENTS0_SAMPLER		register(c)
#define REG_PCA_COMPONENTS1_SAMPLER		register(c)
#define REG_PCA_COMPONENTS2_SAMPLER		register(c)
#define REG_PCA_COMPONENTS3_SAMPLER		register(c)
#define REG_HEADLIGHT_SAMPLER			register(c)
#define REG_HEADLIGHT_CLIP_SAMPLER		register(c)
#define REG_MIPMAP_GEN_SAMPLER			register(c)





</file>
  <file id="3" path="D:\eax-build1-s09-xenon\Oban\Speed\Xenon\Src\Render\Shaders\hdr.h" time="01c7f8c7-b0f3d1a4">/////////////////////////////////////////////////////////////////////////////////////////
shared float cfMiddleGray				: REG_cfMiddleGray; //MIDDLE_GRAY;		//	The	middle gray	key	value
shared float cfVisualEffectBrightness	: REG_cfVisualEffectBrightness; //VISUAL_EFFECT_BRIGHTNESS;

/////////////////////////////////////////////////////////////////////////////////////////

float GetAdaptedLuminanceFromSampler( sampler samplerLum )
{
	float	fAdaptedLum = tex2D( samplerLum, float2((0.5f), (0.5f)) ).x;

	// clamp lower bound of adaptive lum to middle gray
	fAdaptedLum = max( fAdaptedLum, cfMiddleGray );

	return fAdaptedLum;
}

/////////////////////////////////////////////////////////////////////////////////////////

float GetCombinedBrightness( sampler samplerLum )
{
	float	fLum = GetAdaptedLuminanceFromSampler( samplerLum ),
			fCombinedBrightness;

	fCombinedBrightness = 2 * (cfMiddleGray / (fLum + 0.001f)) * cfVisualEffectBrightness;

	return fCombinedBrightness;
}

/////////////////////////////////////////////////////////////////////////////////////////
</file>
  <file id="4" path="D:\eax-build1-s09-xenon\Oban\Speed\Xenon\Src\Render\Shaders\sphericalharmonics.h" time="01c7f8c7-b106e47c">//
// Spherical Harmonic Lighting used be the characters and car shaders
//

shared float4 cavHarmonicCoeff[10]		: REG_cavHarmonicCoeff;
float3 EvaluateSphericalHarmonic(float3 normal)
{
	float3 normalSquared	= normal*normal;
	float3 normalCross		= float3(normal.x*normal.y, normal.z*normal.x, normal.y*normal.z);

	float3 result;
	result  = cavHarmonicCoeff[0];
	result += cavHarmonicCoeff[1] * normalSquared.x;
	result += cavHarmonicCoeff[2] * normalSquared.y;
	result += cavHarmonicCoeff[3] * normalSquared.z;
	result += cavHarmonicCoeff[4] * normalCross.x;
	result += cavHarmonicCoeff[5] * normalCross.y;
	result += cavHarmonicCoeff[6] * normalCross.z;
	result += cavHarmonicCoeff[7] * normal.x;
	result += cavHarmonicCoeff[8] * normal.y;
	result += cavHarmonicCoeff[9] * normal.z;
	return result;
}
</file>
  <file id="5" path="D:\eax-build1-s09-xenon\Oban\Speed\Xenon\Src\Render\Shaders\ZPrePass_fx.h" time="01c7f8c7-b0dbfa16">/////////////////////////////////////////////////////////////////////////////////////////

struct PS_INPUT_Z
{
	float4 position		: POSITION;
};

PS_INPUT_Z ZPassVertexShader(const VS_INPUT IN)
{
	PS_INPUT_Z OUT;

	OUT.position = mul(IN.position, cmWorldViewProj);

	return OUT;
}

technique ZPrePass &lt;int shader = 1;&gt;
{
	pass p0
	{
		VertexShader		= compile vs_1_1 ZPassVertexShader();
		PixelShader			= NULL;
	}
}

/////////////////////////////////////////////////////////////////////////////////////////
struct PS_INPUT_VERTEX_COLOUR
{
	float4 position			: POSITION;
	float4 color			: COLOR;
};

PS_INPUT_VERTEX_COLOUR VertexShaderVertexColour(	float4 position : POSITION,
													float4 color    : COLOR)
{
	PS_INPUT_VERTEX_COLOUR OUT;

	OUT.position = mul(position, cmWorldViewProj);
	OUT.color	 = color;

	return OUT;
}

float4 PixelShaderVertexColour(const PS_INPUT_VERTEX_COLOUR IN) : COLOR0
{
	return IN.color;
}

technique RenderVertexColour &lt;int shader = 1;&gt;
{
	pass p0
	{
		VertexShader = compile vs_1_1 VertexShaderVertexColour();
		PixelShader  = compile ps_2_0 PixelShaderVertexColour();
	}
}

/////////////////////////////////////////////////////////////////////////////////////////
</file>
  <file id="6" path="D:\eax-build1-s09-xenon\Oban\Speed\Xenon\Src\Render\Shaders\shadowmap_fx_def.h" time="01c7f8c7-b0ffbd6b">/////////////////////////////////////////////////////////////////////////////////////////
#include "shadowenum.h"

shared float4x4	cmShadowMapWVP			: REG_cmShadowMapWVP;
shared float4x4	cmShadowMapVP			: REG_cmShadowMapVP;
shared float4x4 cmLightWVP				: REG_cmLightWVP;
shared float4x4 cmShadowMapBiasMatrix	: REG_cmShadowMapBiasMatrix;
shared float4	cvLightDirection		: REG_cvLightDirection;

shared float4 cvAmbientColour			: REG_cvAmbientColour;
shared float4 cvShadowParams0			: REG_cvShadowParams0;
shared float4 cvShadowParams1			: REG_cvShadowParams1;

shared float cfShadowMapEnabled			: REG_cfShadowMapEnabled;
shared float cfVSMEnabled				: REG_cfVSMEnabled;	
shared float cfReceiveShadow			: REG_cfReceiveShadow;


#define	cfShadowMapAlphaMin cvShadowParams0.x
#define	cfShadowMapBiasA	cvShadowParams0.y
#define	cfShadowMapBiasB	cvShadowParams0.z
#define	cfVSMEpsilon		cvShadowParams0.w

#define	ShadowMapNdotLBiasOffset	cvShadowParams1.x
#define	ShadowMapNdotLBiasScale		cvShadowParams1.y
#define	ShadowMapVSMThreshold		cvShadowParams1.z
#define	ShadowMapWingMirrorBias		cvShadowParams1.w

#define SHADOWMAP_C1				0.2f
#define SHADOWMAP_C2				0.1f

//#define cfShadowMapScaleY	cvShadowParams1.w


//#define ENABLE_SHADOW_STENCIL_MASK
//#define SHADOW_LOD_ON

#define USE_SHADOW_OPTIMIZED

/////////////////////////////////////////////////////////////////////////////////////////

sampler SHADOWMAP_SAMPLER = sampler_state
{
	BorderColor = 0xFFFFFFFF;
	AddressU    = BORDER;
	AddressV    = BORDER;
	MIPFILTER   = NONE; //POINT;
	MINFILTER   = POINT;
	MAGFILTER   = POINT;
};

/////////////////////////////////////////////////////////////////////////////////////////

struct PS_INPUT_LISPSM
{
	float4 position		: POSITION;
};

/////////////////////////////////////////////////////////////////////////////////////////

struct PS_INPUT_LISPSM_ALPHA
{
	float4 position		: POSITION;
	float4 diffuse_tex	: TEXCOORD0;
	//float4 light_tex	: TEXCOORD1;
};

/////////////////////////////////////////////////////////////////////////////////////////

struct PS_OUTPUT_LISPSM
{
	float4 color		: COLOR0;
	//	float depth			: DEPTH0;
};

/////////////////////////////////////////////////////////////////////////////////////////

struct PS_INPUT_TSM
{
	float4 position		: POSITION;
	float4 light_tex	: TEXCOORD1;
};

/////////////////////////////////////////////////////////////////////////////////////////

struct PS_INPUT_TSM_ALPHA
{
	float4 position		: POSITION;
	float4 diffuse_tex	: TEXCOORD0;
	float4 light_tex	: TEXCOORD1;
};

/////////////////////////////////////////////////////////////////////////////////////////

struct PS_OUTPUT_TSM
{
	float4 color		: COLOR0;
	float depth			: DEPTH0;
};

/////////////////////////////////////////////////////////////////////////////////////////

float4 VertexShadowTex( const float4 v_position )
{
	return mul( v_position, cmShadowMapWVP );
}

float4 VertexShadowTexOptimized( const float4 v_position, float ndotl, out float shadow_fade)
{
	float4 shadow_tex		= mul( v_position, cmShadowMapWVP );

#ifdef USE_SHADOW_OPTIMIZED

	// bias
//	shadow_tex.z			= shadow_tex.z / shadow_tex.w - ShadowMapNdotLBiasOffset - ShadowMapNdotLBiasScale * (1.0f - max(SHADOWMAP_C2, saturate(ndotl)));
	// edge attenuation
	float2 edgeAttenuation = shadow_tex.xy / shadow_tex.w;
	edgeAttenuation = saturate(1 - pow(edgeAttenuation,4));
	shadow_fade	= 1 - edgeAttenuation.x * edgeAttenuation.y;
#else
	shadow_fade = 0;
#endif

	return shadow_tex;
}

/////////////////////////////////////////////////////////////////////////////////////////
/*
float4 VertexLightTex( const float4 v_position )
{
return mul( v_position, cmLightWVP );
}
*/
/////////////////////////////////////////////////////////////////////////////////////////

float4 VertexShadowPosView( const float4 v_position )
{
	// Transform position to view space
	return mul( v_position, cmWorldView );
}

/////////////////////////////////////////////////////////////////////////////////////////

float2 GetShadowMapTexCoord( const float4 s_tex )
{
	float2	shadow_tex_c = (0.5 * s_tex.xy / s_tex.w) + 0.5f;

	shadow_tex_c.y = 1.0f - shadow_tex_c.y;

	return shadow_tex_c;
}

/////////////////////////////////////////////////////////////////////////////////////////

float4 Tex2DOffset( sampler2D ss, float2 uv, float2 offset )
{
	float4 result;
	float offsetx = offset.x;
	float offsety = offset.y;

	asm {
		tfetch2D result, uv, ss, OffsetX=offsetx, OffsetY=offsety
	};

	return result;
}

float DoShadowPCFDepth( const float2 shadow_lookup_uv, const float shadow_bias, const float shadow_fade, const int shadowDetail)
{
	float stepSize = 1.0f;
	float cornerStepSize = 0.5f;

	// Center tap
	float sum = Tex2DOffset( SHADOWMAP_SAMPLER, shadow_lookup_uv, float2(  0,  0 ) ).r; 
	sum = step( shadow_bias, sum );

	//
	// Default 9 tap PCF for anything greater than the low detail
	//
	if(shadowDetail != ShadowShaderDetail_LOW)	// const if-statement compiled out at compile time
	{
		// Top, right, bottom and left taps
		float4 first_group = 0;
		first_group.x = Tex2DOffset( SHADOWMAP_SAMPLER, shadow_lookup_uv, float2( -stepSize, 0 ) ).r; 
		first_group.y = Tex2DOffset( SHADOWMAP_SAMPLER, shadow_lookup_uv, float2( stepSize,  0 ) ).r; 
		first_group.z = Tex2DOffset( SHADOWMAP_SAMPLER, shadow_lookup_uv, float2( 0,  stepSize ) ).r; 
		first_group.w = Tex2DOffset( SHADOWMAP_SAMPLER, shadow_lookup_uv, float2(  0, -stepSize ) ).r; 

		// 4 Corner taps
		float4 second_group = 0;
		second_group.x = Tex2DOffset( SHADOWMAP_SAMPLER, shadow_lookup_uv, float2(  cornerStepSize,  cornerStepSize) ).r; 
		second_group.y = Tex2DOffset( SHADOWMAP_SAMPLER, shadow_lookup_uv, float2(  cornerStepSize, -cornerStepSize ) ).r; 
		second_group.z = Tex2DOffset( SHADOWMAP_SAMPLER, shadow_lookup_uv, float2(  -cornerStepSize, cornerStepSize ) ).r; 
		second_group.w = Tex2DOffset( SHADOWMAP_SAMPLER, shadow_lookup_uv, float2(  -cornerStepSize, -cornerStepSize ) ).r; 

		first_group = step( shadow_bias, first_group );
		second_group = step( shadow_bias, second_group );

		sum += dot(first_group, first_group);
		sum += dot(second_group, second_group);
		sum /= 9.0;
	}

	return (shadow_fade + sum);
}

float DoShadow( const float4 shadow_tex, const float ndotl, int shadowDetail = ShadowShaderDetail_HIGH)
{
	float adjusted_ndotl	= max(SHADOWMAP_C2, saturate(ndotl));


	float2 edgeAttenuation = shadow_tex.xy / shadow_tex.w;
	edgeAttenuation = saturate(1 - pow(edgeAttenuation,4));
	float2 shadow_uv		= GetShadowMapTexCoord( shadow_tex );
	float  shadow_biased	= ( shadow_tex.z / shadow_tex.w ) - ShadowMapNdotLBiasOffset - ShadowMapNdotLBiasScale * (1.0f - adjusted_ndotl);
	float  shadow_fade		= 1 - edgeAttenuation.x * edgeAttenuation.y;

	float fv =  DoShadowPCFDepth( shadow_uv, shadow_biased, shadow_fade, shadowDetail);


	if(shadowDetail != ShadowShaderDetail_LOW)	// const if-statement compiled out at compile time
	{
		fv = saturate(lerp(0.0f, fv, saturate((adjusted_ndotl - SHADOWMAP_C2)/(SHADOWMAP_C1 - SHADOWMAP_C2))) + (1.0 - cfShadowMapEnabled));
	}

	return fv;
}


float DoShadowOptimized( const float4 shadow_tex, const float ndotl, float shadow_fade, int shadowDetail = ShadowShaderDetail_HIGH)
{
	float adjusted_ndotl	= max(SHADOWMAP_C2, saturate(ndotl));

#ifdef USE_SHADOW_OPTIMIZED
	float2 shadow_uv		= GetShadowMapTexCoord( shadow_tex );
	//float  shadow_biased	= shadow_tex.z;
	float  shadow_biased	= ( shadow_tex.z / shadow_tex.w ) - ShadowMapNdotLBiasOffset - ShadowMapNdotLBiasScale * (1.0f - adjusted_ndotl);
#else
	float2 edgeAttenuation = shadow_tex.xy / shadow_tex.w;
	edgeAttenuation = saturate(1 - pow(edgeAttenuation,4));
	float2 shadow_uv		= GetShadowMapTexCoord( shadow_tex );
	float  shadow_biased	= ( shadow_tex.z / shadow_tex.w ) - ShadowMapNdotLBiasOffset - ShadowMapNdotLBiasScale * (1.0f - adjusted_ndotl);
	shadow_fade		= 1 - edgeAttenuation.x * edgeAttenuation.y;

#endif
	float fv =  DoShadowPCFDepth( shadow_uv, shadow_biased, shadow_fade, shadowDetail);

	if(shadowDetail != ShadowShaderDetail_LOW)	// const if-statement compiled out at compile time
	{
		fv = saturate(lerp(0.0f, fv, saturate((adjusted_ndotl - SHADOWMAP_C2)/(SHADOWMAP_C1 - SHADOWMAP_C2))) + (1.0 - cfShadowMapEnabled));
	}

	return fv;
}

/////////////////////////////////////////////////////////////////////////////////////////


float DoShadowCar( const float4 shadow_tex, const float ndotl, int shadowDetail = ShadowShaderDetail_HIGH )
{
	return DoShadow(shadow_tex, ndotl);
}

</file>
  <file id="7" path="D:\eax-build1-s09-xenon\Oban\Speed\Indep\Src\Render\Shaders\shadowenum.h" time="01c7f8bf-7e400889">#ifndef SHADOWENUM_H
#define SHADOWENUM_H

// these numbers should match up with the enumerations in ShadowShaderDetail in eEffect.hpp
// (should make these in a header thats included by both fxc and the game compiler)
static const int ShadowShaderDetail_OFF = 0;
static const int ShadowShaderDetail_LOW = 1;
static const int ShadowShaderDetail_MEDIUM = 2;
static const int ShadowShaderDetail_HIGH = 3;

#endif
</file>
  <file id="8" path="D:\eax-build1-s09-xenon\Oban\Speed\Xenon\Src\Render\Shaders\shadowmap_fx.h" time="01c7f8c7-b0ffbd6b">/////////////////////////////////////////////////////////////////////////////////////////
//	Shadow Map Shaders
/////////////////////////////////////////////////////////////////////////////////////////

float4 CalcShadowBias(float4 pos)
{
	float4 Pbias;

	float4 Porig = mul(pos, cmWorldMat);

	Porig.w = 1.0f;

	float4 tmp = mul(Porig, cmShadowMapBiasMatrix); // Porig * M'

	tmp.xy /= tmp.w;

	//tmp.x *= tmp.x;//dot(tmp.xyz, tmp.xyz);
	
	float L_tex = cfShadowMapBiasA + cfShadowMapBiasB * abs(tmp.x);
	
	Pbias.xyz = Porig.xyz + cvLightDirection.xyz * L_tex;

	Pbias = mul(float4(Pbias.xyz,1), cmShadowMapVP);

	//Pbias.x = tmp.x;//L_tex;
	//Pbias = mul(Porig, cmShadowMapVP);
	//Pbias.x = cmShadowMapWVP[0][0];//dot(Pbias.xyz, Pbias.xyz);
	//Pbias.x = (cfShadowMapBiasA);// + cfShadowMapBiasB * L_tex);

	return Pbias;
}


PS_INPUT_LISPSM VertexShaderLiSPSM(const VS_INPUT IN, uniform bool use_matrix_palette)
{
	PS_INPUT_LISPSM OUT;

	float4 position = float4(IN.position.xyz, 1);

// car matrix palette specific
#ifdef CAR_SHADER 
	if (use_matrix_palette)
	{
		int index = IN.color.z * 15.1;

		float4x4 tm = camBlendMatrices[index];

		// clear damage context information
		tm[2].w = 0;
		tm[3].w = 1;

		position = mul(position, tm);
	}
#endif 

	OUT.position = mul(position, cmWorldViewProj);



	return OUT;
}

/////////////////////////////////////////////////////////////////////////////////////////

PS_INPUT_LISPSM_ALPHA VertexShaderLiSPSMAlpha(const VS_INPUT IN)
{
	PS_INPUT_LISPSM_ALPHA OUT;

	float4 position = float4(IN.position.xyz, 1);

	OUT.position = mul(position, cmWorldViewProj);


	OUT.diffuse_tex.xy = IN.tex.xy;

	OUT.diffuse_tex.zw = 1.0f;

	return OUT;
}

/////////////////////////////////////////////////////////////////////////////////////////

PS_OUTPUT_LISPSM PixelShaderLiSPSM(const PS_INPUT_LISPSM IN)
{
	PS_OUTPUT_LISPSM OUT;

	OUT.color = 0;

//	OUT.depth = saturate(IN.light_tex.z / IN.light_tex.w);

	return OUT;
}

/////////////////////////////////////////////////////////////////////////////////////////

PS_OUTPUT_LISPSM PixelShaderLiSPSMAlpha(const PS_INPUT_LISPSM_ALPHA IN)
{
	PS_OUTPUT_LISPSM OUT;

	OUT.color = 0;

//	OUT.depth = saturate(IN.light_tex.z / IN.light_tex.w);
	
	float4 v_tex = tex2D(DIFFUSE_SAMPLER, IN.diffuse_tex);

	clip( v_tex.w - cfShadowMapAlphaMin );
	
	return OUT;
}

/////////////////////////////////////////////////////////////////////////////////////////

technique RenderLiSPSM &lt;int shader = 1;&gt;
{
    pass p0
    {
		VertexShader = compile vs_1_1 VertexShaderLiSPSM(false);
		PixelShader  = NULL;//compile ps_3_0 PixelShaderLiSPSM();
    }
}

/////////////////////////////////////////////////////////////////////////////////////////

technique RenderLiSPSMMatrixPalette &lt;int shader = 1;&gt;
{
	pass p0
	{
		VertexShader = compile vs_1_1 VertexShaderLiSPSM(true);
		PixelShader  = NULL;//compile ps_3_0 PixelShaderLiSPSM();
	}
}

/////////////////////////////////////////////////////////////////////////////////////////

technique RenderLiSPSMAlphaTex &lt;int shader = 1;&gt;
{
    pass p0
    {
		VertexShader = compile vs_1_1 VertexShaderLiSPSMAlpha();
		PixelShader  = compile ps_3_0 PixelShaderLiSPSMAlpha();
    }
}

/////////////////////////////////////////////////////////////////////////////////////////

PS_INPUT_TSM VertexShaderTSM(const VS_INPUT IN, uniform bool use_matrix_palette)
{
	PS_INPUT_TSM OUT;

	float4 position = float4(IN.position.xyz, 1);

// car matrix palette specific
#ifdef CAR_SHADER 
	if (use_matrix_palette)
	{
		int index = IN.color.z * 15.1;
		position = mul(position, camBlendMatrices[index]);
	}
#endif 


	OUT.position = mul(position, cmWorldViewProj);

	OUT.light_tex = mul(position, cmLightWVP);

//	OUT.position.z = OUT.light_tex.z / OUT.light_tex.w;

//	OUT.position.z *= OUT.position.w;

	return OUT;
}

/////////////////////////////////////////////////////////////////////////////////////////

PS_INPUT_TSM_ALPHA VertexShaderTSMAlpha(const VS_INPUT IN)
{
	PS_INPUT_TSM_ALPHA OUT;

	float4 position = float4(IN.position.xyz, 1);

	OUT.position = mul(position, cmWorldViewProj);

	OUT.diffuse_tex.xy = IN.tex.xy;
	OUT.diffuse_tex.zw = 1.0f;

	OUT.light_tex = mul(position, cmLightWVP);

//	OUT.position.z = OUT.light_tex.z / OUT.light_tex.w;

//	OUT.position.z *= OUT.position.w;

	return OUT;
}

/////////////////////////////////////////////////////////////////////////////////////////

PS_OUTPUT_TSM PixelShaderTSM(const PS_INPUT_TSM IN)
{
	PS_OUTPUT_TSM	OUT;

	OUT.color = 1.0;

	OUT.depth = IN.light_tex.z / IN.light_tex.w;

	return OUT;
}

/////////////////////////////////////////////////////////////////////////////////////////

PS_OUTPUT_TSM PixelShaderTSMAlpha(const PS_INPUT_TSM_ALPHA IN)
{
	PS_OUTPUT_TSM OUT;

	OUT.color = 1.0;
	
	OUT.depth = IN.light_tex.z / IN.light_tex.w;

	//if ( ciShadowMapAlphaEnabled )
	{
		float4 v_tex = tex2D(DIFFUSE_SAMPLER, IN.diffuse_tex);
		clip( v_tex.w - cfShadowMapAlphaMin );
	}

	return OUT;
}

/////////////////////////////////////////////////////////////////////////////////////////

technique RenderTSM &lt;int shader = 1;&gt;
{
    pass p0
    {
		VertexShader = compile vs_1_1 VertexShaderTSM(false);
		PixelShader  = compile ps_3_0 PixelShaderTSM();
    }
}

/////////////////////////////////////////////////////////////////////////////////////////

technique RenderTSMMatrixPalette &lt;int shader = 1;&gt;
{
	pass p0
	{
		VertexShader = compile vs_1_1 VertexShaderTSM(true);
		PixelShader  = compile ps_3_0 PixelShaderTSM();
	}
}

/////////////////////////////////////////////////////////////////////////////////////////

technique RenderTSMAlphaTex &lt;int shader = 1;&gt;
{
    pass p0
    {
		VertexShader = compile vs_1_1 VertexShaderTSMAlpha();
		PixelShader  = compile ps_3_0 PixelShaderTSMAlpha();
    }
}
/*
/////////////////////////////////////////////////////////////////////////////////////////

struct PS_INPUT_WORLD
{
	float4 position : POSITION;
};

/////////////////////////////////////////////////////////////////////////////////////////

PS_INPUT_WORLD VertexShaderWorld(const VS_INPUT IN)
{
	PS_INPUT_WORLD OUT;

	OUT.position = mul(IN.position, cmWorldViewProj);

	return OUT;
}

/////////////////////////////////////////////////////////////////////////////////////////

struct PS_INPUT_WORLD_TEX
{
	float4 position		: POSITION;
	float2 diffuse_tex	: TEXCOORD0;
};

/////////////////////////////////////////////////////////////////////////////////////////

PS_INPUT_WORLD_TEX VertexShaderWorldTex(const VS_INPUT IN)
{
	PS_INPUT_WORLD_TEX OUT;

	OUT.position	= mul(IN.position, cmWorldViewProj);
	OUT.diffuse_tex	= IN.tex;

	return OUT;
}

/////////////////////////////////////////////////////////////////////////////////////////

PS_OUTPUT PixelShaderWhite(const PS_INPUT_WORLD IN)
{
	PS_OUTPUT OUT;

	OUT.color = 1.0f;

	return OUT;
}

/////////////////////////////////////////////////////////////////////////////////////////

PS_OUTPUT PixelShaderTexelDensity(const PS_INPUT_WORLD_TEX IN)
{
	PS_OUTPUT OUT;

	OUT.color.x   = fmod( floor( IN.diffuse_tex.x*cfDiffuseMapWidth /10 ), 2 );
	OUT.color.y   = fmod( floor( IN.diffuse_tex.y*cfDiffuseMapHeight/10 ), 2 );
	OUT.color.xyz = fmod( OUT.color.x+OUT.color.y, 2 );
	OUT.color.w   = 1.0f;

	return OUT;
}

/////////////////////////////////////////////////////////////////////////////////////////

PS_OUTPUT PixelShaderWhiteAlphaTex( const PS_INPUT_WORLD_TEX IN )
{
	PS_OUTPUT OUT;

	float4	v_tex = tex2D(DIFFUSE_SAMPLER, IN.diffuse_tex);

	// check alpha
	if ( v_tex.w &gt; cfShadowMapAlphaMin )
	{
		OUT.color = ( 1.0f, 1.0f, 1.0f, 1.0f );
	}
	else
	{
		// generate texkill
		float	v_kill = -1.0f;
		clip( v_kill );
	}

	return OUT;
}

/////////////////////////////////////////////////////////////////////////////////////////

technique RenderWhite &lt;int shader = 1;&gt;
{
    pass p0
    {
		VertexShader = compile vs_1_1 VertexShaderWorld();
        PixelShader  = compile ps_3_0 PixelShaderWhite();
    }
}

/////////////////////////////////////////////////////////////////////////////////////////

technique RenderTexelDensity &lt;int shader = 1;&gt;
{
    pass p0
    {
		VertexShader = compile vs_1_1 VertexShaderWorldTex();
        PixelShader  = compile ps_3_0 PixelShaderTexelDensity();
    }
}

/////////////////////////////////////////////////////////////////////////////////////////

technique RenderWhiteAlphaTex &lt;int shader = 1;&gt;
{
    pass p0
    {
		VertexShader = compile vs_1_1 VertexShaderWorldTex();
        PixelShader  = compile ps_3_0 PixelShaderWhiteAlphaTex();
    }
}
*/
/////////////////////////////////////////////////////////////////////////////////////////
</file>
 </files>
 <tool name="FXLite">
  <defines>
   <define name="PLAT_XENON" value="" />
  </defines>
  <arguments>
   <argument name="/Zi" value="false" />
   <argument name="/Vd" value="false" />
   <argument name="/Xu0_deprecated" value="false" />
   <argument name="/Odu_deprecated" value="false" />
   <argument name="/XOd_" value="false" />
   <argument name="/XOu" value="false" />
   <argument name="/Xmaxtempreg" value="0" />
   <argument name="PsSampBase" value="0" />
   <argument name="PsSampCount" value="0" />
   <argument name="VsSampBase" value="0" />
   <argument name="VsSampCount" value="0" />
   <argument name="VsInstCount" value="0" />
   <argument name="PsInstCount" value="0" />
   <argument name="/Od" value="false" />
   <argument name="/Zpr" value="false" />
   <argument name="/Zpc" value="false" />
   <argument name="/Gpp" value="false" />
   <argument name="/Op" value="false" />
   <argument name="/Gfa" value="false" />
   <argument name="/Gfp" value="false" />
   <argument name="/XZc:zeroInit" value="false" />
   <argument name="/XVe" value="false" />
   <argument name="/Xbe:3-" value="false" />
   <argument name="/Xbe:1-" value="false" />
   <argument name="/XQInomaskedexports" value="false" />
   <argument name="/XOautoz" value="false" />
   <argument name="/XfxAv" value="false" />
   <argument name="/XfxAs" value="false" />
   <argument name="/XfxPv" value="false" />
  </arguments>
 </tool>
 <shaders>
  <shader entrypoint="PixelShaderTSMAlpha" target="ps_3_0" FxlTechniqueName="ghostcar" FxlTechnique="8" FxlPassName="p0" FxlPass="0" ZPass="0" pdbHint="4e4a0000-8ebd6876-ae72d484">
   <constanttable>
    <constant register="s0">
     <type name="DIFFUSE_SAMPLER" class="object" type="sampler2D" />
    </constant>
    <constant register="c144">
     <type name="cvShadowParams0" class="vector" type="float" columns="4" />
    </constant>
   </constanttable>
   <sourcemap>
    <statement pc="2" file="8" line="220" scope="-1" lastinstruction="0" />
    <statement pc="0.1" file="8" line="220" scope="-1" lastinstruction="0" />
    <statement pc="3" file="8" line="221" scope="-1" lastinstruction="0" />
    <statement pc="4" file="8" line="221" scope="-1" lastinstruction="0" />
    <statement pc="5" file="8" line="224" scope="-1" lastinstruction="0" />
    <statement pc="6" file="8" line="216" scope="-1" lastinstruction="0" />
   </sourcemap>
   <variables>
   </variables>
   <variableDebugInfo>
   </variableDebugInfo>
   <scopes>
   </scopes>
   <funcInfo>
    <function id="0" name="PixelShaderTSMAlpha" retID="224">
     <parameter id="223" />
    </function>
    <function id="1" name="PixelShaderTSM" retID="221">
     <parameter id="220" />
    </function>
    <function id="2" name="VertexShaderTSMAlpha" retID="217">
     <parameter id="216" />
    </function>
    <function id="3" name="VertexShaderTSM" retID="213">
     <parameter id="211" />
     <parameter id="212" />
    </function>
    <function id="4" name="PixelShaderLiSPSMAlpha" retID="205">
     <parameter id="204" />
    </function>
    <function id="5" name="PixelShaderLiSPSM" retID="202">
     <parameter id="201" />
    </function>
    <function id="6" name="VertexShaderLiSPSMAlpha" retID="198">
     <parameter id="197" />
    </function>
    <function id="7" name="VertexShaderLiSPSM" retID="194">
     <parameter id="192" />
     <parameter id="193" />
    </function>
    <function id="8" name="CalcShadowBias" retID="187">
     <parameter id="186" />
    </function>
    <function id="9" name="DoShadowCar" retID="185">
     <parameter id="182" />
     <parameter id="183" />
     <parameter id="184" />
     <parameter id="0" />
    </function>
    <function id="10" name="DoShadowOptimized" retID="177">
     <parameter id="173" />
     <parameter id="174" />
     <parameter id="175" />
     <parameter id="176" />
     <parameter id="0" />
    </function>
    <function id="11" name="DoShadow" retID="166">
     <parameter id="163" />
     <parameter id="164" />
     <parameter id="165" />
     <parameter id="0" />
    </function>
    <function id="12" name="DoShadowPCFDepth" retID="157">
     <parameter id="153" />
     <parameter id="154" />
     <parameter id="155" />
     <parameter id="156" />
    </function>
    <function id="13" name="Tex2DOffset" retID="149">
     <parameter id="146" />
     <parameter id="147" />
     <parameter id="148" />
    </function>
    <function id="14" name="GetShadowMapTexCoord" retID="144">
     <parameter id="143" />
    </function>
    <function id="15" name="VertexShadowPosView" retID="142">
     <parameter id="141" />
    </function>
    <function id="16" name="VertexShadowTexOptimized" retID="138">
     <parameter id="135" />
     <parameter id="136" />
     <parameter id="137" />
    </function>
    <function id="17" name="VertexShadowTex" retID="134">
     <parameter id="133" />
    </function>
    <function id="18" name="PixelShaderVertexColour" retID="98">
     <parameter id="97" />
    </function>
    <function id="19" name="VertexShaderVertexColour" retID="95">
     <parameter id="93" />
     <parameter id="94" />
    </function>
    <function id="20" name="ZPassVertexShader" retID="87">
     <parameter id="86" />
    </function>
    <function id="21" name="pixel_shader" retID="79">
     <parameter id="78" />
    </function>
    <function id="22" name="vertex_shader" retID="72">
     <parameter id="71" />
    </function>
    <function id="23" name="EvaluateSphericalHarmonic" retID="38">
     <parameter id="37" />
    </function>
    <function id="24" name="GetCombinedBrightness" retID="33">
     <parameter id="32" />
    </function>
    <function id="25" name="GetAdaptedLuminanceFromSampler" retID="30">
     <parameter id="29" />
    </function>
    <function id="26" name="DecodeRGBE8" retID="24">
     <parameter id="23" />
    </function>
    <function id="27" name="EncodeRGBE8" retID="19">
     <parameter id="18" />
    </function>
    <function id="28" name="DeCompressColourSpace" retID="17">
     <parameter id="16" />
    </function>
    <function id="29" name="CompressColourSpace" retID="15">
     <parameter id="14" />
    </function>
    <function id="30" name="ScaleHeadLightIntensity" retID="12">
     <parameter id="11" />
    </function>
    <function id="31" name="CalcVertexColour" retID="9">
     <parameter id="8" />
    </function>
    <function id="32" name="screen_position" retID="7">
     <parameter id="6" />
    </function>
    <function id="33" name="world_position" retID="4">
     <parameter id="3" />
    </function>
   </funcInfo>
   <funcEntryExitInfo>
   </funcEntryExitInfo>
   <VfetchInfo>
   </VfetchInfo>
   <InterpolatorInfo>
    <Interpolator Register="0" Semantic="0x50" Mask="xyzw" />
    <Interpolator Register="1" Semantic="0x51" Mask="xyzw" />
   </InterpolatorInfo>
   <LiteralFloats>
    <Float Register="252" value0="0" value1="0" value2="0" value3="0" />
    <Float Register="253" value0="0" value1="0" value2="0" value3="0" />
    <Float Register="254" value0="0" value1="0" value2="0" value3="0" />
    <Float Register="255" value0="1" value1="0" value2="0" value3="0" />
   </LiteralFloats>
   <LiteralInts>
   </LiteralInts>
   <LiteralBools>
   </LiteralBools>
  </shader>
  <shader entrypoint="VertexShaderTSMAlpha" target="vs_3_0" FxlTechniqueName="ghostcar" FxlTechnique="8" FxlPassName="p0" FxlPass="0" ZPass="0" pdbHint="4e4a0001-8ebd6876-ae72d484">
   <constanttable>
    <constant register="c20" count="4">
     <type name="cmLightWVP" class="matrix_columns" type="float" rows="4" columns="4" />
    </constant>
    <constant register="c24" count="4">
     <type name="cmWorldViewProj" class="matrix_columns" type="float" rows="4" columns="4" />
    </constant>
   </constanttable>
   <sourcemap>
    <statement pc="3" file="8" line="175" scope="-1" lastinstruction="0" />
    <statement pc="4" file="8" line="175" scope="-1" lastinstruction="0" />
    <statement pc="0.1" file="8" line="175" scope="-1" lastinstruction="0" />
    <statement pc="5" file="8" line="181" scope="-1" lastinstruction="0" />
    <statement pc="6" file="8" line="181" scope="-1" lastinstruction="0" />
    <statement pc="7" file="8" line="181" scope="-1" lastinstruction="0" />
    <statement pc="8" file="8" line="181" scope="-1" lastinstruction="0" />
    <statement pc="1.1" file="8" line="181" scope="-1" lastinstruction="0" />
    <statement pc="9" file="8" line="192" scope="-1" lastinstruction="0" />
    <statement pc="10" file="8" line="186" scope="-1" lastinstruction="0" />
    <statement pc="11" file="8" line="186" scope="-1" lastinstruction="0" />
    <statement pc="12" file="8" line="186" scope="-1" lastinstruction="0" />
    <statement pc="13" file="8" line="186" scope="-1" lastinstruction="0" />
   </sourcemap>
   <variables>
   </variables>
   <variableDebugInfo>
   </variableDebugInfo>
   <scopes>
   </scopes>
   <funcInfo>
    <function id="0" name="PixelShaderTSMAlpha" retID="224">
     <parameter id="223" />
    </function>
    <function id="1" name="PixelShaderTSM" retID="221">
     <parameter id="220" />
    </function>
    <function id="2" name="VertexShaderTSMAlpha" retID="217">
     <parameter id="216" />
    </function>
    <function id="3" name="VertexShaderTSM" retID="213">
     <parameter id="211" />
     <parameter id="212" />
    </function>
    <function id="4" name="PixelShaderLiSPSMAlpha" retID="205">
     <parameter id="204" />
    </function>
    <function id="5" name="PixelShaderLiSPSM" retID="202">
     <parameter id="201" />
    </function>
    <function id="6" name="VertexShaderLiSPSMAlpha" retID="198">
     <parameter id="197" />
    </function>
    <function id="7" name="VertexShaderLiSPSM" retID="194">
     <parameter id="192" />
     <parameter id="193" />
    </function>
    <function id="8" name="CalcShadowBias" retID="187">
     <parameter id="186" />
    </function>
    <function id="9" name="DoShadowCar" retID="185">
     <parameter id="182" />
     <parameter id="183" />
     <parameter id="184" />
     <parameter id="0" />
    </function>
    <function id="10" name="DoShadowOptimized" retID="177">
     <parameter id="173" />
     <parameter id="174" />
     <parameter id="175" />
     <parameter id="176" />
     <parameter id="0" />
    </function>
    <function id="11" name="DoShadow" retID="166">
     <parameter id="163" />
     <parameter id="164" />
     <parameter id="165" />
     <parameter id="0" />
    </function>
    <function id="12" name="DoShadowPCFDepth" retID="157">
     <parameter id="153" />
     <parameter id="154" />
     <parameter id="155" />
     <parameter id="156" />
    </function>
    <function id="13" name="Tex2DOffset" retID="149">
     <parameter id="146" />
     <parameter id="147" />
     <parameter id="148" />
    </function>
    <function id="14" name="GetShadowMapTexCoord" retID="144">
     <parameter id="143" />
    </function>
    <function id="15" name="VertexShadowPosView" retID="142">
     <parameter id="141" />
    </function>
    <function id="16" name="VertexShadowTexOptimized" retID="138">
     <parameter id="135" />
     <parameter id="136" />
     <parameter id="137" />
    </function>
    <function id="17" name="VertexShadowTex" retID="134">
     <parameter id="133" />
    </function>
    <function id="18" name="PixelShaderVertexColour" retID="98">
     <parameter id="97" />
    </function>
    <function id="19" name="VertexShaderVertexColour" retID="95">
     <parameter id="93" />
     <parameter id="94" />
    </function>
    <function id="20" name="ZPassVertexShader" retID="87">
     <parameter id="86" />
    </function>
    <function id="21" name="pixel_shader" retID="79">
     <parameter id="78" />
    </function>
    <function id="22" name="vertex_shader" retID="72">
     <parameter id="71" />
    </function>
    <function id="23" name="EvaluateSphericalHarmonic" retID="38">
     <parameter id="37" />
    </function>
    <function id="24" name="GetCombinedBrightness" retID="33">
     <parameter id="32" />
    </function>
    <function id="25" name="GetAdaptedLuminanceFromSampler" retID="30">
     <parameter id="29" />
    </function>
    <function id="26" name="DecodeRGBE8" retID="24">
     <parameter id="23" />
    </function>
    <function id="27" name="EncodeRGBE8" retID="19">
     <parameter id="18" />
    </function>
    <function id="28" name="DeCompressColourSpace" retID="17">
     <parameter id="16" />
    </function>
    <function id="29" name="CompressColourSpace" retID="15">
     <parameter id="14" />
    </function>
    <function id="30" name="ScaleHeadLightIntensity" retID="12">
     <parameter id="11" />
    </function>
    <function id="31" name="CalcVertexColour" retID="9">
     <parameter id="8" />
    </function>
    <function id="32" name="screen_position" retID="7">
     <parameter id="6" />
    </function>
    <function id="33" name="world_position" retID="4">
     <parameter id="3" />
    </function>
   </funcInfo>
   <funcEntryExitInfo>
   </funcEntryExitInfo>
   <VfetchInfo>
    <vfetch Address="3" Register="1" DestSwizzle="xyz1" Semantic="0x00" End="false" />
    <vfetch Address="4" Register="0" DestSwizzle="xy1_" Semantic="0x50" End="true" />
   </VfetchInfo>
   <InterpolatorInfo>
    <Interpolator Register="0" Semantic="0x50" Mask="xyzw" />
    <Interpolator Register="1" Semantic="0x51" Mask="xyzw" />
   </InterpolatorInfo>
   <LiteralFloats>
   </LiteralFloats>
   <LiteralInts>
   </LiteralInts>
   <LiteralBools>
   </LiteralBools>
  </shader>
  <shader entrypoint="PixelShaderTSM" target="ps_3_0" FxlTechniqueName="ZPrePass" FxlTechnique="7" FxlPassName="p0" FxlPass="0" ZPass="0" pdbHint="4e4a0002-8ebd6876-ae72d484">
   <constanttable>
   </constanttable>
   <sourcemap>
    <statement pc="1" file="8" line="203" scope="-1" lastinstruction="0" />
    <statement pc="2" file="8" line="205" scope="-1" lastinstruction="0" />
    <statement pc="3" file="8" line="203" scope="-1" lastinstruction="0" />
   </sourcemap>
   <variables>
   </variables>
   <variableDebugInfo>
   </variableDebugInfo>
   <scopes>
   </scopes>
   <funcInfo>
    <function id="0" name="PixelShaderTSMAlpha" retID="224">
     <parameter id="223" />
    </function>
    <function id="1" name="PixelShaderTSM" retID="221">
     <parameter id="220" />
    </function>
    <function id="2" name="VertexShaderTSMAlpha" retID="217">
     <parameter id="216" />
    </function>
    <function id="3" name="VertexShaderTSM" retID="213">
     <parameter id="211" />
     <parameter id="212" />
    </function>
    <function id="4" name="PixelShaderLiSPSMAlpha" retID="205">
     <parameter id="204" />
    </function>
    <function id="5" name="PixelShaderLiSPSM" retID="202">
     <parameter id="201" />
    </function>
    <function id="6" name="VertexShaderLiSPSMAlpha" retID="198">
     <parameter id="197" />
    </function>
    <function id="7" name="VertexShaderLiSPSM" retID="194">
     <parameter id="192" />
     <parameter id="193" />
    </function>
    <function id="8" name="CalcShadowBias" retID="187">
     <parameter id="186" />
    </function>
    <function id="9" name="DoShadowCar" retID="185">
     <parameter id="182" />
     <parameter id="183" />
     <parameter id="184" />
     <parameter id="0" />
    </function>
    <function id="10" name="DoShadowOptimized" retID="177">
     <parameter id="173" />
     <parameter id="174" />
     <parameter id="175" />
     <parameter id="176" />
     <parameter id="0" />
    </function>
    <function id="11" name="DoShadow" retID="166">
     <parameter id="163" />
     <parameter id="164" />
     <parameter id="165" />
     <parameter id="0" />
    </function>
    <function id="12" name="DoShadowPCFDepth" retID="157">
     <parameter id="153" />
     <parameter id="154" />
     <parameter id="155" />
     <parameter id="156" />
    </function>
    <function id="13" name="Tex2DOffset" retID="149">
     <parameter id="146" />
     <parameter id="147" />
     <parameter id="148" />
    </function>
    <function id="14" name="GetShadowMapTexCoord" retID="144">
     <parameter id="143" />
    </function>
    <function id="15" name="VertexShadowPosView" retID="142">
     <parameter id="141" />
    </function>
    <function id="16" name="VertexShadowTexOptimized" retID="138">
     <parameter id="135" />
     <parameter id="136" />
     <parameter id="137" />
    </function>
    <function id="17" name="VertexShadowTex" retID="134">
     <parameter id="133" />
    </function>
    <function id="18" name="PixelShaderVertexColour" retID="98">
     <parameter id="97" />
    </function>
    <function id="19" name="VertexShaderVertexColour" retID="95">
     <parameter id="93" />
     <parameter id="94" />
    </function>
    <function id="20" name="ZPassVertexShader" retID="87">
     <parameter id="86" />
    </function>
    <function id="21" name="pixel_shader" retID="79">
     <parameter id="78" />
    </function>
    <function id="22" name="vertex_shader" retID="72">
     <parameter id="71" />
    </function>
    <function id="23" name="EvaluateSphericalHarmonic" retID="38">
     <parameter id="37" />
    </function>
    <function id="24" name="GetCombinedBrightness" retID="33">
     <parameter id="32" />
    </function>
    <function id="25" name="GetAdaptedLuminanceFromSampler" retID="30">
     <parameter id="29" />
    </function>
    <function id="26" name="DecodeRGBE8" retID="24">
     <parameter id="23" />
    </function>
    <function id="27" name="EncodeRGBE8" retID="19">
     <parameter id="18" />
    </function>
    <function id="28" name="DeCompressColourSpace" retID="17">
     <parameter id="16" />
    </function>
    <function id="29" name="CompressColourSpace" retID="15">
     <parameter id="14" />
    </function>
    <function id="30" name="ScaleHeadLightIntensity" retID="12">
     <parameter id="11" />
    </function>
    <function id="31" name="CalcVertexColour" retID="9">
     <parameter id="8" />
    </function>
    <function id="32" name="screen_position" retID="7">
     <parameter id="6" />
    </function>
    <function id="33" name="world_position" retID="4">
     <parameter id="3" />
    </function>
   </funcInfo>
   <funcEntryExitInfo>
   </funcEntryExitInfo>
   <VfetchInfo>
   </VfetchInfo>
   <InterpolatorInfo>
    <Interpolator Register="0" Semantic="0x51" Mask="xyzw" />
   </InterpolatorInfo>
   <LiteralFloats>
    <Float Register="252" value0="0" value1="0" value2="0" value3="0" />
    <Float Register="253" value0="0" value1="0" value2="0" value3="0" />
    <Float Register="254" value0="0" value1="0" value2="0" value3="0" />
    <Float Register="255" value0="1" value1="0" value2="0" value3="0" />
   </LiteralFloats>
   <LiteralInts>
   </LiteralInts>
   <LiteralBools>
   </LiteralBools>
  </shader>
  <shader entrypoint="VertexShaderTSM" target="vs_3_0" FxlTechniqueName="ZPrePass" FxlTechnique="7" FxlPassName="p0" FxlPass="0" ZPass="0" pdbHint="4e4a0003-8ebd6876-ae72d484">
   <constanttable>
    <constant register="c20" count="4">
     <type name="cmLightWVP" class="matrix_columns" type="float" rows="4" columns="4" />
    </constant>
    <constant register="c24" count="4">
     <type name="cmWorldViewProj" class="matrix_columns" type="float" rows="4" columns="4" />
    </constant>
   </constanttable>
   <sourcemap>
    <statement pc="3" file="8" line="146" scope="-1" lastinstruction="0" />
    <statement pc="0.1" file="8" line="146" scope="-1" lastinstruction="0" />
    <statement pc="4" file="8" line="162" scope="-1" lastinstruction="0" />
    <statement pc="5" file="8" line="162" scope="-1" lastinstruction="0" />
    <statement pc="6" file="8" line="162" scope="-1" lastinstruction="0" />
    <statement pc="7" file="8" line="162" scope="-1" lastinstruction="0" />
    <statement pc="1.1" file="8" line="162" scope="-1" lastinstruction="0" />
    <statement pc="8" file="8" line="164" scope="-1" lastinstruction="0" />
    <statement pc="9" file="8" line="164" scope="-1" lastinstruction="0" />
    <statement pc="10" file="8" line="164" scope="-1" lastinstruction="0" />
    <statement pc="11" file="8" line="164" scope="-1" lastinstruction="0" />
   </sourcemap>
   <variables>
   </variables>
   <variableDebugInfo>
   </variableDebugInfo>
   <scopes>
   </scopes>
   <funcInfo>
    <function id="0" name="PixelShaderTSMAlpha" retID="224">
     <parameter id="223" />
    </function>
    <function id="1" name="PixelShaderTSM" retID="221">
     <parameter id="220" />
    </function>
    <function id="2" name="VertexShaderTSMAlpha" retID="217">
     <parameter id="216" />
    </function>
    <function id="3" name="VertexShaderTSM" retID="213">
     <parameter id="211" />
     <parameter id="212" />
    </function>
    <function id="4" name="PixelShaderLiSPSMAlpha" retID="205">
     <parameter id="204" />
    </function>
    <function id="5" name="PixelShaderLiSPSM" retID="202">
     <parameter id="201" />
    </function>
    <function id="6" name="VertexShaderLiSPSMAlpha" retID="198">
     <parameter id="197" />
    </function>
    <function id="7" name="VertexShaderLiSPSM" retID="194">
     <parameter id="192" />
     <parameter id="193" />
    </function>
    <function id="8" name="CalcShadowBias" retID="187">
     <parameter id="186" />
    </function>
    <function id="9" name="DoShadowCar" retID="185">
     <parameter id="182" />
     <parameter id="183" />
     <parameter id="184" />
     <parameter id="0" />
    </function>
    <function id="10" name="DoShadowOptimized" retID="177">
     <parameter id="173" />
     <parameter id="174" />
     <parameter id="175" />
     <parameter id="176" />
     <parameter id="0" />
    </function>
    <function id="11" name="DoShadow" retID="166">
     <parameter id="163" />
     <parameter id="164" />
     <parameter id="165" />
     <parameter id="0" />
    </function>
    <function id="12" name="DoShadowPCFDepth" retID="157">
     <parameter id="153" />
     <parameter id="154" />
     <parameter id="155" />
     <parameter id="156" />
    </function>
    <function id="13" name="Tex2DOffset" retID="149">
     <parameter id="146" />
     <parameter id="147" />
     <parameter id="148" />
    </function>
    <function id="14" name="GetShadowMapTexCoord" retID="144">
     <parameter id="143" />
    </function>
    <function id="15" name="VertexShadowPosView" retID="142">
     <parameter id="141" />
    </function>
    <function id="16" name="VertexShadowTexOptimized" retID="138">
     <parameter id="135" />
     <parameter id="136" />
     <parameter id="137" />
    </function>
    <function id="17" name="VertexShadowTex" retID="134">
     <parameter id="133" />
    </function>
    <function id="18" name="PixelShaderVertexColour" retID="98">
     <parameter id="97" />
    </function>
    <function id="19" name="VertexShaderVertexColour" retID="95">
     <parameter id="93" />
     <parameter id="94" />
    </function>
    <function id="20" name="ZPassVertexShader" retID="87">
     <parameter id="86" />
    </function>
    <function id="21" name="pixel_shader" retID="79">
     <parameter id="78" />
    </function>
    <function id="22" name="vertex_shader" retID="72">
     <parameter id="71" />
    </function>
    <function id="23" name="EvaluateSphericalHarmonic" retID="38">
     <parameter id="37" />
    </function>
    <function id="24" name="GetCombinedBrightness" retID="33">
     <parameter id="32" />
    </function>
    <function id="25" name="GetAdaptedLuminanceFromSampler" retID="30">
     <parameter id="29" />
    </function>
    <function id="26" name="DecodeRGBE8" retID="24">
     <parameter id="23" />
    </function>
    <function id="27" name="EncodeRGBE8" retID="19">
     <parameter id="18" />
    </function>
    <function id="28" name="DeCompressColourSpace" retID="17">
     <parameter id="16" />
    </function>
    <function id="29" name="CompressColourSpace" retID="15">
     <parameter id="14" />
    </function>
    <function id="30" name="ScaleHeadLightIntensity" retID="12">
     <parameter id="11" />
    </function>
    <function id="31" name="CalcVertexColour" retID="9">
     <parameter id="8" />
    </function>
    <function id="32" name="screen_position" retID="7">
     <parameter id="6" />
    </function>
    <function id="33" name="world_position" retID="4">
     <parameter id="3" />
    </function>
   </funcInfo>
   <funcEntryExitInfo>
   </funcEntryExitInfo>
   <VfetchInfo>
    <vfetch Address="3" Register="0" DestSwizzle="xyz1" Semantic="0x00" End="false" />
   </VfetchInfo>
   <InterpolatorInfo>
    <Interpolator Register="0" Semantic="0x51" Mask="xyzw" />
   </InterpolatorInfo>
   <LiteralFloats>
   </LiteralFloats>
   <LiteralInts>
   </LiteralInts>
   <LiteralBools>
   </LiteralBools>
  </shader>
  <shader entrypoint="PixelShaderTSM" target="ps_3_0" FxlTechniqueName="RenderVertexColour" FxlTechnique="6" FxlPassName="p0" FxlPass="0" ZPass="0" pdbHint="4e4a0004-8ebd6876-ae72d484">
   <constanttable>
   </constanttable>
   <sourcemap>
    <statement pc="1" file="8" line="203" scope="-1" lastinstruction="0" />
    <statement pc="2" file="8" line="205" scope="-1" lastinstruction="0" />
    <statement pc="3" file="8" line="203" scope="-1" lastinstruction="0" />
   </sourcemap>
   <variables>
   </variables>
   <variableDebugInfo>
   </variableDebugInfo>
   <scopes>
   </scopes>
   <funcInfo>
    <function id="0" name="PixelShaderTSMAlpha" retID="224">
     <parameter id="223" />
    </function>
    <function id="1" name="PixelShaderTSM" retID="221">
     <parameter id="220" />
    </function>
    <function id="2" name="VertexShaderTSMAlpha" retID="217">
     <parameter id="216" />
    </function>
    <function id="3" name="VertexShaderTSM" retID="213">
     <parameter id="211" />
     <parameter id="212" />
    </function>
    <function id="4" name="PixelShaderLiSPSMAlpha" retID="205">
     <parameter id="204" />
    </function>
    <function id="5" name="PixelShaderLiSPSM" retID="202">
     <parameter id="201" />
    </function>
    <function id="6" name="VertexShaderLiSPSMAlpha" retID="198">
     <parameter id="197" />
    </function>
    <function id="7" name="VertexShaderLiSPSM" retID="194">
     <parameter id="192" />
     <parameter id="193" />
    </function>
    <function id="8" name="CalcShadowBias" retID="187">
     <parameter id="186" />
    </function>
    <function id="9" name="DoShadowCar" retID="185">
     <parameter id="182" />
     <parameter id="183" />
     <parameter id="184" />
     <parameter id="0" />
    </function>
    <function id="10" name="DoShadowOptimized" retID="177">
     <parameter id="173" />
     <parameter id="174" />
     <parameter id="175" />
     <parameter id="176" />
     <parameter id="0" />
    </function>
    <function id="11" name="DoShadow" retID="166">
     <parameter id="163" />
     <parameter id="164" />
     <parameter id="165" />
     <parameter id="0" />
    </function>
    <function id="12" name="DoShadowPCFDepth" retID="157">
     <parameter id="153" />
     <parameter id="154" />
     <parameter id="155" />
     <parameter id="156" />
    </function>
    <function id="13" name="Tex2DOffset" retID="149">
     <parameter id="146" />
     <parameter id="147" />
     <parameter id="148" />
    </function>
    <function id="14" name="GetShadowMapTexCoord" retID="144">
     <parameter id="143" />
    </function>
    <function id="15" name="VertexShadowPosView" retID="142">
     <parameter id="141" />
    </function>
    <function id="16" name="VertexShadowTexOptimized" retID="138">
     <parameter id="135" />
     <parameter id="136" />
     <parameter id="137" />
    </function>
    <function id="17" name="VertexShadowTex" retID="134">
     <parameter id="133" />
    </function>
    <function id="18" name="PixelShaderVertexColour" retID="98">
     <parameter id="97" />
    </function>
    <function id="19" name="VertexShaderVertexColour" retID="95">
     <parameter id="93" />
     <parameter id="94" />
    </function>
    <function id="20" name="ZPassVertexShader" retID="87">
     <parameter id="86" />
    </function>
    <function id="21" name="pixel_shader" retID="79">
     <parameter id="78" />
    </function>
    <function id="22" name="vertex_shader" retID="72">
     <parameter id="71" />
    </function>
    <function id="23" name="EvaluateSphericalHarmonic" retID="38">
     <parameter id="37" />
    </function>
    <function id="24" name="GetCombinedBrightness" retID="33">
     <parameter id="32" />
    </function>
    <function id="25" name="GetAdaptedLuminanceFromSampler" retID="30">
     <parameter id="29" />
    </function>
    <function id="26" name="DecodeRGBE8" retID="24">
     <parameter id="23" />
    </function>
    <function id="27" name="EncodeRGBE8" retID="19">
     <parameter id="18" />
    </function>
    <function id="28" name="DeCompressColourSpace" retID="17">
     <parameter id="16" />
    </function>
    <function id="29" name="CompressColourSpace" retID="15">
     <parameter id="14" />
    </function>
    <function id="30" name="ScaleHeadLightIntensity" retID="12">
     <parameter id="11" />
    </function>
    <function id="31" name="CalcVertexColour" retID="9">
     <parameter id="8" />
    </function>
    <function id="32" name="screen_position" retID="7">
     <parameter id="6" />
    </function>
    <function id="33" name="world_position" retID="4">
     <parameter id="3" />
    </function>
   </funcInfo>
   <funcEntryExitInfo>
   </funcEntryExitInfo>
   <VfetchInfo>
   </VfetchInfo>
   <InterpolatorInfo>
    <Interpolator Register="0" Semantic="0x51" Mask="xyzw" />
   </InterpolatorInfo>
   <LiteralFloats>
    <Float Register="252" value0="0" value1="0" value2="0" value3="0" />
    <Float Register="253" value0="0" value1="0" value2="0" value3="0" />
    <Float Register="254" value0="0" value1="0" value2="0" value3="0" />
    <Float Register="255" value0="1" value1="0" value2="0" value3="0" />
   </LiteralFloats>
   <LiteralInts>
   </LiteralInts>
   <LiteralBools>
   </LiteralBools>
  </shader>
  <shader entrypoint="VertexShaderTSM" target="vs_3_0" FxlTechniqueName="RenderVertexColour" FxlTechnique="6" FxlPassName="p0" FxlPass="0" ZPass="0" pdbHint="4e4a0005-8ebd6876-ae72d484">
   <constanttable>
    <constant register="c20" count="4">
     <type name="cmLightWVP" class="matrix_columns" type="float" rows="4" columns="4" />
    </constant>
    <constant register="c24" count="4">
     <type name="cmWorldViewProj" class="matrix_columns" type="float" rows="4" columns="4" />
    </constant>
   </constanttable>
   <sourcemap>
    <statement pc="3" file="8" line="146" scope="-1" lastinstruction="0" />
    <statement pc="0.1" file="8" line="146" scope="-1" lastinstruction="0" />
    <statement pc="4" file="8" line="162" scope="-1" lastinstruction="0" />
    <statement pc="5" file="8" line="162" scope="-1" lastinstruction="0" />
    <statement pc="6" file="8" line="162" scope="-1" lastinstruction="0" />
    <statement pc="7" file="8" line="162" scope="-1" lastinstruction="0" />
    <statement pc="1.1" file="8" line="162" scope="-1" lastinstruction="0" />
    <statement pc="8" file="8" line="164" scope="-1" lastinstruction="0" />
    <statement pc="9" file="8" line="164" scope="-1" lastinstruction="0" />
    <statement pc="10" file="8" line="164" scope="-1" lastinstruction="0" />
    <statement pc="11" file="8" line="164" scope="-1" lastinstruction="0" />
   </sourcemap>
   <variables>
   </variables>
   <variableDebugInfo>
   </variableDebugInfo>
   <scopes>
   </scopes>
   <funcInfo>
    <function id="0" name="PixelShaderTSMAlpha" retID="224">
     <parameter id="223" />
    </function>
    <function id="1" name="PixelShaderTSM" retID="221">
     <parameter id="220" />
    </function>
    <function id="2" name="VertexShaderTSMAlpha" retID="217">
     <parameter id="216" />
    </function>
    <function id="3" name="VertexShaderTSM" retID="213">
     <parameter id="211" />
     <parameter id="212" />
    </function>
    <function id="4" name="PixelShaderLiSPSMAlpha" retID="205">
     <parameter id="204" />
    </function>
    <function id="5" name="PixelShaderLiSPSM" retID="202">
     <parameter id="201" />
    </function>
    <function id="6" name="VertexShaderLiSPSMAlpha" retID="198">
     <parameter id="197" />
    </function>
    <function id="7" name="VertexShaderLiSPSM" retID="194">
     <parameter id="192" />
     <parameter id="193" />
    </function>
    <function id="8" name="CalcShadowBias" retID="187">
     <parameter id="186" />
    </function>
    <function id="9" name="DoShadowCar" retID="185">
     <parameter id="182" />
     <parameter id="183" />
     <parameter id="184" />
     <parameter id="0" />
    </function>
    <function id="10" name="DoShadowOptimized" retID="177">
     <parameter id="173" />
     <parameter id="174" />
     <parameter id="175" />
     <parameter id="176" />
     <parameter id="0" />
    </function>
    <function id="11" name="DoShadow" retID="166">
     <parameter id="163" />
     <parameter id="164" />
     <parameter id="165" />
     <parameter id="0" />
    </function>
    <function id="12" name="DoShadowPCFDepth" retID="157">
     <parameter id="153" />
     <parameter id="154" />
     <parameter id="155" />
     <parameter id="156" />
    </function>
    <function id="13" name="Tex2DOffset" retID="149">
     <parameter id="146" />
     <parameter id="147" />
     <parameter id="148" />
    </function>
    <function id="14" name="GetShadowMapTexCoord" retID="144">
     <parameter id="143" />
    </function>
    <function id="15" name="VertexShadowPosView" retID="142">
     <parameter id="141" />
    </function>
    <function id="16" name="VertexShadowTexOptimized" retID="138">
     <parameter id="135" />
     <parameter id="136" />
     <parameter id="137" />
    </function>
    <function id="17" name="VertexShadowTex" retID="134">
     <parameter id="133" />
    </function>
    <function id="18" name="PixelShaderVertexColour" retID="98">
     <parameter id="97" />
    </function>
    <function id="19" name="VertexShaderVertexColour" retID="95">
     <parameter id="93" />
     <parameter id="94" />
    </function>
    <function id="20" name="ZPassVertexShader" retID="87">
     <parameter id="86" />
    </function>
    <function id="21" name="pixel_shader" retID="79">
     <parameter id="78" />
    </function>
    <function id="22" name="vertex_shader" retID="72">
     <parameter id="71" />
    </function>
    <function id="23" name="EvaluateSphericalHarmonic" retID="38">
     <parameter id="37" />
    </function>
    <function id="24" name="GetCombinedBrightness" retID="33">
     <parameter id="32" />
    </function>
    <function id="25" name="GetAdaptedLuminanceFromSampler" retID="30">
     <parameter id="29" />
    </function>
    <function id="26" name="DecodeRGBE8" retID="24">
     <parameter id="23" />
    </function>
    <function id="27" name="EncodeRGBE8" retID="19">
     <parameter id="18" />
    </function>
    <function id="28" name="DeCompressColourSpace" retID="17">
     <parameter id="16" />
    </function>
    <function id="29" name="CompressColourSpace" retID="15">
     <parameter id="14" />
    </function>
    <function id="30" name="ScaleHeadLightIntensity" retID="12">
     <parameter id="11" />
    </function>
    <function id="31" name="CalcVertexColour" retID="9">
     <parameter id="8" />
    </function>
    <function id="32" name="screen_position" retID="7">
     <parameter id="6" />
    </function>
    <function id="33" name="world_position" retID="4">
     <parameter id="3" />
    </function>
   </funcInfo>
   <funcEntryExitInfo>
   </funcEntryExitInfo>
   <VfetchInfo>
    <vfetch Address="3" Register="0" DestSwizzle="xyz1" Semantic="0x00" End="false" />
   </VfetchInfo>
   <InterpolatorInfo>
    <Interpolator Register="0" Semantic="0x51" Mask="xyzw" />
   </InterpolatorInfo>
   <LiteralFloats>
   </LiteralFloats>
   <LiteralInts>
   </LiteralInts>
   <LiteralBools>
   </LiteralBools>
  </shader>
  <shader entrypoint="PixelShaderLiSPSMAlpha" target="ps_3_0" FxlTechniqueName="RenderLiSPSM" FxlTechnique="5" FxlPassName="p0" FxlPass="0" ZPass="0" pdbHint="4e4a0006-8ebd6876-ae72d484">
   <constanttable>
    <constant register="s0">
     <type name="DIFFUSE_SAMPLER" class="object" type="sampler2D" />
    </constant>
    <constant register="c144">
     <type name="cvShadowParams0" class="vector" type="float" columns="4" />
    </constant>
   </constanttable>
   <sourcemap>
    <statement pc="2" file="8" line="104" scope="-1" lastinstruction="0" />
    <statement pc="0.1" file="8" line="104" scope="-1" lastinstruction="0" />
    <statement pc="3" file="8" line="106" scope="-1" lastinstruction="0" />
    <statement pc="4" file="8" line="106" scope="-1" lastinstruction="0" />
    <statement pc="5" file="8" line="108" scope="-1" lastinstruction="0" />
   </sourcemap>
   <variables>
   </variables>
   <variableDebugInfo>
   </variableDebugInfo>
   <scopes>
   </scopes>
   <funcInfo>
    <function id="0" name="PixelShaderTSMAlpha" retID="224">
     <parameter id="223" />
    </function>
    <function id="1" name="PixelShaderTSM" retID="221">
     <parameter id="220" />
    </function>
    <function id="2" name="VertexShaderTSMAlpha" retID="217">
     <parameter id="216" />
    </function>
    <function id="3" name="VertexShaderTSM" retID="213">
     <parameter id="211" />
     <parameter id="212" />
    </function>
    <function id="4" name="PixelShaderLiSPSMAlpha" retID="205">
     <parameter id="204" />
    </function>
    <function id="5" name="PixelShaderLiSPSM" retID="202">
     <parameter id="201" />
    </function>
    <function id="6" name="VertexShaderLiSPSMAlpha" retID="198">
     <parameter id="197" />
    </function>
    <function id="7" name="VertexShaderLiSPSM" retID="194">
     <parameter id="192" />
     <parameter id="193" />
    </function>
    <function id="8" name="CalcShadowBias" retID="187">
     <parameter id="186" />
    </function>
    <function id="9" name="DoShadowCar" retID="185">
     <parameter id="182" />
     <parameter id="183" />
     <parameter id="184" />
     <parameter id="0" />
    </function>
    <function id="10" name="DoShadowOptimized" retID="177">
     <parameter id="173" />
     <parameter id="174" />
     <parameter id="175" />
     <parameter id="176" />
     <parameter id="0" />
    </function>
    <function id="11" name="DoShadow" retID="166">
     <parameter id="163" />
     <parameter id="164" />
     <parameter id="165" />
     <parameter id="0" />
    </function>
    <function id="12" name="DoShadowPCFDepth" retID="157">
     <parameter id="153" />
     <parameter id="154" />
     <parameter id="155" />
     <parameter id="156" />
    </function>
    <function id="13" name="Tex2DOffset" retID="149">
     <parameter id="146" />
     <parameter id="147" />
     <parameter id="148" />
    </function>
    <function id="14" name="GetShadowMapTexCoord" retID="144">
     <parameter id="143" />
    </function>
    <function id="15" name="VertexShadowPosView" retID="142">
     <parameter id="141" />
    </function>
    <function id="16" name="VertexShadowTexOptimized" retID="138">
     <parameter id="135" />
     <parameter id="136" />
     <parameter id="137" />
    </function>
    <function id="17" name="VertexShadowTex" retID="134">
     <parameter id="133" />
    </function>
    <function id="18" name="PixelShaderVertexColour" retID="98">
     <parameter id="97" />
    </function>
    <function id="19" name="VertexShaderVertexColour" retID="95">
     <parameter id="93" />
     <parameter id="94" />
    </function>
    <function id="20" name="ZPassVertexShader" retID="87">
     <parameter id="86" />
    </function>
    <function id="21" name="pixel_shader" retID="79">
     <parameter id="78" />
    </function>
    <function id="22" name="vertex_shader" retID="72">
     <parameter id="71" />
    </function>
    <function id="23" name="EvaluateSphericalHarmonic" retID="38">
     <parameter id="37" />
    </function>
    <function id="24" name="GetCombinedBrightness" retID="33">
     <parameter id="32" />
    </function>
    <function id="25" name="GetAdaptedLuminanceFromSampler" retID="30">
     <parameter id="29" />
    </function>
    <function id="26" name="DecodeRGBE8" retID="24">
     <parameter id="23" />
    </function>
    <function id="27" name="EncodeRGBE8" retID="19">
     <parameter id="18" />
    </function>
    <function id="28" name="DeCompressColourSpace" retID="17">
     <parameter id="16" />
    </function>
    <function id="29" name="CompressColourSpace" retID="15">
     <parameter id="14" />
    </function>
    <function id="30" name="ScaleHeadLightIntensity" retID="12">
     <parameter id="11" />
    </function>
    <function id="31" name="CalcVertexColour" retID="9">
     <parameter id="8" />
    </function>
    <function id="32" name="screen_position" retID="7">
     <parameter id="6" />
    </function>
    <function id="33" name="world_position" retID="4">
     <parameter id="3" />
    </function>
   </funcInfo>
   <funcEntryExitInfo>
   </funcEntryExitInfo>
   <VfetchInfo>
   </VfetchInfo>
   <InterpolatorInfo>
    <Interpolator Register="0" Semantic="0x50" Mask="xyzw" />
   </InterpolatorInfo>
   <LiteralFloats>
    <Float Register="252" value0="0" value1="0" value2="0" value3="0" />
    <Float Register="253" value0="0" value1="0" value2="0" value3="0" />
    <Float Register="254" value0="0" value1="0" value2="0" value3="0" />
    <Float Register="255" value0="0" value1="0" value2="0" value3="0" />
   </LiteralFloats>
   <LiteralInts>
   </LiteralInts>
   <LiteralBools>
   </LiteralBools>
  </shader>
  <shader entrypoint="VertexShaderLiSPSMAlpha" target="vs_3_0" FxlTechniqueName="RenderLiSPSM" FxlTechnique="5" FxlPassName="p0" FxlPass="0" ZPass="0" pdbHint="4e4a0007-8ebd6876-ae72d484">
   <constanttable>
    <constant register="c24" count="4">
     <type name="cmWorldViewProj" class="matrix_columns" type="float" rows="4" columns="4" />
    </constant>
   </constanttable>
   <sourcemap>
    <statement pc="3" file="8" line="65" scope="-1" lastinstruction="0" />
    <statement pc="4" file="8" line="65" scope="-1" lastinstruction="0" />
    <statement pc="0.1" file="8" line="65" scope="-1" lastinstruction="0" />
    <statement pc="5" file="8" line="71" scope="-1" lastinstruction="0" />
    <statement pc="6" file="8" line="71" scope="-1" lastinstruction="0" />
    <statement pc="7" file="8" line="71" scope="-1" lastinstruction="0" />
    <statement pc="8" file="8" line="71" scope="-1" lastinstruction="0" />
    <statement pc="1.1" file="8" line="71" scope="-1" lastinstruction="0" />
    <statement pc="9" file="8" line="78" scope="-1" lastinstruction="0" />
   </sourcemap>
   <variables>
   </variables>
   <variableDebugInfo>
   </variableDebugInfo>
   <scopes>
   </scopes>
   <funcInfo>
    <function id="0" name="PixelShaderTSMAlpha" retID="224">
     <parameter id="223" />
    </function>
    <function id="1" name="PixelShaderTSM" retID="221">
     <parameter id="220" />
    </function>
    <function id="2" name="VertexShaderTSMAlpha" retID="217">
     <parameter id="216" />
    </function>
    <function id="3" name="VertexShaderTSM" retID="213">
     <parameter id="211" />
     <parameter id="212" />
    </function>
    <function id="4" name="PixelShaderLiSPSMAlpha" retID="205">
     <parameter id="204" />
    </function>
    <function id="5" name="PixelShaderLiSPSM" retID="202">
     <parameter id="201" />
    </function>
    <function id="6" name="VertexShaderLiSPSMAlpha" retID="198">
     <parameter id="197" />
    </function>
    <function id="7" name="VertexShaderLiSPSM" retID="194">
     <parameter id="192" />
     <parameter id="193" />
    </function>
    <function id="8" name="CalcShadowBias" retID="187">
     <parameter id="186" />
    </function>
    <function id="9" name="DoShadowCar" retID="185">
     <parameter id="182" />
     <parameter id="183" />
     <parameter id="184" />
     <parameter id="0" />
    </function>
    <function id="10" name="DoShadowOptimized" retID="177">
     <parameter id="173" />
     <parameter id="174" />
     <parameter id="175" />
     <parameter id="176" />
     <parameter id="0" />
    </function>
    <function id="11" name="DoShadow" retID="166">
     <parameter id="163" />
     <parameter id="164" />
     <parameter id="165" />
     <parameter id="0" />
    </function>
    <function id="12" name="DoShadowPCFDepth" retID="157">
     <parameter id="153" />
     <parameter id="154" />
     <parameter id="155" />
     <parameter id="156" />
    </function>
    <function id="13" name="Tex2DOffset" retID="149">
     <parameter id="146" />
     <parameter id="147" />
     <parameter id="148" />
    </function>
    <function id="14" name="GetShadowMapTexCoord" retID="144">
     <parameter id="143" />
    </function>
    <function id="15" name="VertexShadowPosView" retID="142">
     <parameter id="141" />
    </function>
    <function id="16" name="VertexShadowTexOptimized" retID="138">
     <parameter id="135" />
     <parameter id="136" />
     <parameter id="137" />
    </function>
    <function id="17" name="VertexShadowTex" retID="134">
     <parameter id="133" />
    </function>
    <function id="18" name="PixelShaderVertexColour" retID="98">
     <parameter id="97" />
    </function>
    <function id="19" name="VertexShaderVertexColour" retID="95">
     <parameter id="93" />
     <parameter id="94" />
    </function>
    <function id="20" name="ZPassVertexShader" retID="87">
     <parameter id="86" />
    </function>
    <function id="21" name="pixel_shader" retID="79">
     <parameter id="78" />
    </function>
    <function id="22" name="vertex_shader" retID="72">
     <parameter id="71" />
    </function>
    <function id="23" name="EvaluateSphericalHarmonic" retID="38">
     <parameter id="37" />
    </function>
    <function id="24" name="GetCombinedBrightness" retID="33">
     <parameter id="32" />
    </function>
    <function id="25" name="GetAdaptedLuminanceFromSampler" retID="30">
     <parameter id="29" />
    </function>
    <function id="26" name="DecodeRGBE8" retID="24">
     <parameter id="23" />
    </function>
    <function id="27" name="EncodeRGBE8" retID="19">
     <parameter id="18" />
    </function>
    <function id="28" name="DeCompressColourSpace" retID="17">
     <parameter id="16" />
    </function>
    <function id="29" name="CompressColourSpace" retID="15">
     <parameter id="14" />
    </function>
    <function id="30" name="ScaleHeadLightIntensity" retID="12">
     <parameter id="11" />
    </function>
    <function id="31" name="CalcVertexColour" retID="9">
     <parameter id="8" />
    </function>
    <function id="32" name="screen_position" retID="7">
     <parameter id="6" />
    </function>
    <function id="33" name="world_position" retID="4">
     <parameter id="3" />
    </function>
   </funcInfo>
   <funcEntryExitInfo>
   </funcEntryExitInfo>
   <VfetchInfo>
    <vfetch Address="3" Register="1" DestSwizzle="xyz1" Semantic="0x00" End="false" />
    <vfetch Address="4" Register="0" DestSwizzle="xy1_" Semantic="0x50" End="true" />
   </VfetchInfo>
   <InterpolatorInfo>
    <Interpolator Register="0" Semantic="0x50" Mask="xyzw" />
   </InterpolatorInfo>
   <LiteralFloats>
   </LiteralFloats>
   <LiteralInts>
   </LiteralInts>
   <LiteralBools>
   </LiteralBools>
  </shader>
  <shader entrypoint="VertexShaderLiSPSM" target="vs_3_0" FxlTechniqueName="RenderLiSPSMMatrixPalette" FxlTechnique="4" FxlPassName="p0" FxlPass="0" ZPass="0" pdbHint="4e4a0008-8ebd6876-ae72d484">
   <constanttable>
    <constant register="c24" count="4">
     <type name="cmWorldViewProj" class="matrix_columns" type="float" rows="4" columns="4" />
    </constant>
   </constanttable>
   <sourcemap>
    <statement pc="3" file="8" line="34" scope="-1" lastinstruction="0" />
    <statement pc="0.1" file="8" line="34" scope="-1" lastinstruction="0" />
    <statement pc="4" file="8" line="56" scope="-1" lastinstruction="0" />
    <statement pc="5" file="8" line="56" scope="-1" lastinstruction="0" />
    <statement pc="6" file="8" line="56" scope="-1" lastinstruction="0" />
    <statement pc="7" file="8" line="56" scope="-1" lastinstruction="0" />
    <statement pc="1.1" file="8" line="56" scope="-1" lastinstruction="0" />
    <statement pc="2.0" file="8" line="60" scope="-1" lastinstruction="0" />
   </sourcemap>
   <variables>
   </variables>
   <variableDebugInfo>
   </variableDebugInfo>
   <scopes>
   </scopes>
   <funcInfo>
    <function id="0" name="PixelShaderTSMAlpha" retID="224">
     <parameter id="223" />
    </function>
    <function id="1" name="PixelShaderTSM" retID="221">
     <parameter id="220" />
    </function>
    <function id="2" name="VertexShaderTSMAlpha" retID="217">
     <parameter id="216" />
    </function>
    <function id="3" name="VertexShaderTSM" retID="213">
     <parameter id="211" />
     <parameter id="212" />
    </function>
    <function id="4" name="PixelShaderLiSPSMAlpha" retID="205">
     <parameter id="204" />
    </function>
    <function id="5" name="PixelShaderLiSPSM" retID="202">
     <parameter id="201" />
    </function>
    <function id="6" name="VertexShaderLiSPSMAlpha" retID="198">
     <parameter id="197" />
    </function>
    <function id="7" name="VertexShaderLiSPSM" retID="194">
     <parameter id="192" />
     <parameter id="193" />
    </function>
    <function id="8" name="CalcShadowBias" retID="187">
     <parameter id="186" />
    </function>
    <function id="9" name="DoShadowCar" retID="185">
     <parameter id="182" />
     <parameter id="183" />
     <parameter id="184" />
     <parameter id="0" />
    </function>
    <function id="10" name="DoShadowOptimized" retID="177">
     <parameter id="173" />
     <parameter id="174" />
     <parameter id="175" />
     <parameter id="176" />
     <parameter id="0" />
    </function>
    <function id="11" name="DoShadow" retID="166">
     <parameter id="163" />
     <parameter id="164" />
     <parameter id="165" />
     <parameter id="0" />
    </function>
    <function id="12" name="DoShadowPCFDepth" retID="157">
     <parameter id="153" />
     <parameter id="154" />
     <parameter id="155" />
     <parameter id="156" />
    </function>
    <function id="13" name="Tex2DOffset" retID="149">
     <parameter id="146" />
     <parameter id="147" />
     <parameter id="148" />
    </function>
    <function id="14" name="GetShadowMapTexCoord" retID="144">
     <parameter id="143" />
    </function>
    <function id="15" name="VertexShadowPosView" retID="142">
     <parameter id="141" />
    </function>
    <function id="16" name="VertexShadowTexOptimized" retID="138">
     <parameter id="135" />
     <parameter id="136" />
     <parameter id="137" />
    </function>
    <function id="17" name="VertexShadowTex" retID="134">
     <parameter id="133" />
    </function>
    <function id="18" name="PixelShaderVertexColour" retID="98">
     <parameter id="97" />
    </function>
    <function id="19" name="VertexShaderVertexColour" retID="95">
     <parameter id="93" />
     <parameter id="94" />
    </function>
    <function id="20" name="ZPassVertexShader" retID="87">
     <parameter id="86" />
    </function>
    <function id="21" name="pixel_shader" retID="79">
     <parameter id="78" />
    </function>
    <function id="22" name="vertex_shader" retID="72">
     <parameter id="71" />
    </function>
    <function id="23" name="EvaluateSphericalHarmonic" retID="38">
     <parameter id="37" />
    </function>
    <function id="24" name="GetCombinedBrightness" retID="33">
     <parameter id="32" />
    </function>
    <function id="25" name="GetAdaptedLuminanceFromSampler" retID="30">
     <parameter id="29" />
    </function>
    <function id="26" name="DecodeRGBE8" retID="24">
     <parameter id="23" />
    </function>
    <function id="27" name="EncodeRGBE8" retID="19">
     <parameter id="18" />
    </function>
    <function id="28" name="DeCompressColourSpace" retID="17">
     <parameter id="16" />
    </function>
    <function id="29" name="CompressColourSpace" retID="15">
     <parameter id="14" />
    </function>
    <function id="30" name="ScaleHeadLightIntensity" retID="12">
     <parameter id="11" />
    </function>
    <function id="31" name="CalcVertexColour" retID="9">
     <parameter id="8" />
    </function>
    <function id="32" name="screen_position" retID="7">
     <parameter id="6" />
    </function>
    <function id="33" name="world_position" retID="4">
     <parameter id="3" />
    </function>
   </funcInfo>
   <funcEntryExitInfo>
   </funcEntryExitInfo>
   <VfetchInfo>
    <vfetch Address="3" Register="0" DestSwizzle="xyz1" Semantic="0x00" End="false" />
   </VfetchInfo>
   <InterpolatorInfo>
   </InterpolatorInfo>
   <LiteralFloats>
   </LiteralFloats>
   <LiteralInts>
   </LiteralInts>
   <LiteralBools>
   </LiteralBools>
  </shader>
  <shader entrypoint="VertexShaderLiSPSM" target="vs_3_0" FxlTechniqueName="RenderLiSPSMAlphaTex" FxlTechnique="3" FxlPassName="p0" FxlPass="0" ZPass="0" pdbHint="4e4a0009-8ebd6876-ae72d484">
   <constanttable>
    <constant register="c24" count="4">
     <type name="cmWorldViewProj" class="matrix_columns" type="float" rows="4" columns="4" />
    </constant>
   </constanttable>
   <sourcemap>
    <statement pc="3" file="8" line="34" scope="-1" lastinstruction="0" />
    <statement pc="0.1" file="8" line="34" scope="-1" lastinstruction="0" />
    <statement pc="4" file="8" line="56" scope="-1" lastinstruction="0" />
    <statement pc="5" file="8" line="56" scope="-1" lastinstruction="0" />
    <statement pc="6" file="8" line="56" scope="-1" lastinstruction="0" />
    <statement pc="7" file="8" line="56" scope="-1" lastinstruction="0" />
    <statement pc="1.1" file="8" line="56" scope="-1" lastinstruction="0" />
    <statement pc="2.0" file="8" line="60" scope="-1" lastinstruction="0" />
   </sourcemap>
   <variables>
   </variables>
   <variableDebugInfo>
   </variableDebugInfo>
   <scopes>
   </scopes>
   <funcInfo>
    <function id="0" name="PixelShaderTSMAlpha" retID="224">
     <parameter id="223" />
    </function>
    <function id="1" name="PixelShaderTSM" retID="221">
     <parameter id="220" />
    </function>
    <function id="2" name="VertexShaderTSMAlpha" retID="217">
     <parameter id="216" />
    </function>
    <function id="3" name="VertexShaderTSM" retID="213">
     <parameter id="211" />
     <parameter id="212" />
    </function>
    <function id="4" name="PixelShaderLiSPSMAlpha" retID="205">
     <parameter id="204" />
    </function>
    <function id="5" name="PixelShaderLiSPSM" retID="202">
     <parameter id="201" />
    </function>
    <function id="6" name="VertexShaderLiSPSMAlpha" retID="198">
     <parameter id="197" />
    </function>
    <function id="7" name="VertexShaderLiSPSM" retID="194">
     <parameter id="192" />
     <parameter id="193" />
    </function>
    <function id="8" name="CalcShadowBias" retID="187">
     <parameter id="186" />
    </function>
    <function id="9" name="DoShadowCar" retID="185">
     <parameter id="182" />
     <parameter id="183" />
     <parameter id="184" />
     <parameter id="0" />
    </function>
    <function id="10" name="DoShadowOptimized" retID="177">
     <parameter id="173" />
     <parameter id="174" />
     <parameter id="175" />
     <parameter id="176" />
     <parameter id="0" />
    </function>
    <function id="11" name="DoShadow" retID="166">
     <parameter id="163" />
     <parameter id="164" />
     <parameter id="165" />
     <parameter id="0" />
    </function>
    <function id="12" name="DoShadowPCFDepth" retID="157">
     <parameter id="153" />
     <parameter id="154" />
     <parameter id="155" />
     <parameter id="156" />
    </function>
    <function id="13" name="Tex2DOffset" retID="149">
     <parameter id="146" />
     <parameter id="147" />
     <parameter id="148" />
    </function>
    <function id="14" name="GetShadowMapTexCoord" retID="144">
     <parameter id="143" />
    </function>
    <function id="15" name="VertexShadowPosView" retID="142">
     <parameter id="141" />
    </function>
    <function id="16" name="VertexShadowTexOptimized" retID="138">
     <parameter id="135" />
     <parameter id="136" />
     <parameter id="137" />
    </function>
    <function id="17" name="VertexShadowTex" retID="134">
     <parameter id="133" />
    </function>
    <function id="18" name="PixelShaderVertexColour" retID="98">
     <parameter id="97" />
    </function>
    <function id="19" name="VertexShaderVertexColour" retID="95">
     <parameter id="93" />
     <parameter id="94" />
    </function>
    <function id="20" name="ZPassVertexShader" retID="87">
     <parameter id="86" />
    </function>
    <function id="21" name="pixel_shader" retID="79">
     <parameter id="78" />
    </function>
    <function id="22" name="vertex_shader" retID="72">
     <parameter id="71" />
    </function>
    <function id="23" name="EvaluateSphericalHarmonic" retID="38">
     <parameter id="37" />
    </function>
    <function id="24" name="GetCombinedBrightness" retID="33">
     <parameter id="32" />
    </function>
    <function id="25" name="GetAdaptedLuminanceFromSampler" retID="30">
     <parameter id="29" />
    </function>
    <function id="26" name="DecodeRGBE8" retID="24">
     <parameter id="23" />
    </function>
    <function id="27" name="EncodeRGBE8" retID="19">
     <parameter id="18" />
    </function>
    <function id="28" name="DeCompressColourSpace" retID="17">
     <parameter id="16" />
    </function>
    <function id="29" name="CompressColourSpace" retID="15">
     <parameter id="14" />
    </function>
    <function id="30" name="ScaleHeadLightIntensity" retID="12">
     <parameter id="11" />
    </function>
    <function id="31" name="CalcVertexColour" retID="9">
     <parameter id="8" />
    </function>
    <function id="32" name="screen_position" retID="7">
     <parameter id="6" />
    </function>
    <function id="33" name="world_position" retID="4">
     <parameter id="3" />
    </function>
   </funcInfo>
   <funcEntryExitInfo>
   </funcEntryExitInfo>
   <VfetchInfo>
    <vfetch Address="3" Register="0" DestSwizzle="xyz1" Semantic="0x00" End="false" />
   </VfetchInfo>
   <InterpolatorInfo>
   </InterpolatorInfo>
   <LiteralFloats>
   </LiteralFloats>
   <LiteralInts>
   </LiteralInts>
   <LiteralBools>
   </LiteralBools>
  </shader>
  <shader entrypoint="PixelShaderVertexColour" target="ps_3_0" FxlTechniqueName="RenderTSM" FxlTechnique="2" FxlPassName="p0" FxlPass="0" ZPass="0" pdbHint="4e4a000a-8ebd6876-ae72d484">
   <constanttable>
   </constanttable>
   <sourcemap>
    <statement pc="1" file="5" line="46" scope="-1" lastinstruction="0" />
   </sourcemap>
   <variables>
   </variables>
   <variableDebugInfo>
   </variableDebugInfo>
   <scopes>
   </scopes>
   <funcInfo>
    <function id="0" name="PixelShaderTSMAlpha" retID="224">
     <parameter id="223" />
    </function>
    <function id="1" name="PixelShaderTSM" retID="221">
     <parameter id="220" />
    </function>
    <function id="2" name="VertexShaderTSMAlpha" retID="217">
     <parameter id="216" />
    </function>
    <function id="3" name="VertexShaderTSM" retID="213">
     <parameter id="211" />
     <parameter id="212" />
    </function>
    <function id="4" name="PixelShaderLiSPSMAlpha" retID="205">
     <parameter id="204" />
    </function>
    <function id="5" name="PixelShaderLiSPSM" retID="202">
     <parameter id="201" />
    </function>
    <function id="6" name="VertexShaderLiSPSMAlpha" retID="198">
     <parameter id="197" />
    </function>
    <function id="7" name="VertexShaderLiSPSM" retID="194">
     <parameter id="192" />
     <parameter id="193" />
    </function>
    <function id="8" name="CalcShadowBias" retID="187">
     <parameter id="186" />
    </function>
    <function id="9" name="DoShadowCar" retID="185">
     <parameter id="182" />
     <parameter id="183" />
     <parameter id="184" />
     <parameter id="0" />
    </function>
    <function id="10" name="DoShadowOptimized" retID="177">
     <parameter id="173" />
     <parameter id="174" />
     <parameter id="175" />
     <parameter id="176" />
     <parameter id="0" />
    </function>
    <function id="11" name="DoShadow" retID="166">
     <parameter id="163" />
     <parameter id="164" />
     <parameter id="165" />
     <parameter id="0" />
    </function>
    <function id="12" name="DoShadowPCFDepth" retID="157">
     <parameter id="153" />
     <parameter id="154" />
     <parameter id="155" />
     <parameter id="156" />
    </function>
    <function id="13" name="Tex2DOffset" retID="149">
     <parameter id="146" />
     <parameter id="147" />
     <parameter id="148" />
    </function>
    <function id="14" name="GetShadowMapTexCoord" retID="144">
     <parameter id="143" />
    </function>
    <function id="15" name="VertexShadowPosView" retID="142">
     <parameter id="141" />
    </function>
    <function id="16" name="VertexShadowTexOptimized" retID="138">
     <parameter id="135" />
     <parameter id="136" />
     <parameter id="137" />
    </function>
    <function id="17" name="VertexShadowTex" retID="134">
     <parameter id="133" />
    </function>
    <function id="18" name="PixelShaderVertexColour" retID="98">
     <parameter id="97" />
    </function>
    <function id="19" name="VertexShaderVertexColour" retID="95">
     <parameter id="93" />
     <parameter id="94" />
    </function>
    <function id="20" name="ZPassVertexShader" retID="87">
     <parameter id="86" />
    </function>
    <function id="21" name="pixel_shader" retID="79">
     <parameter id="78" />
    </function>
    <function id="22" name="vertex_shader" retID="72">
     <parameter id="71" />
    </function>
    <function id="23" name="EvaluateSphericalHarmonic" retID="38">
     <parameter id="37" />
    </function>
    <function id="24" name="GetCombinedBrightness" retID="33">
     <parameter id="32" />
    </function>
    <function id="25" name="GetAdaptedLuminanceFromSampler" retID="30">
     <parameter id="29" />
    </function>
    <function id="26" name="DecodeRGBE8" retID="24">
     <parameter id="23" />
    </function>
    <function id="27" name="EncodeRGBE8" retID="19">
     <parameter id="18" />
    </function>
    <function id="28" name="DeCompressColourSpace" retID="17">
     <parameter id="16" />
    </function>
    <function id="29" name="CompressColourSpace" retID="15">
     <parameter id="14" />
    </function>
    <function id="30" name="ScaleHeadLightIntensity" retID="12">
     <parameter id="11" />
    </function>
    <function id="31" name="CalcVertexColour" retID="9">
     <parameter id="8" />
    </function>
    <function id="32" name="screen_position" retID="7">
     <parameter id="6" />
    </function>
    <function id="33" name="world_position" retID="4">
     <parameter id="3" />
    </function>
   </funcInfo>
   <funcEntryExitInfo>
   </funcEntryExitInfo>
   <VfetchInfo>
   </VfetchInfo>
   <InterpolatorInfo>
    <Interpolator Register="0" Semantic="0xa0" Mask="xyzw" />
   </InterpolatorInfo>
   <LiteralFloats>
   </LiteralFloats>
   <LiteralInts>
   </LiteralInts>
   <LiteralBools>
   </LiteralBools>
  </shader>
  <shader entrypoint="VertexShaderVertexColour" target="vs_3_0" FxlTechniqueName="RenderTSM" FxlTechnique="2" FxlPassName="p0" FxlPass="0" ZPass="0" pdbHint="4e4a000b-8ebd6876-ae72d484">
   <constanttable>
    <constant register="c24" count="4">
     <type name="cmWorldViewProj" class="matrix_columns" type="float" rows="4" columns="4" />
    </constant>
   </constanttable>
   <sourcemap>
    <statement pc="3" file="5" line="33" scope="-1" lastinstruction="0" />
    <statement pc="4" file="5" line="33" scope="-1" lastinstruction="0" />
    <statement pc="0.1" file="5" line="33" scope="-1" lastinstruction="0" />
    <statement pc="5" file="5" line="38" scope="-1" lastinstruction="0" />
    <statement pc="6" file="5" line="38" scope="-1" lastinstruction="0" />
    <statement pc="7" file="5" line="38" scope="-1" lastinstruction="0" />
    <statement pc="8" file="5" line="38" scope="-1" lastinstruction="0" />
    <statement pc="1.1" file="5" line="38" scope="-1" lastinstruction="0" />
    <statement pc="9" file="5" line="41" scope="-1" lastinstruction="0" />
   </sourcemap>
   <variables>
   </variables>
   <variableDebugInfo>
   </variableDebugInfo>
   <scopes>
   </scopes>
   <funcInfo>
    <function id="0" name="PixelShaderTSMAlpha" retID="224">
     <parameter id="223" />
    </function>
    <function id="1" name="PixelShaderTSM" retID="221">
     <parameter id="220" />
    </function>
    <function id="2" name="VertexShaderTSMAlpha" retID="217">
     <parameter id="216" />
    </function>
    <function id="3" name="VertexShaderTSM" retID="213">
     <parameter id="211" />
     <parameter id="212" />
    </function>
    <function id="4" name="PixelShaderLiSPSMAlpha" retID="205">
     <parameter id="204" />
    </function>
    <function id="5" name="PixelShaderLiSPSM" retID="202">
     <parameter id="201" />
    </function>
    <function id="6" name="VertexShaderLiSPSMAlpha" retID="198">
     <parameter id="197" />
    </function>
    <function id="7" name="VertexShaderLiSPSM" retID="194">
     <parameter id="192" />
     <parameter id="193" />
    </function>
    <function id="8" name="CalcShadowBias" retID="187">
     <parameter id="186" />
    </function>
    <function id="9" name="DoShadowCar" retID="185">
     <parameter id="182" />
     <parameter id="183" />
     <parameter id="184" />
     <parameter id="0" />
    </function>
    <function id="10" name="DoShadowOptimized" retID="177">
     <parameter id="173" />
     <parameter id="174" />
     <parameter id="175" />
     <parameter id="176" />
     <parameter id="0" />
    </function>
    <function id="11" name="DoShadow" retID="166">
     <parameter id="163" />
     <parameter id="164" />
     <parameter id="165" />
     <parameter id="0" />
    </function>
    <function id="12" name="DoShadowPCFDepth" retID="157">
     <parameter id="153" />
     <parameter id="154" />
     <parameter id="155" />
     <parameter id="156" />
    </function>
    <function id="13" name="Tex2DOffset" retID="149">
     <parameter id="146" />
     <parameter id="147" />
     <parameter id="148" />
    </function>
    <function id="14" name="GetShadowMapTexCoord" retID="144">
     <parameter id="143" />
    </function>
    <function id="15" name="VertexShadowPosView" retID="142">
     <parameter id="141" />
    </function>
    <function id="16" name="VertexShadowTexOptimized" retID="138">
     <parameter id="135" />
     <parameter id="136" />
     <parameter id="137" />
    </function>
    <function id="17" name="VertexShadowTex" retID="134">
     <parameter id="133" />
    </function>
    <function id="18" name="PixelShaderVertexColour" retID="98">
     <parameter id="97" />
    </function>
    <function id="19" name="VertexShaderVertexColour" retID="95">
     <parameter id="93" />
     <parameter id="94" />
    </function>
    <function id="20" name="ZPassVertexShader" retID="87">
     <parameter id="86" />
    </function>
    <function id="21" name="pixel_shader" retID="79">
     <parameter id="78" />
    </function>
    <function id="22" name="vertex_shader" retID="72">
     <parameter id="71" />
    </function>
    <function id="23" name="EvaluateSphericalHarmonic" retID="38">
     <parameter id="37" />
    </function>
    <function id="24" name="GetCombinedBrightness" retID="33">
     <parameter id="32" />
    </function>
    <function id="25" name="GetAdaptedLuminanceFromSampler" retID="30">
     <parameter id="29" />
    </function>
    <function id="26" name="DecodeRGBE8" retID="24">
     <parameter id="23" />
    </function>
    <function id="27" name="EncodeRGBE8" retID="19">
     <parameter id="18" />
    </function>
    <function id="28" name="DeCompressColourSpace" retID="17">
     <parameter id="16" />
    </function>
    <function id="29" name="CompressColourSpace" retID="15">
     <parameter id="14" />
    </function>
    <function id="30" name="ScaleHeadLightIntensity" retID="12">
     <parameter id="11" />
    </function>
    <function id="31" name="CalcVertexColour" retID="9">
     <parameter id="8" />
    </function>
    <function id="32" name="screen_position" retID="7">
     <parameter id="6" />
    </function>
    <function id="33" name="world_position" retID="4">
     <parameter id="3" />
    </function>
   </funcInfo>
   <funcEntryExitInfo>
   </funcEntryExitInfo>
   <VfetchInfo>
    <vfetch Address="3" Register="1" DestSwizzle="xyzw" Semantic="0x00" End="false" />
    <vfetch Address="4" Register="0" DestSwizzle="xyzw" Semantic="0xa0" End="true" />
   </VfetchInfo>
   <InterpolatorInfo>
    <Interpolator Register="0" Semantic="0xa0" Mask="xyzw" />
   </InterpolatorInfo>
   <LiteralFloats>
   </LiteralFloats>
   <LiteralInts>
   </LiteralInts>
   <LiteralBools>
   </LiteralBools>
  </shader>
  <shader entrypoint="ZPassVertexShader" target="vs_3_0" FxlTechniqueName="RenderTSMMatrixPalette" FxlTechnique="1" FxlPassName="p0" FxlPass="0" ZPass="0" pdbHint="4e4a000c-8ebd6876-ae72d484">
   <constanttable>
    <constant register="c24" count="4">
     <type name="cmWorldViewProj" class="matrix_columns" type="float" rows="4" columns="4" />
    </constant>
   </constanttable>
   <sourcemap>
    <statement pc="3" file="5" line="8" scope="-1" lastinstruction="0" />
    <statement pc="0.1" file="5" line="8" scope="-1" lastinstruction="0" />
    <statement pc="4" file="5" line="12" scope="-1" lastinstruction="0" />
    <statement pc="5" file="5" line="12" scope="-1" lastinstruction="0" />
    <statement pc="6" file="5" line="12" scope="-1" lastinstruction="0" />
    <statement pc="7" file="5" line="12" scope="-1" lastinstruction="0" />
    <statement pc="1.1" file="5" line="12" scope="-1" lastinstruction="0" />
    <statement pc="2.0" file="5" line="14" scope="-1" lastinstruction="0" />
   </sourcemap>
   <variables>
   </variables>
   <variableDebugInfo>
   </variableDebugInfo>
   <scopes>
   </scopes>
   <funcInfo>
    <function id="0" name="PixelShaderTSMAlpha" retID="224">
     <parameter id="223" />
    </function>
    <function id="1" name="PixelShaderTSM" retID="221">
     <parameter id="220" />
    </function>
    <function id="2" name="VertexShaderTSMAlpha" retID="217">
     <parameter id="216" />
    </function>
    <function id="3" name="VertexShaderTSM" retID="213">
     <parameter id="211" />
     <parameter id="212" />
    </function>
    <function id="4" name="PixelShaderLiSPSMAlpha" retID="205">
     <parameter id="204" />
    </function>
    <function id="5" name="PixelShaderLiSPSM" retID="202">
     <parameter id="201" />
    </function>
    <function id="6" name="VertexShaderLiSPSMAlpha" retID="198">
     <parameter id="197" />
    </function>
    <function id="7" name="VertexShaderLiSPSM" retID="194">
     <parameter id="192" />
     <parameter id="193" />
    </function>
    <function id="8" name="CalcShadowBias" retID="187">
     <parameter id="186" />
    </function>
    <function id="9" name="DoShadowCar" retID="185">
     <parameter id="182" />
     <parameter id="183" />
     <parameter id="184" />
     <parameter id="0" />
    </function>
    <function id="10" name="DoShadowOptimized" retID="177">
     <parameter id="173" />
     <parameter id="174" />
     <parameter id="175" />
     <parameter id="176" />
     <parameter id="0" />
    </function>
    <function id="11" name="DoShadow" retID="166">
     <parameter id="163" />
     <parameter id="164" />
     <parameter id="165" />
     <parameter id="0" />
    </function>
    <function id="12" name="DoShadowPCFDepth" retID="157">
     <parameter id="153" />
     <parameter id="154" />
     <parameter id="155" />
     <parameter id="156" />
    </function>
    <function id="13" name="Tex2DOffset" retID="149">
     <parameter id="146" />
     <parameter id="147" />
     <parameter id="148" />
    </function>
    <function id="14" name="GetShadowMapTexCoord" retID="144">
     <parameter id="143" />
    </function>
    <function id="15" name="VertexShadowPosView" retID="142">
     <parameter id="141" />
    </function>
    <function id="16" name="VertexShadowTexOptimized" retID="138">
     <parameter id="135" />
     <parameter id="136" />
     <parameter id="137" />
    </function>
    <function id="17" name="VertexShadowTex" retID="134">
     <parameter id="133" />
    </function>
    <function id="18" name="PixelShaderVertexColour" retID="98">
     <parameter id="97" />
    </function>
    <function id="19" name="VertexShaderVertexColour" retID="95">
     <parameter id="93" />
     <parameter id="94" />
    </function>
    <function id="20" name="ZPassVertexShader" retID="87">
     <parameter id="86" />
    </function>
    <function id="21" name="pixel_shader" retID="79">
     <parameter id="78" />
    </function>
    <function id="22" name="vertex_shader" retID="72">
     <parameter id="71" />
    </function>
    <function id="23" name="EvaluateSphericalHarmonic" retID="38">
     <parameter id="37" />
    </function>
    <function id="24" name="GetCombinedBrightness" retID="33">
     <parameter id="32" />
    </function>
    <function id="25" name="GetAdaptedLuminanceFromSampler" retID="30">
     <parameter id="29" />
    </function>
    <function id="26" name="DecodeRGBE8" retID="24">
     <parameter id="23" />
    </function>
    <function id="27" name="EncodeRGBE8" retID="19">
     <parameter id="18" />
    </function>
    <function id="28" name="DeCompressColourSpace" retID="17">
     <parameter id="16" />
    </function>
    <function id="29" name="CompressColourSpace" retID="15">
     <parameter id="14" />
    </function>
    <function id="30" name="ScaleHeadLightIntensity" retID="12">
     <parameter id="11" />
    </function>
    <function id="31" name="CalcVertexColour" retID="9">
     <parameter id="8" />
    </function>
    <function id="32" name="screen_position" retID="7">
     <parameter id="6" />
    </function>
    <function id="33" name="world_position" retID="4">
     <parameter id="3" />
    </function>
   </funcInfo>
   <funcEntryExitInfo>
   </funcEntryExitInfo>
   <VfetchInfo>
    <vfetch Address="3" Register="0" DestSwizzle="xyzw" Semantic="0x00" End="false" />
   </VfetchInfo>
   <InterpolatorInfo>
   </InterpolatorInfo>
   <LiteralFloats>
   </LiteralFloats>
   <LiteralInts>
   </LiteralInts>
   <LiteralBools>
   </LiteralBools>
  </shader>
  <shader entrypoint="pixel_shader" target="ps_3_0" FxlTechniqueName="RenderTSMAlphaTex" FxlTechnique="0" FxlPassName="p0" FxlPass="0" ZPass="0" pdbHint="4e4a000d-8ebd6876-ae72d484">
   <constanttable>
    <constant register="s0">
     <type name="ENVIROMAP_SAMPLER" class="object" type="samplerCUBE" />
    </constant>
   </constanttable>
   <sourcemap>
    <statement pc="2" file="0" line="111" scope="-1" lastinstruction="0" />
    <statement pc="3" file="0" line="111" scope="-1" lastinstruction="0" />
    <statement pc="4" file="0" line="111" scope="-1" lastinstruction="0" />
    <statement pc="5" file="0" line="111" scope="-1" lastinstruction="0" />
    <statement pc="0.1" file="0" line="111" scope="-1" lastinstruction="0" />
    <statement pc="6" file="0" line="114" scope="-1" lastinstruction="0" />
    <statement pc="7" file="0" line="114" scope="-1" lastinstruction="0" />
    <statement pc="8" file="0" line="120" scope="-1" lastinstruction="0" />
    <statement pc="9" file="1" line="54" scope="-1" lastinstruction="0" />
    <statement pc="10" file="1" line="54" scope="-1" lastinstruction="0" />
    <statement pc="11" file="1" line="54" scope="-1" lastinstruction="0" />
    <statement pc="12" file="1" line="54" scope="-1" lastinstruction="0" />
    <statement pc="13" file="1" line="54" scope="-1" lastinstruction="0" />
   </sourcemap>
   <variables>
   </variables>
   <variableDebugInfo>
   </variableDebugInfo>
   <scopes>
   </scopes>
   <funcInfo>
    <function id="0" name="PixelShaderTSMAlpha" retID="224">
     <parameter id="223" />
    </function>
    <function id="1" name="PixelShaderTSM" retID="221">
     <parameter id="220" />
    </function>
    <function id="2" name="VertexShaderTSMAlpha" retID="217">
     <parameter id="216" />
    </function>
    <function id="3" name="VertexShaderTSM" retID="213">
     <parameter id="211" />
     <parameter id="212" />
    </function>
    <function id="4" name="PixelShaderLiSPSMAlpha" retID="205">
     <parameter id="204" />
    </function>
    <function id="5" name="PixelShaderLiSPSM" retID="202">
     <parameter id="201" />
    </function>
    <function id="6" name="VertexShaderLiSPSMAlpha" retID="198">
     <parameter id="197" />
    </function>
    <function id="7" name="VertexShaderLiSPSM" retID="194">
     <parameter id="192" />
     <parameter id="193" />
    </function>
    <function id="8" name="CalcShadowBias" retID="187">
     <parameter id="186" />
    </function>
    <function id="9" name="DoShadowCar" retID="185">
     <parameter id="182" />
     <parameter id="183" />
     <parameter id="184" />
     <parameter id="0" />
    </function>
    <function id="10" name="DoShadowOptimized" retID="177">
     <parameter id="173" />
     <parameter id="174" />
     <parameter id="175" />
     <parameter id="176" />
     <parameter id="0" />
    </function>
    <function id="11" name="DoShadow" retID="166">
     <parameter id="163" />
     <parameter id="164" />
     <parameter id="165" />
     <parameter id="0" />
    </function>
    <function id="12" name="DoShadowPCFDepth" retID="157">
     <parameter id="153" />
     <parameter id="154" />
     <parameter id="155" />
     <parameter id="156" />
    </function>
    <function id="13" name="Tex2DOffset" retID="149">
     <parameter id="146" />
     <parameter id="147" />
     <parameter id="148" />
    </function>
    <function id="14" name="GetShadowMapTexCoord" retID="144">
     <parameter id="143" />
    </function>
    <function id="15" name="VertexShadowPosView" retID="142">
     <parameter id="141" />
    </function>
    <function id="16" name="VertexShadowTexOptimized" retID="138">
     <parameter id="135" />
     <parameter id="136" />
     <parameter id="137" />
    </function>
    <function id="17" name="VertexShadowTex" retID="134">
     <parameter id="133" />
    </function>
    <function id="18" name="PixelShaderVertexColour" retID="98">
     <parameter id="97" />
    </function>
    <function id="19" name="VertexShaderVertexColour" retID="95">
     <parameter id="93" />
     <parameter id="94" />
    </function>
    <function id="20" name="ZPassVertexShader" retID="87">
     <parameter id="86" />
    </function>
    <function id="21" name="pixel_shader" retID="79">
     <parameter id="78" />
    </function>
    <function id="22" name="vertex_shader" retID="72">
     <parameter id="71" />
    </function>
    <function id="23" name="EvaluateSphericalHarmonic" retID="38">
     <parameter id="37" />
    </function>
    <function id="24" name="GetCombinedBrightness" retID="33">
     <parameter id="32" />
    </function>
    <function id="25" name="GetAdaptedLuminanceFromSampler" retID="30">
     <parameter id="29" />
    </function>
    <function id="26" name="DecodeRGBE8" retID="24">
     <parameter id="23" />
    </function>
    <function id="27" name="EncodeRGBE8" retID="19">
     <parameter id="18" />
    </function>
    <function id="28" name="DeCompressColourSpace" retID="17">
     <parameter id="16" />
    </function>
    <function id="29" name="CompressColourSpace" retID="15">
     <parameter id="14" />
    </function>
    <function id="30" name="ScaleHeadLightIntensity" retID="12">
     <parameter id="11" />
    </function>
    <function id="31" name="CalcVertexColour" retID="9">
     <parameter id="8" />
    </function>
    <function id="32" name="screen_position" retID="7">
     <parameter id="6" />
    </function>
    <function id="33" name="world_position" retID="4">
     <parameter id="3" />
    </function>
   </funcInfo>
   <funcEntryExitInfo>
   </funcEntryExitInfo>
   <VfetchInfo>
   </VfetchInfo>
   <InterpolatorInfo>
    <Interpolator Register="0" Semantic="0xa0" Mask="xyzw" />
    <Interpolator Register="1" Semantic="0x50" Mask="xyzw" />
   </InterpolatorInfo>
   <LiteralFloats>
    <Float Register="252" value0="0" value1="0" value2="0" value3="0" />
    <Float Register="253" value0="0" value1="0" value2="0" value3="0" />
    <Float Register="254" value0="0" value1="0" value2="0" value3="0" />
    <Float Register="255" value0="0.75" value1="1.5" value2="1" value3="0" />
   </LiteralFloats>
   <LiteralInts>
   </LiteralInts>
   <LiteralBools>
   </LiteralBools>
  </shader>
  <shader entrypoint="vertex_shader" target="vs_3_0" FxlTechniqueName="RenderTSMAlphaTex" FxlTechnique="0" FxlPassName="p0" FxlPass="0" ZPass="0" pdbHint="4e4a000e-8ebd6876-ae72d484">
   <constanttable>
    <constant register="c12" count="3">
     <type name="cmWorldView" class="matrix_columns" type="float" rows="4" columns="4" />
    </constant>
    <constant register="c24" count="4">
     <type name="cmWorldViewProj" class="matrix_columns" type="float" rows="4" columns="4" />
    </constant>
    <constant register="c237">
     <type name="cvClampAndScales" class="vector" type="float" columns="4" />
    </constant>
    <constant register="c230">
     <type name="cvEnvmapMin" class="vector" type="float" columns="4" />
    </constant>
    <constant register="c231">
     <type name="cvEnvmapRange" class="vector" type="float" columns="4" />
    </constant>
    <constant register="c32">
     <type name="cvLocalEyePos" class="vector" type="float" columns="3" />
    </constant>
    <constant register="c137">
     <type name="cvScreenOffset" class="vector" type="float" columns="4" />
    </constant>
   </constanttable>
   <sourcemap>
    <statement pc="4" file="0" line="77" scope="-1" lastinstruction="0" />
    <statement pc="5" file="0" line="77" scope="-1" lastinstruction="0" />
    <statement pc="0.1" file="0" line="77" scope="-1" lastinstruction="0" />
    <statement pc="6" file="1" line="20" scope="-1" lastinstruction="0" />
    <statement pc="7" file="1" line="20" scope="-1" lastinstruction="0" />
    <statement pc="8" file="1" line="21" scope="-1" lastinstruction="0" />
    <statement pc="9" file="1" line="21" scope="-1" lastinstruction="0" />
    <statement pc="10" file="1" line="21" scope="-1" lastinstruction="0" />
    <statement pc="11" file="0" line="104" scope="-1" lastinstruction="0" />
    <statement pc="1.1" file="0" line="104" scope="-1" lastinstruction="0" />
    <statement pc="12" file="0" line="84" scope="-1" lastinstruction="0" />
    <statement pc="13" file="0" line="84" scope="-1" lastinstruction="0" />
    <statement pc="14" file="0" line="99" scope="-1" lastinstruction="0" />
    <statement pc="15" file="0" line="84" scope="-1" lastinstruction="0" />
    <statement pc="16" file="0" line="87" scope="-1" lastinstruction="0" />
    <statement pc="17" file="0" line="87" scope="-1" lastinstruction="0" />
    <statement pc="18" file="0" line="91" scope="-1" lastinstruction="0" />
    <statement pc="19" file="0" line="87" scope="-1" lastinstruction="0" />
    <statement pc="20" file="0" line="98" scope="-1" lastinstruction="0" />
    <statement pc="21" file="0" line="87" scope="-1" lastinstruction="0" />
    <statement pc="22" file="0" line="88" scope="-1" lastinstruction="0" />
    <statement pc="23" file="0" line="88" scope="-1" lastinstruction="0" />
    <statement pc="24" file="0" line="88" scope="-1" lastinstruction="0" />
    <statement pc="25" file="0" line="101" scope="-1" lastinstruction="0" />
    <statement pc="26" file="0" line="101" scope="-1" lastinstruction="0" />
    <statement pc="27" file="0" line="104" scope="-1" lastinstruction="0" />
   </sourcemap>
   <variables>
   </variables>
   <variableDebugInfo>
   </variableDebugInfo>
   <scopes>
   </scopes>
   <funcInfo>
    <function id="0" name="PixelShaderTSMAlpha" retID="224">
     <parameter id="223" />
    </function>
    <function id="1" name="PixelShaderTSM" retID="221">
     <parameter id="220" />
    </function>
    <function id="2" name="VertexShaderTSMAlpha" retID="217">
     <parameter id="216" />
    </function>
    <function id="3" name="VertexShaderTSM" retID="213">
     <parameter id="211" />
     <parameter id="212" />
    </function>
    <function id="4" name="PixelShaderLiSPSMAlpha" retID="205">
     <parameter id="204" />
    </function>
    <function id="5" name="PixelShaderLiSPSM" retID="202">
     <parameter id="201" />
    </function>
    <function id="6" name="VertexShaderLiSPSMAlpha" retID="198">
     <parameter id="197" />
    </function>
    <function id="7" name="VertexShaderLiSPSM" retID="194">
     <parameter id="192" />
     <parameter id="193" />
    </function>
    <function id="8" name="CalcShadowBias" retID="187">
     <parameter id="186" />
    </function>
    <function id="9" name="DoShadowCar" retID="185">
     <parameter id="182" />
     <parameter id="183" />
     <parameter id="184" />
     <parameter id="0" />
    </function>
    <function id="10" name="DoShadowOptimized" retID="177">
     <parameter id="173" />
     <parameter id="174" />
     <parameter id="175" />
     <parameter id="176" />
     <parameter id="0" />
    </function>
    <function id="11" name="DoShadow" retID="166">
     <parameter id="163" />
     <parameter id="164" />
     <parameter id="165" />
     <parameter id="0" />
    </function>
    <function id="12" name="DoShadowPCFDepth" retID="157">
     <parameter id="153" />
     <parameter id="154" />
     <parameter id="155" />
     <parameter id="156" />
    </function>
    <function id="13" name="Tex2DOffset" retID="149">
     <parameter id="146" />
     <parameter id="147" />
     <parameter id="148" />
    </function>
    <function id="14" name="GetShadowMapTexCoord" retID="144">
     <parameter id="143" />
    </function>
    <function id="15" name="VertexShadowPosView" retID="142">
     <parameter id="141" />
    </function>
    <function id="16" name="VertexShadowTexOptimized" retID="138">
     <parameter id="135" />
     <parameter id="136" />
     <parameter id="137" />
    </function>
    <function id="17" name="VertexShadowTex" retID="134">
     <parameter id="133" />
    </function>
    <function id="18" name="PixelShaderVertexColour" retID="98">
     <parameter id="97" />
    </function>
    <function id="19" name="VertexShaderVertexColour" retID="95">
     <parameter id="93" />
     <parameter id="94" />
    </function>
    <function id="20" name="ZPassVertexShader" retID="87">
     <parameter id="86" />
    </function>
    <function id="21" name="pixel_shader" retID="79">
     <parameter id="78" />
    </function>
    <function id="22" name="vertex_shader" retID="72">
     <parameter id="71" />
    </function>
    <function id="23" name="EvaluateSphericalHarmonic" retID="38">
     <parameter id="37" />
    </function>
    <function id="24" name="GetCombinedBrightness" retID="33">
     <parameter id="32" />
    </function>
    <function id="25" name="GetAdaptedLuminanceFromSampler" retID="30">
     <parameter id="29" />
    </function>
    <function id="26" name="DecodeRGBE8" retID="24">
     <parameter id="23" />
    </function>
    <function id="27" name="EncodeRGBE8" retID="19">
     <parameter id="18" />
    </function>
    <function id="28" name="DeCompressColourSpace" retID="17">
     <parameter id="16" />
    </function>
    <function id="29" name="CompressColourSpace" retID="15">
     <parameter id="14" />
    </function>
    <function id="30" name="ScaleHeadLightIntensity" retID="12">
     <parameter id="11" />
    </function>
    <function id="31" name="CalcVertexColour" retID="9">
     <parameter id="8" />
    </function>
    <function id="32" name="screen_position" retID="7">
     <parameter id="6" />
    </function>
    <function id="33" name="world_position" retID="4">
     <parameter id="3" />
    </function>
   </funcInfo>
   <funcEntryExitInfo>
   </funcEntryExitInfo>
   <VfetchInfo>
    <vfetch Address="4" Register="1" DestSwizzle="xyzw" Semantic="0x00" End="false" />
    <vfetch Address="5" Register="2" DestSwizzle="xyz_" Semantic="0x30" End="true" />
   </VfetchInfo>
   <InterpolatorInfo>
    <Interpolator Register="0" Semantic="0xa0" Mask="xyzw" />
    <Interpolator Register="1" Semantic="0x50" Mask="xyzw" />
   </InterpolatorInfo>
   <LiteralFloats>
    <Float Register="252" value0="0" value1="0" value2="0" value3="0" />
    <Float Register="253" value0="0" value1="0" value2="0" value3="0" />
    <Float Register="254" value0="0" value1="0" value2="0" value3="0" />
    <Float Register="255" value0="0" value1="1" value2="0" value3="0" />
   </LiteralFloats>
   <LiteralInts>
   </LiteralInts>
   <LiteralBools>
   </LiteralBools>
  </shader>
 </shaders>
</shader-pdb>
