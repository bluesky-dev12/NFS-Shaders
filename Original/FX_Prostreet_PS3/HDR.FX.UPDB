<?xml version="1.0" encoding="utf-8"?>
<shader-pdb pdbHint="4e4a0001-97685adf-c7641129" version="6132">
 <files>
  <file id="0" path="D:\eax-build1-s09-xenon\Oban\Speed\Xenon\Src\Render\Shaders\hdr.fx" time="01c7f8c7-b0f3d1a4">///////////////////////////////////////////////////////////////////////////////
//
// HDR Effects
//
///////////////////////////////////////////////////////////////////////////////

#include "global.h"
#include "hdr.h"

/*
	STUB SHADER !!!!
*/
struct VS_INPUT
{
	float4 position		: POSITION;
	float4 vertexCol	: COLOR0;
	float4 tex			: TEXCOORD0;
	float4 texlightmap	: TEXCOORD1;
	float3 normal		: NORMAL;

};

float4 vertex_shader(const VS_INPUT IN) : POSITION
{
	return world_position(IN.position);
}

float4 pixel_shader() : COLOR0
{
	return float4(0, 1, 0, 1);	// hot green
}

technique hdr_stub &lt;int shader = 1;&gt;
{
    pass p0
    {
		VertexShader = compile vs_1_1 vertex_shader();
        PixelShader  = compile ps_2_0 pixel_shader();
    }
}

/*
///////////////////////////////////////////////////////////////////////////////

shared float4 cvTextureOffset				: REG_cvTextureOffset; //TEXTUREANIMOFFSET;

static const int	MAX_SAMPLES				= 16;	// Maximum texture grabs

static const float	ADAPTATION_TIME_POS		= 0.02f;
static const float	ADAPTATION_TIME_NEG		= 0.015f;

// The per-color weighting to be used for luminance	calculations in	RGB	order.
static const float3		LUMINANCE_VECTOR  =	float3(0.2125f,	0.7154f, 0.0721f);

// Contains	sampling offsets used by the techniques
shared float4 cavSampleOffsets[MAX_SAMPLES]	: REG_cavSampleOffsets; //AV_SAMPLE_OFFSETS;
shared float4 cavSampleWeights[MAX_SAMPLES] : REG_cavSampleWeights; //AV_SAMPLE_WEIGHTS;
   

// Tone	mapping	variables
shared float cfBloomScale					: REG_cfBloomScale; //BLOOM_SCALE;
shared float cfBrightPassThreshold			: REG_cfBrightPassThreshold; //BRIGHT_PASS_THRESHOLD;	// Threshold for BrightPass	filter
shared float4	cvCoeffs0					: register(c78); //CURVE_COEFFS_0;
static const float YUV_ratio = 0.0f;

///////////////////////////////////////////////////////////////////////////////

sampler	DIFFUSE_SAMPLER = sampler_state
{
	AddressU = CLAMP;
	AddressV = CLAMP;  
	MIPFILTER =	LINEAR;
	MINFILTER =	LINEAR;
	MAGFILTER =	LINEAR;
};

sampler3D VOLUMEMAP_SAMPLER = sampler_state
{
	AddressU = CLAMP;
	AddressV = CLAMP;
	AddressW = CLAMP;
	MIPFILTER = LINEAR;
	MINFILTER = LINEAR;
	MAGFILTER = LINEAR;
};

sampler	MISCMAP1_SAMPLER = sampler_state
{
	AddressU = CLAMP;
	AddressV = CLAMP;
	MIPFILTER =	LINEAR;
	MINFILTER =	LINEAR;
	MAGFILTER =	LINEAR;
};

sampler	MISCMAP2_SAMPLER = sampler_state
{
	AddressU = CLAMP;
	AddressV = CLAMP;
	MIPFILTER =	LINEAR;
	MINFILTER =	LINEAR;
	MAGFILTER =	LINEAR;
};

///////////////////////////////////////////////////////////////////////////////

struct VS_INPUT_WORLD
{
	float4 position : POSITION;
	float4 color    : COLOR;
	float4 texcoord : TEXCOORD;
};

struct VS_INPUT_SCREEN
{
	float4 position	: POSITION;
	float4 texcoord	: TEXCOORD;
};

struct VtoP
{
	float4 position	: POSITION;
	float4 color	: COLOR0;
	float4 tex		: TEXCOORD0;
};

///////////////////////////////////////////////////////////////////////////////

VtoP vertex_shader_worldviewproj(const VS_INPUT_WORLD IN)
{
	VtoP OUT;
	float4 p = mul(IN.position, cmWorldViewProj);
	OUT.position = p;
	OUT.tex = IN.texcoord + cvTextureOffset;
	OUT.color = IN.color;

	return OUT;
}

///////////////////////////////////////////////////////////////////////////////

VtoP vertex_shader_passthru(const VS_INPUT_SCREEN IN)
{
	VtoP OUT;
	OUT.position = IN.position;
	OUT.tex	= IN.texcoord;
	OUT.color =	0x77777777;

	return OUT;
}

///////////////////////////////////////////////////////////////////////////////
 
float4 pixel_shader_yuvmovie(const VtoP IN) : COLOR
{
    // U,V in range [-0.5,0.5]
    float3x3 yuvToRgbMatrix = {	1.164383,         0, +1.596027,	
								1.164383, -0.391762, -0.812968,
								1.164383, +2.017232,         0 };
 
	float3 yuv;
	float2 tex1 = float2(IN.tex.x * YUV_ratio, IN.tex.y);
	yuv.r = tex2D(DIFFUSE_SAMPLER, IN.tex).r-(16/256);
    yuv.g = tex2D(MISCMAP1_SAMPLER, tex1).g-0.5;
    yuv.b = tex2D(MISCMAP2_SAMPLER, tex1).b-0.5;

    float4 OUT;
    OUT.rgb = mul(yuvToRgbMatrix, yuv);
    OUT.a = 0;

	return OUT;
}

///////////////////////////////////////////////////////////////////////////////

float4 pixel_shader(const VtoP IN) : COLOR
{
	float4 OUT;

	float4 diffuse = tex2D(DIFFUSE_SAMPLER, IN.tex);	// * IN;
	
	OUT.xyz	= diffuse;

	OUT.w =	diffuse.w;

	return OUT;
}

///////////////////////////////////////////////////////////////////////////////

float4 pixel_shader_masked( in float2 vScreenPosition :	TEXCOORD0 ) : COLOR
{
	float4	fZero         = 0.0f,
			fMask         = tex2D( DIFFUSE_SAMPLER, vScreenPosition ),
			fSample       = tex2D( MISCMAP1_SAMPLER, vScreenPosition ),
			fMaskedSample = fMask * fSample;

//	if ( ((fMaskedSample.x != 0.0f) &amp;&amp; (fSample.x != 0.0f)) &amp;&amp;
//		 ((fMaskedSample.y != 0.0f) &amp;&amp; (fSample.y != 0.0f)) &amp;&amp;
//		 ((fMaskedSample.z != 0.0f) &amp;&amp; (fSample.z != 0.0f))    )
//	{
//		return float4( 0.0f, 0.0f, 0.0f, 1.0f );
//	}
//	else
//	{
//		return fSample;
//	}
	
	return fMaskedSample;
}


///////////////////////////////////////////////////////////////////////////////
// Name: DownScale2x2PS
// Desc: Scale the source texture down to 1/4 scale
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////

float4 PS_PassThruAlphaTag( const VtoP IN ) : COLOR
{
	float4	vDiffuse = tex2D(DIFFUSE_SAMPLER, IN.tex);

	// save alpha tag
	float	fAlphaTag = vDiffuse.w;

	// get average luminance in alpha 
	vDiffuse.w = dot( vDiffuse.xyz, LUMINANCE_VECTOR );

	// filter sample colour by alpha tag
	vDiffuse.xyz *= fAlphaTag;

	return vDiffuse;	
}

///////////////////////////////////////////////////////////////////////////////
// Name: PS_DownScale4x4
// Desc: Scale the source texture down to 1/16 scale
///////////////////////////////////////////////////////////////////////////////

float GetRandomValue( float2 lInPos )
{
    // cheesy random function which appears to give quite good noise, but is probably much more expensive than it needs to be
    float  lrRandom = ( pow( 9.213f, ( lInPos.x % 0.25f ) + 3.0f ) * pow( 7.12345f, ( lInPos.y % 0.25f ) + 3.0f ) ) % 1.0f;
    lrRandom = ( lrRandom - 0.5f );
    return lrRandom;// * (3.0f / 1280.0f);
}

struct PS_OUT
{
	float4 scaledColour		: COLOR0;	// render target 0
	float4 scaledHDRColour	: COLOR1;	// render target 1
};

PS_OUT PS_DownScale4x4ToUvesHdr(in float2 vScreenPosition :	TEXCOORD0 )
{
	PS_OUT result;
	
	
	//result.scaledHDRColour = 0.0f;

	//float motionBlurMask = 0;
	//for( int i=0; i	&lt; 16; i++ )
	//{	
	//	result.scaledHDRColour += tex2D( DIFFUSE_SAMPLER, vScreenPosition + cavSampleOffsets[i].xy );
	//}
		
	//result.scaledHDRColour = result.scaledColour;
	
	//result.scaledColour /= 16;

	result.scaledColour   = tex2D( DIFFUSE_SAMPLER, vScreenPosition + cavSampleOffsets[5].xy);
	result.scaledColour  += tex2D( DIFFUSE_SAMPLER, vScreenPosition + cavSampleOffsets[6].xy);
	result.scaledColour  += tex2D( DIFFUSE_SAMPLER, vScreenPosition + cavSampleOffsets[9].xy);
	result.scaledColour  += tex2D( DIFFUSE_SAMPLER, vScreenPosition + cavSampleOffsets[10].xy);
	result.scaledColour /= 4;
	// Add grain to this image for more contrast in the motion blur during the visualtreatment
	//result.scaledColour.xyz *= GetRandomValue(result.scaledColour.xy) + 1;
	
	// No blur on this
	//result.scaledColour = tex2D( DIFFUSE_SAMPLER, vScreenPosition);

	// Apply the colour cube filter
	//result.scaledColour.xyz = tex3D(VOLUMEMAP_SAMPLER, result.scaledColour.xyz);
	
	// Store the scaled luminance in alpha and a motion blur mask in the red channel
	result.scaledColour.w = dot( result.scaledColour.xyz, LUMINANCE_VECTOR );
	
	
	result.scaledHDRColour = tex2D( DIFFUSE_SAMPLER, vScreenPosition) * 16;
	// The source alpha is a mask for the HDR bloom - the mask is inverted i.e. bloom the black 
	float	fAlphaMask = 1 - result.scaledHDRColour.w / 16;
	// filter sample colour by alpha mask
	result.scaledHDRColour.xyz *= fAlphaMask;
	result.scaledHDRColour /= 16;

	return result;
}


///////////////////////////////////////////////////////////////////////////////
float4 PS_AttenuateLightStreaks(in float2 vScreenPosition :	TEXCOORD0 ) : COLOR
{
	float4 result = tex2D( DIFFUSE_SAMPLER, vScreenPosition);
	result.xyz *= cvCoeffs0.xyz;
	result.xyz -= 0.0017;
	
	return result;
}

///////////////////////////////////////////////////////////////////////////////

float4 PS_GaussBlur5x5(	const VtoP IN )	: COLOR
{
	float4	sample = 0.0f;

	for( int i=0; i	&lt; 13; i++ )
	{
		sample += cavSampleWeights[i] * tex2D(	DIFFUSE_SAMPLER, IN.tex.xy + cavSampleOffsets[i].xy );
	}

	return sample;
}

///////////////////////////////////////////////////////////////////////////////

float4 PS_Bloom( const VtoP	IN ) : COLOR
{
	float4 sample;

	sample = 0.0f;

	for( int i=0; i	&lt; 16; i++ )
	{
		sample += cavSampleWeights[i] * tex2D(	DIFFUSE_SAMPLER, IN.tex.xy + cavSampleOffsets[i].xy );
	}
	
	return sample;
}

///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////

float4 PS_BrightPassFilter(	const VtoP IN )	: COLOR
{
	float4	vSample = tex2D( DIFFUSE_SAMPLER, IN.tex );
	float	fAdaptedLum = GetAdaptedLuminanceFromSampler( MISCMAP1_SAMPLER );
	float3	result;

	// (Mike Riegger) - I want the light streaks to massively bloom. I'm feeding the light streaks into the
	// misc2 sampler so I can avoid the brightpass threshold which would crush the light streaks.
	float4 vLightStreakSample = tex2D(MISCMAP2_SAMPLER, IN.tex);
 
	result = vSample.xyz;

	result *= cfMiddleGray/(fAdaptedLum + 0.001f);
	#if 1
	
		// Operate on the max colour channel to remove the hue blowout and blue tinge 
		// exhibited by the original filter
		float maxChannel = max(max(result.x, result.y), result.z);
		maxChannel -= cfBrightPassThreshold;
		maxChannel = max(maxChannel, 0.0f);
		maxChannel = 2*maxChannel / (cfBrightPassThreshold+maxChannel); 
		float4 finalColour = float4( result*maxChannel, vSample.a );
		finalColour += vLightStreakSample;
		return finalColour; 
	#else  
	
		result -= cfBrightPassThreshold.xxx;
		result = max(result, 0.0f);
		// Map the resulting value into the 0 to 1 range. Higher values for
		// BRIGHT_PASS_OFFSET will isolate lights from illuminated scene 
		// objects.
		result = result / (cfBrightPassThreshold.xxx+result); 
		return float4( result, vSample.a );

	#endif

}

///////////////////////////////////////////////////////////////////////////////
// Name: PS_SampleLuminance
// Desc: Sample	the	luminance of the source	image using	a kernal of	sample
//		 points, and return	a scaled image containing the log()	of averages
///////////////////////////////////////////////////////////////////////////////

float4 PS_SampleLuminance(	in float2 vScreenPosition :	TEXCOORD0 )	: COLOR
{
	float fLogSum = 0.0f;

	for( int iSample = 0; iSample &lt;	9; iSample++ )
	{
		// Compute the sum of log(luminance) throughout	the	sample points
		float4 vColor = tex2D( DIFFUSE_SAMPLER, vScreenPosition + cavSampleOffsets[iSample].xy );
		fLogSum += dot( vColor.xyz, LUMINANCE_VECTOR );
	}
	
	// Divide the sum to complete the average
	fLogSum /= 9;

	return float4( fLogSum, fLogSum, fLogSum, 1.0f	);
}

///////////////////////////////////////////////////////////////////////////////

float4 PS_CalculateAdaptation( const VtoP IN ) : COLOR
{
	float	fLastAdaptedLum = tex2D( MISCMAP1_SAMPLER,   float2((0.5f), (0.5f)) ).x,
			fSceneLum	    = tex2D( DIFFUSE_SAMPLER, float2((0.5f), (0.5f)) ).x,
			fAdaptedLum     = fLastAdaptedLum + ((fSceneLum - fLastAdaptedLum) * ADAPTATION_TIME_POS);
	float4	vResult;

	vResult = float4( fAdaptedLum, fAdaptedLum, fAdaptedLum, 1.0f );

	return vResult;
}

///////////////////////////////////////////////////////////////////////////////

float4 PS_FinalHDRPass(	const VtoP IN )	: COLOR
{
	float4	vSample		= tex2D( DIFFUSE_SAMPLER, IN.tex),
			vBloom		= tex2D( MISCMAP1_SAMPLER,	 IN.tex );
	float	fAdaptedLum = tex2D( MISCMAP2_SAMPLER, float2((0.5f), (0.5f)) ).x;

	float4 result;
	result.rgb = vSample.rgb *  2.0f * cfMiddleGray/(fAdaptedLum + 0.001f);

	result.rgb += vBloom * cfBloomScale;
	result.a = vSample.a;
	
	return result;
}

///////////////////////////////////////////////////////////////////////////////

technique finalhdrpass &lt;int	shader = 1;&gt;
{
	pass p0
	{
		VertexShader = compile vs_1_1 vertex_shader_passthru();
		PixelShader	 = compile ps_2_0 PS_FinalHDRPass();
	}
}

///////////////////////////////////////////////////////////////////////////////

technique world_masked	&lt;int shader	= 1;&gt;
{
	pass p0
	{
		VertexShader = compile vs_1_1 vertex_shader_worldviewproj();
		PixelShader	 = compile ps_2_0 pixel_shader_masked();
	}
}

///////////////////////////////////////////////////////////////////////////////

technique screen_passthru &lt;int shader	= 1;&gt;
{
	pass p0
	{
		VertexShader = compile vs_1_1 vertex_shader_passthru();
		PixelShader	 = compile ps_2_0 pixel_shader();
	}
}

///////////////////////////////////////////////////////////////////////////////

technique yuvmovie &lt;int shader	= 1;&gt;
{
	pass p0
	{
		VertexShader = compile vs_1_1 vertex_shader_passthru();
		PixelShader	 = compile ps_2_0 pixel_shader_yuvmovie();
	}
}
///////////////////////////////////////////////////////////////////////////////

technique screen_passthru_alpha_tag &lt;int shader	= 1;&gt;
{
	pass p0
	{
		VertexShader = compile vs_1_1 vertex_shader_passthru();
		PixelShader	 = compile ps_2_0 PS_PassThruAlphaTag();
	}
}

///////////////////////////////////////////////////////////////////////////////

technique downscale4x4_t0_uves_hdr &lt;int	shader = 1;&gt;
{
	pass p0
	{
		VertexShader = compile vs_1_1 vertex_shader_passthru();
		PixelShader	 = compile ps_2_0 PS_DownScale4x4ToUvesHdr();
	}
}

///////////////////////////////////////////////////////////////////////////////

technique bloom	&lt;int shader	= 1;&gt;
{
	pass p0
	{
		VertexShader = compile vs_1_1 vertex_shader_passthru();
		PixelShader	 = compile ps_2_0 PS_Bloom();
	}
}

///////////////////////////////////////////////////////////////////////////////

technique blur	&lt;int shader	= 1;&gt;
{
	pass p0
	{
		VertexShader = compile vs_1_1 vertex_shader_passthru();
		PixelShader	 = compile ps_2_0 PS_GaussBlur5x5();
	}
}

///////////////////////////////////////////////////////////////////////////////

technique brightpass &lt;int shader = 1;&gt;
{
	pass p0
	{
		VertexShader = compile vs_1_1 vertex_shader_passthru();
		PixelShader	 = compile ps_2_0 PS_BrightPassFilter();
	}
}

///////////////////////////////////////////////////////////////////////////////

technique calculate_luminance &lt;int shader =	1;&gt;
{
	pass p0
	{
		VertexShader = compile vs_1_1 vertex_shader_passthru();
		PixelShader	 = compile ps_2_0 PS_SampleLuminance();
	}
}

///////////////////////////////////////////////////////////////////////////////

technique calculate_adaptation &lt;int shader =	1;&gt;
{
	pass p0
	{
		VertexShader = compile vs_1_1 vertex_shader_passthru();
		PixelShader	 = compile ps_2_0 PS_CalculateAdaptation();
	}
}

///////////////////////////////////////////////////////////////////////////////

technique attenuate
{
	pass p0
	{
		VertexShader = compile vs_1_1 vertex_shader_passthru();
		PixelShader	 = compile ps_2_0 PS_AttenuateLightStreaks();
	}
}

///////////////////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////////////////

technique TwoPassBlur	&lt;int shader	= 1;&gt;
{
	pass p0
	{
		VertexShader = compile vs_1_1 vertex_shader_passthru();
		PixelShader	 = compile ps_2_0 PS_Bloom();
	}
}

///////////////////////////////////////////////////////////////////////////////

technique GaussBlur5x5	&lt;int shader	= 1;&gt;
{
	pass p0
	{
		VertexShader = compile vs_1_1 vertex_shader_passthru();
		PixelShader	 = compile ps_2_0 PS_GaussBlur5x5();
	}
}
*/

</file>
  <file id="1" path="D:\eax-build1-s09-xenon\Oban\Speed\Xenon\Src\Render\Shaders\global.h" time="01c7f8c7-b0ef0cee">#ifndef GLOBAL_H
#define GLOBAL_H

#include "registermap.h"   

// Defined out for the Xbox360 - only needed on the PC
#define DECLARE_TEXTURE(texture)	
#define ASSIGN_TEXTURE(texture)	
#define DECLARE_MINFILTER(default_filter)			 MINFILTER = default_filter;
#define DECLARE_MAGFILTER(default_filter)			 MAGFILTER = default_filter;
#define DECLARE_MIPFILTER(default_filter)			 MIPFILTER = default_filter;

/////////////////////////////////////////////////////////////////////////////////////////
float4x4	cmWorldViewProj			: REG_cmWorldViewProj; //WORLDVIEWPROJECTION ;
float4		cvScreenOffset			: REG_cvScreenOffset; //SCREENOFFSET;
float4		cvVertexPowerBrightness : REG_cvVertexPowerBrightness;

float4 world_position( float4 screen_pos )
{
 	float4 p = mul(screen_pos, cmWorldViewProj);  
	p.xy += cvScreenOffset.xy * p.w;
    return p;
}

float4 screen_position( float4 screen_pos )
{
	screen_pos.xy += cvScreenOffset.xy;
    return screen_pos;
}

float4 CalcVertexColour(float4 colour)
{
	float4 result = pow(colour, cvVertexPowerBrightness.x) * cvVertexPowerBrightness.y;
	result.w = colour.w;
	return result;
}

float3 ScaleHeadLightIntensity(float3 colour) 
{
	float3 result = colour * cvVertexPowerBrightness.z;
	return result;
}



/////////////////////////////////////////////////////////////////////////////////////////
// HDR Colour Space compression
//
// Convert to a log or psudeo-log colour space to save high dynamic range data
/////////////////////////////////////////////////////////////////////////////////////////
#define kCompressCoeff ( 1.0f )
float3 CompressColourSpace(float3 colour)
{
	return colour / (kCompressCoeff+colour);
}

float3 DeCompressColourSpace(float3 colour)
{
	return colour / (kCompressCoeff-colour);
}


/////////////////////////////////////////////////////////////////////////////////////////
// RGBE8 Encoding/Decoding
// The RGBE8 format stores a mantissa per color channel and a shared exponent 
// stored in alpha. Since the exponent is shared, it's computed based on the
// highest intensity color component. The resulting color is RGB * 2^Alpha,
// which scales the data across a logarithmic scale.
/////////////////////////////////////////////////////////////////////////////////////////

float4 EncodeRGBE8( in float3 rgb )	  
{
	float4 vEncoded;

    // Determine the largest color component
	float maxComponent = max( max(rgb.r, rgb.g), rgb.b );
	
	// Round to the nearest integer exponent
	float fExp = ceil( log2(maxComponent) );

    // Divide the components by the shared exponent
	vEncoded.rgb = rgb / exp2(fExp);
	
	// Store the shared exponent in the alpha channel
	vEncoded.a = (fExp + 128) / 255;

	return vEncoded;
}

/////////////////////////////////////////////////////////////////////////////////////////

float3 DecodeRGBE8( in float4 rgbe )
{
	float3 vDecoded;

    // Retrieve the shared exponent
	float fExp = rgbe.a * 255 - 128;
	
	// Multiply through the color components
	vDecoded = rgbe.rgb * exp2(fExp);
	
	return vDecoded;
}

/////////////////////////////////////////////////////////////////////////////////////////
#endif</file>
  <file id="2" path="D:\eax-build1-s09-xenon\Oban\Speed\Xenon\Src\Render\Shaders\registermap.h" time="01c7f8c7-b0d997bb">
// ------------------------------------------------------------------------------------------------------------------------------------------

#define CONSTANT_RESERVED_DO_NOT_USE			(0)		/* 4 vectors [c0,c3] */

// ------------------------------------------------------------------------------------------------------------------------------------------

#define REG_RESERVED_DO_NOT_USE			register(c0)	/* 4 vectors [c0,c3] */

#define REG_cmWorldMat					register(c4)	/* 4 vectors [c0,c3] */
#define REG_cmWorldMatTranspose			register(c8)	/* 4 vectors [c4,c7] */
#define REG_cmWorldView					register(c12)	/* 4 vectors [c8,c11] */
#define REG_cmShadowMapWVP				register(c16)	/* 4 vectors [c12,c15] */
#define REG_cmLightWVP					register(c20)	/* 4 vectors [c16,c19] */
#define REG_cmWorldViewProj				register(c24)	/* 4 vectors [c20,c23] */
#define REG_cmPrevWorldViewProj			register(c28)	/* 4 vectors [c24,c27] */
#define REG_cvLocalEyePos				register(c32)	/* 1 vecotr	 [c32] */
#define REG_cvLocalLightVec				register(c33)	/* 1 vecotr	 [c33] */
#define REG_cfSkyDomeRotation			register(c34)	/* 1 vecotr	 [c34] */

#define REG_cmLocalColourMatrix			register(c36)	/* 4 vectors [c36,c39] */
#define REG_cmLocalDirectionMatrix		register(c40)	/* 4 vectors [c40,c43] */
#define REG_cmLocalPositionMatrix		register(c44)	/* 4 vectors [c44,c47] */
#define REG_cavHarmonicCoeff			register(c48)	/* 10 floats, 3 vectors, 1 pad vector [48,51] */

#define REG_camBlendMatrices			register(c52)	/* 16 vectors [c52,c67] */
#define REG_cavWorldHeadlightDirection	register(c68)	/* 2 vectors [c68,c69] */
#define REG_cavWorldHeadlightPosition	register(c70)	/* 2 vectors [c70,c71] */
#define REG_cavWorldHeadlightUpDirection register(c72)	/* 2 vectors [c72,c73] */

#define REG_cmShadowMapVP				register(c68) // note clash with head light
#define REG_cmShadowMapBiasMatrix		register(c72)	/* 4 vectors [c72, c75] */



#define REG_cvWorldSunColour			register(c79)
#define REG_cvWorldAmbientColour		register(c80)

// available: [c82,c115] (but would alias cavPcaWeightsR and cavPcaWeightsG)
// PCA/UCap parameters (ucap.fx, water.fx)
#define REG_cafPcaMean					register(c81)	/* 1 vector */
#define REG_cavPcaWeightsR				register(c82)	/* 22 vectors [c82,c103] */
#define REG_cavPcaWeightsG				register(c104)	/* 22 vectors [c104,c125] */
#define REG_cavPcaWeightsB				register(c126)	/* 22 vectors [c126,c147] */
#define REG_cavPcaWeightsX				register(c148)	/* 8 vectors [c148,c155] */
#define REG_cavPcaWeightsY				register(c156)	/* 8 vectors [c156,c163] */
#define REG_cavPcaWeightsZ				register(c164)	/* 8 vectors [c164,c171] */
#define REG_cavPcaWeightsNX				register(c172)	/* 8 vectors [c172,c179] */
#define REG_cavPcaWeightsNY				register(c180)	/* 8 vectors [c180,c187] */
#define REG_cavPcaWeightsNZ				register(c188)	/* 8 vectors [c188,c195] */
#define REG_cavFeatureHeights			register(c196)	/* 1 vector */


// The following parameters alias cavPcaWeightsG:
#define REG_cfMipMapBias				register(c116)
#define REG_cfBrightness				register(c117)
#define REG_cfSurfaceReflection			register(c118)
#define REG_cfRainIntensity				register(c119)
#define REG_cfSpecularPower				register(c120)
#define REG_cfMetallicScale				register(c121)
#define REG_cfEnvmapPullAmount			register(c122)
#define REG_cfEnvmapPower				register(c123)
#define REG_PAD2						register(c125)

// The following parameters alias cavPcaWeightsB:
#define REG_cfCombinedBrightness		register(c126)
#define REG_cvVisualEffectFadeColour	register(c127)	/* also aliases cfSkyAlphaTag */
#define REG_cfSkyAlphaTag				register(c127)	/* also aliases cvVisualEffectFadeColour */
#define REG_cfShadowVolumeOffset		register(c128)
#define REG_cfRVMWorldBrightness		register(c129)
#define REG_cfDesaturation				register(c130)
#define REG_cfBloomScale				register(c131)
#define REG_cfSplitScreenUVScale		register(c132)
#define REG_cfColourCubeFilterBlend		register(c133)
#define REG_cfTimeTicker				register(c134)
#define REG_cfMiddleGray				register(c135)
#define REG_cfBrightPassThreshold		register(c136)

#define REG_cvScreenOffset				register(c137)
#define REG_cvFog_Br_Plus_Bm			register(c138)
#define REG_cvFog_One_Over_BrBm			register(c139)
#define REG_cvFog_Const_1				register(c140)
#define REG_cvFog_Const_2				register(c141)
#define REG_cvFog_Const_3				register(c142)
#define REG_cvAmbientColour				register(c143)
#define REG_cvShadowParams0				register(c144)
#define REG_cvShadowParams1				register(c145)


// The following parameters alias cavPcaWeightsX:
#define REG_cvDiffuseColour				register(c148)
#define REG_cvSpecularColour			register(c149)
// available: [c150,c155] (but would alias cavPcaWeightsX)

// The following parameters alias cavPcaWeightsY:
#define REG_cvShadowColour				register(c156)
#define REG_cvTextureOffset				register(c161)
#define REG_cvLocalCenter				register(c162)
#define REG_cvTreeParams				register(c163)

// The following parameters alias cavPcaWeightsZ:
#define REG_cvBaseAlphaRef				register(c164)
#define REG_cvCloudIntensity			register(c165)
#define REG_cvLocalLightPos				register(c166)
#define REG_cvPixelizationScale			register(c167)
#define REG_cvGrassColour				register(c169)

// The following parameters alias cavPcaWeightsNX:
#define REG_cvDepthOfFieldParams		register(c172)	/* aliases cavFeatureHeights */
#define REG_cvBlurParams				register(c173)
// The following parameters alias cavPcaWeightsNX and cavPcaWeightsNY:
#define REG_cavSampleOffsetWeights		register(c174)	/* 16 vectors [c174,c189] */

#define REG_PAD0						register(c190)	/* free space!! */

#define REG_cvFogValue					register(c206)
#define REG_cvFogColour					register(c207)
#define REG_cfSkyFogFalloff				register(c208)
#define REG_cfLightMapVertColBlend		register(c209)

#define REG_cvLightColour				register(c210)
#define REG_cvLightPosition				register(c211)

#define REG_cvLightDirection			register(c212)
#define REG_cfShadowMapEnabled			register(c213)
#define REG_cfVSMEnabled				register(c214)
#define REG_cfReceiveShadow				register(c215)

#define REG_cvVertexPowerBrightness		register(c216)

#define REG_cfFogEnable					register(c240)



// Light Material Registers - alias REG_cavLightDirections

#define REG_cvDiffuseMin				register(c228)
#define REG_cvDiffuseRange				register(c229)
#define REG_cvEnvmapMin					register(c230)
#define REG_cvEnvmapRange				register(c231)
#define REG_cvSpecularMin				register(c232)
#define REG_cvSpecularRange				register(c233)
#define REG_cvSpecular1Min				register(c234)
#define REG_cvSpecular1Range			register(c235)
#define REG_cvPowers					register(c236)
#define REG_cvClampAndScales			register(c237)
#define REG_cvFlakes					register(c238)
#define REG_cvVinylScales				register(c239)

#define	REG_cvGradientParams            register(c240)
#define	REG_cvGradientColour            register(c241)
#define	REG_cvGradientColourE           register(c242)
#define	REG_ScreenRez                  	register(c243)
#define REG_cfScaleUVs					register(c244)

// for the constants heavy shader instancing
// 4 vectors, c4 to c7
#define REG_cmInstanceVP					register(c4)
#define REG_cvInstanceData					register(c8)
#define REG_cvInstanceWorldSunPosition		register(c9)
#define REG_cvInstanceWorldSunColour		register(c10)
#define REG_cvInstanceWorldAmbientColour	register(c11)
#define REG_cvInstancedFogColour			register(c12)
#define REG_cvInstancedFogValue				register(c13)
#define REG_cvInstanceArray					register(c14)


// Aliased With Light Materials ...

#define REG_cfDrawDepthOfField			register(c230)


#define REG_ciVSMEnabled				register(c)
#define REG_ciShadowMapPCFLevel			register(c)
#define REG_ciShadowMapAlphaEnabled		register(c)
#define REG_ciDoCarShadowMap			register(c)
#define REG_cbIsParallexMapped			register(c)
#define REG_cbDecompressPCA				register(c)

#define REG_DIFFUSE_SAMPLER				register(c)
#define REG_HEIGHTMAP_SAMPLER			register(c)
#define REG_MISCMAP1_SAMPLER			register(c)
#define REG_MISCMAP2_SAMPLER			register(c)
#define REG_MISCMAP3_SAMPLER			register(c)
#define REG_MISCMAP4_SAMPLER			register(c)
#define REG_OPACITY_SAMPLER				register(c)
#define REG_VOLUMEMAP_SAMPLER			register(c)
#define REG_ENVIROMAP_SAMPLER			register(c)
#define REG_NORMALMAP_SAMPLER			register(c)
#define REG_SHADOWMAP_SAMPLER			register(c)
#define REG_SHADOWVOLUME_COLOUR			register(c)
#define REG_SPECULARMAP_SAMPLER			register(c)
#define REG_PCA_COMPONENTS0_SAMPLER		register(c)
#define REG_PCA_COMPONENTS1_SAMPLER		register(c)
#define REG_PCA_COMPONENTS2_SAMPLER		register(c)
#define REG_PCA_COMPONENTS3_SAMPLER		register(c)
#define REG_HEADLIGHT_SAMPLER			register(c)
#define REG_HEADLIGHT_CLIP_SAMPLER		register(c)
#define REG_MIPMAP_GEN_SAMPLER			register(c)





</file>
  <file id="3" path="D:\eax-build1-s09-xenon\Oban\Speed\Xenon\Src\Render\Shaders\hdr.h" time="01c7f8c7-b0f3d1a4">/////////////////////////////////////////////////////////////////////////////////////////
shared float cfMiddleGray				: REG_cfMiddleGray; //MIDDLE_GRAY;		//	The	middle gray	key	value
shared float cfVisualEffectBrightness	: REG_cfVisualEffectBrightness; //VISUAL_EFFECT_BRIGHTNESS;

/////////////////////////////////////////////////////////////////////////////////////////

float GetAdaptedLuminanceFromSampler( sampler samplerLum )
{
	float	fAdaptedLum = tex2D( samplerLum, float2((0.5f), (0.5f)) ).x;

	// clamp lower bound of adaptive lum to middle gray
	fAdaptedLum = max( fAdaptedLum, cfMiddleGray );

	return fAdaptedLum;
}

/////////////////////////////////////////////////////////////////////////////////////////

float GetCombinedBrightness( sampler samplerLum )
{
	float	fLum = GetAdaptedLuminanceFromSampler( samplerLum ),
			fCombinedBrightness;

	fCombinedBrightness = 2 * (cfMiddleGray / (fLum + 0.001f)) * cfVisualEffectBrightness;

	return fCombinedBrightness;
}

/////////////////////////////////////////////////////////////////////////////////////////
</file>
 </files>
 <tool name="FXLite">
  <defines>
   <define name="PLAT_XENON" value="" />
  </defines>
  <arguments>
   <argument name="/Zi" value="false" />
   <argument name="/Vd" value="false" />
   <argument name="/Xu0_deprecated" value="false" />
   <argument name="/Odu_deprecated" value="false" />
   <argument name="/XOd_" value="false" />
   <argument name="/XOu" value="false" />
   <argument name="/Xmaxtempreg" value="0" />
   <argument name="PsSampBase" value="0" />
   <argument name="PsSampCount" value="0" />
   <argument name="VsSampBase" value="0" />
   <argument name="VsSampCount" value="0" />
   <argument name="VsInstCount" value="0" />
   <argument name="PsInstCount" value="0" />
   <argument name="/Od" value="false" />
   <argument name="/Zpr" value="false" />
   <argument name="/Zpc" value="false" />
   <argument name="/Gpp" value="false" />
   <argument name="/Op" value="false" />
   <argument name="/Gfa" value="false" />
   <argument name="/Gfp" value="false" />
   <argument name="/XZc:zeroInit" value="false" />
   <argument name="/XVe" value="false" />
   <argument name="/Xbe:3-" value="false" />
   <argument name="/Xbe:1-" value="false" />
   <argument name="/XQInomaskedexports" value="false" />
   <argument name="/XOautoz" value="false" />
   <argument name="/XfxAv" value="false" />
   <argument name="/XfxAs" value="false" />
   <argument name="/XfxPv" value="false" />
  </arguments>
 </tool>
 <shaders>
  <shader entrypoint="pixel_shader" target="ps_3_0" FxlTechniqueName="hdr_stub" FxlTechnique="0" FxlPassName="p0" FxlPass="0" ZPass="0" pdbHint="4e4a0000-97685adf-c7641129">
   <constanttable>
   </constanttable>
   <sourcemap>
    <statement pc="1" file="0" line="30" scope="-1" lastinstruction="0" />
   </sourcemap>
   <variables>
   </variables>
   <variableDebugInfo>
   </variableDebugInfo>
   <scopes>
   </scopes>
   <funcInfo>
    <function id="0" name="pixel_shader" retID="44">
    </function>
    <function id="1" name="vertex_shader" retID="43">
     <parameter id="42" />
    </function>
    <function id="2" name="GetCombinedBrightness" retID="33">
     <parameter id="32" />
    </function>
    <function id="3" name="GetAdaptedLuminanceFromSampler" retID="30">
     <parameter id="29" />
    </function>
    <function id="4" name="DecodeRGBE8" retID="24">
     <parameter id="23" />
    </function>
    <function id="5" name="EncodeRGBE8" retID="19">
     <parameter id="18" />
    </function>
    <function id="6" name="DeCompressColourSpace" retID="17">
     <parameter id="16" />
    </function>
    <function id="7" name="CompressColourSpace" retID="15">
     <parameter id="14" />
    </function>
    <function id="8" name="ScaleHeadLightIntensity" retID="12">
     <parameter id="11" />
    </function>
    <function id="9" name="CalcVertexColour" retID="9">
     <parameter id="8" />
    </function>
    <function id="10" name="screen_position" retID="7">
     <parameter id="6" />
    </function>
    <function id="11" name="world_position" retID="4">
     <parameter id="3" />
    </function>
   </funcInfo>
   <funcEntryExitInfo>
   </funcEntryExitInfo>
   <VfetchInfo>
   </VfetchInfo>
   <InterpolatorInfo>
   </InterpolatorInfo>
   <LiteralFloats>
   </LiteralFloats>
   <LiteralInts>
   </LiteralInts>
   <LiteralBools>
   </LiteralBools>
  </shader>
  <shader entrypoint="vertex_shader" target="vs_3_0" FxlTechniqueName="hdr_stub" FxlTechnique="0" FxlPassName="p0" FxlPass="0" ZPass="0" pdbHint="4e4a0001-97685adf-c7641129">
   <constanttable>
    <constant register="c24" count="4">
     <type name="cmWorldViewProj" class="matrix_columns" type="float" rows="4" columns="4" />
    </constant>
    <constant register="c137">
     <type name="cvScreenOffset" class="vector" type="float" columns="4" />
    </constant>
   </constanttable>
   <sourcemap>
    <statement pc="3" file="0" line="23" scope="-1" lastinstruction="0" />
    <statement pc="0.1" file="0" line="23" scope="-1" lastinstruction="0" />
    <statement pc="4" file="1" line="20" scope="-1" lastinstruction="0" />
    <statement pc="5" file="1" line="20" scope="-1" lastinstruction="0" />
    <statement pc="6" file="1" line="21" scope="-1" lastinstruction="0" />
    <statement pc="7" file="1" line="21" scope="-1" lastinstruction="0" />
    <statement pc="8" file="1" line="21" scope="-1" lastinstruction="0" />
    <statement pc="9" file="0" line="25" scope="-1" lastinstruction="0" />
    <statement pc="1.1" file="0" line="25" scope="-1" lastinstruction="0" />
    <statement pc="2.0" file="0" line="25" scope="-1" lastinstruction="0" />
   </sourcemap>
   <variables>
   </variables>
   <variableDebugInfo>
   </variableDebugInfo>
   <scopes>
   </scopes>
   <funcInfo>
    <function id="0" name="pixel_shader" retID="44">
    </function>
    <function id="1" name="vertex_shader" retID="43">
     <parameter id="42" />
    </function>
    <function id="2" name="GetCombinedBrightness" retID="33">
     <parameter id="32" />
    </function>
    <function id="3" name="GetAdaptedLuminanceFromSampler" retID="30">
     <parameter id="29" />
    </function>
    <function id="4" name="DecodeRGBE8" retID="24">
     <parameter id="23" />
    </function>
    <function id="5" name="EncodeRGBE8" retID="19">
     <parameter id="18" />
    </function>
    <function id="6" name="DeCompressColourSpace" retID="17">
     <parameter id="16" />
    </function>
    <function id="7" name="CompressColourSpace" retID="15">
     <parameter id="14" />
    </function>
    <function id="8" name="ScaleHeadLightIntensity" retID="12">
     <parameter id="11" />
    </function>
    <function id="9" name="CalcVertexColour" retID="9">
     <parameter id="8" />
    </function>
    <function id="10" name="screen_position" retID="7">
     <parameter id="6" />
    </function>
    <function id="11" name="world_position" retID="4">
     <parameter id="3" />
    </function>
   </funcInfo>
   <funcEntryExitInfo>
   </funcEntryExitInfo>
   <VfetchInfo>
    <vfetch Address="3" Register="1" DestSwizzle="xyzw" Semantic="0x00" End="false" />
   </VfetchInfo>
   <InterpolatorInfo>
   </InterpolatorInfo>
   <LiteralFloats>
   </LiteralFloats>
   <LiteralInts>
   </LiteralInts>
   <LiteralBools>
   </LiteralBools>
  </shader>
 </shaders>
</shader-pdb>
