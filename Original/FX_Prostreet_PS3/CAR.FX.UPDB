<?xml version="1.0" encoding="utf-8"?>
<shader-pdb pdbHint="4e4a0010-08362a8e-aef0f5b7" version="6132">
 <files>
  <file id="0" path="D:\eax-build1-s09-xenon\Oban\Speed\Xenon\Src\Render\Shaders\car.fx" time="01c7f8c7-b0de5c71"> //
// Car Effects
//
#include "global.h"
#include "hdr.h"

shared float4x4 cmWorldMat				: REG_cmWorldMat;				// WORLD
shared float4x4 cmWorldView				: REG_cmWorldView;				// WORLDVIEW

shared float4	cmLocalDirectionMatrix[4]	: REG_cmLocalDirectionMatrix;	// LOCALDIRECTIONMATRIX;
shared float4	cmLocalColourMatrix[4]		: REG_cmLocalColourMatrix;		// LOCALCOLOURMATRIX;

shared float4	cvLocalLightVec			: REG_cvLocalLightVec;			// LOCALLIGHTDIRVECTOR;

// Light Material
shared float4	cvSpecularMin			: REG_cvSpecularMin;			// SPECULARMIN;
shared float4	cvSpecularRange			: REG_cvSpecularRange;			// SPECULARRANGE;

shared float4	cvVinylScales			: REG_cvVinylScales;			// xyz  = Diffuse, Spec, Env lighting scale amounts

shared float4x4 camBlendMatrices[16]	: REG_camBlendMatrices;			// BLENDMATRICES;

sampler DIFFUSE_SAMPLER = sampler_state
{
	AddressU = WRAP;
	AddressV = WRAP;
	MIPFILTER = LINEAR;
	MINFILTER = LINEAR;
	MAGFILTER = LINEAR;
};

sampler	NORMALMAP_SAMPLER = sampler_state
{
	AddressU = WRAP;
	AddressV = WRAP;
	MIPFILTER =	NONE;
	MINFILTER =	LINEAR;
	MAGFILTER =	LINEAR;
};

sampler3D VOLUMEMAP_SAMPLER = sampler_state
{
    AddressU  = WRAP;        
    AddressV  = WRAP;
    AddressW  = WRAP;
	MIPFILTER = POINT;
	MINFILTER = POINT;
	MAGFILTER = POINT;
};

samplerCUBE ENVIROMAP_SAMPLER = sampler_state
{
 	AddressU = MIRROR;
 	AddressV = MIRROR;
	MIPFILTER = LINEAR;
	MINFILTER = LINEAR;
	MAGFILTER = LINEAR;
};

#include "shadowmap_fx_def.h"
#include "car.h"
#include "carx.h"

float4 PS_HighLOD(const PS_INPUT IN) : COLOR0
{
	return PS_CarHighLOD(IN);
}

float4 PS_LowLOD(const PS_INPUT_LOD IN) : COLOR0
{
	return PS_CarLowLOD_360(IN);
}

technique NoMatrixPalette&lt;int shader = 1;&gt;
{
    pass p0
    {
    
		VertexShader = compile vs_3_0 VS_CarHighLOD(false);
		PixelShader  = compile ps_3_0 PS_HighLOD();
    }
}

technique MatrixPalette&lt;int shader = 2;&gt;
{
    pass p0
    {
// 		VertexShader = compile vs_3_0 VS_CarLowLOD_360(true);
// 		PixelShader  = compile ps_3_0 PS_LowLOD();
		VertexShader = compile vs_3_0 VS_CarHighLOD(true);
		PixelShader  = compile ps_3_0 PS_HighLOD();
    }
}

#include "ZPrePass_fx.h"
#include "shadowmap_fx.h"
</file>
  <file id="1" path="D:\eax-build1-s09-xenon\Oban\Speed\Xenon\Src\Render\Shaders\global.h" time="01c7f8c7-b0ef0cee">#ifndef GLOBAL_H
#define GLOBAL_H

#include "registermap.h"   

// Defined out for the Xbox360 - only needed on the PC
#define DECLARE_TEXTURE(texture)	
#define ASSIGN_TEXTURE(texture)	
#define DECLARE_MINFILTER(default_filter)			 MINFILTER = default_filter;
#define DECLARE_MAGFILTER(default_filter)			 MAGFILTER = default_filter;
#define DECLARE_MIPFILTER(default_filter)			 MIPFILTER = default_filter;

/////////////////////////////////////////////////////////////////////////////////////////
float4x4	cmWorldViewProj			: REG_cmWorldViewProj; //WORLDVIEWPROJECTION ;
float4		cvScreenOffset			: REG_cvScreenOffset; //SCREENOFFSET;
float4		cvVertexPowerBrightness : REG_cvVertexPowerBrightness;

float4 world_position( float4 screen_pos )
{
 	float4 p = mul(screen_pos, cmWorldViewProj);  
	p.xy += cvScreenOffset.xy * p.w;
    return p;
}

float4 screen_position( float4 screen_pos )
{
	screen_pos.xy += cvScreenOffset.xy;
    return screen_pos;
}

float4 CalcVertexColour(float4 colour)
{
	float4 result = pow(colour, cvVertexPowerBrightness.x) * cvVertexPowerBrightness.y;
	result.w = colour.w;
	return result;
}

float3 ScaleHeadLightIntensity(float3 colour) 
{
	float3 result = colour * cvVertexPowerBrightness.z;
	return result;
}



/////////////////////////////////////////////////////////////////////////////////////////
// HDR Colour Space compression
//
// Convert to a log or psudeo-log colour space to save high dynamic range data
/////////////////////////////////////////////////////////////////////////////////////////
#define kCompressCoeff ( 1.0f )
float3 CompressColourSpace(float3 colour)
{
	return colour / (kCompressCoeff+colour);
}

float3 DeCompressColourSpace(float3 colour)
{
	return colour / (kCompressCoeff-colour);
}


/////////////////////////////////////////////////////////////////////////////////////////
// RGBE8 Encoding/Decoding
// The RGBE8 format stores a mantissa per color channel and a shared exponent 
// stored in alpha. Since the exponent is shared, it's computed based on the
// highest intensity color component. The resulting color is RGB * 2^Alpha,
// which scales the data across a logarithmic scale.
/////////////////////////////////////////////////////////////////////////////////////////

float4 EncodeRGBE8( in float3 rgb )	  
{
	float4 vEncoded;

    // Determine the largest color component
	float maxComponent = max( max(rgb.r, rgb.g), rgb.b );
	
	// Round to the nearest integer exponent
	float fExp = ceil( log2(maxComponent) );

    // Divide the components by the shared exponent
	vEncoded.rgb = rgb / exp2(fExp);
	
	// Store the shared exponent in the alpha channel
	vEncoded.a = (fExp + 128) / 255;

	return vEncoded;
}

/////////////////////////////////////////////////////////////////////////////////////////

float3 DecodeRGBE8( in float4 rgbe )
{
	float3 vDecoded;

    // Retrieve the shared exponent
	float fExp = rgbe.a * 255 - 128;
	
	// Multiply through the color components
	vDecoded = rgbe.rgb * exp2(fExp);
	
	return vDecoded;
}

/////////////////////////////////////////////////////////////////////////////////////////
#endif</file>
  <file id="2" path="D:\eax-build1-s09-xenon\Oban\Speed\Xenon\Src\Render\Shaders\registermap.h" time="01c7f8c7-b0d997bb">
// ------------------------------------------------------------------------------------------------------------------------------------------

#define CONSTANT_RESERVED_DO_NOT_USE			(0)		/* 4 vectors [c0,c3] */

// ------------------------------------------------------------------------------------------------------------------------------------------

#define REG_RESERVED_DO_NOT_USE			register(c0)	/* 4 vectors [c0,c3] */

#define REG_cmWorldMat					register(c4)	/* 4 vectors [c0,c3] */
#define REG_cmWorldMatTranspose			register(c8)	/* 4 vectors [c4,c7] */
#define REG_cmWorldView					register(c12)	/* 4 vectors [c8,c11] */
#define REG_cmShadowMapWVP				register(c16)	/* 4 vectors [c12,c15] */
#define REG_cmLightWVP					register(c20)	/* 4 vectors [c16,c19] */
#define REG_cmWorldViewProj				register(c24)	/* 4 vectors [c20,c23] */
#define REG_cmPrevWorldViewProj			register(c28)	/* 4 vectors [c24,c27] */
#define REG_cvLocalEyePos				register(c32)	/* 1 vecotr	 [c32] */
#define REG_cvLocalLightVec				register(c33)	/* 1 vecotr	 [c33] */
#define REG_cfSkyDomeRotation			register(c34)	/* 1 vecotr	 [c34] */

#define REG_cmLocalColourMatrix			register(c36)	/* 4 vectors [c36,c39] */
#define REG_cmLocalDirectionMatrix		register(c40)	/* 4 vectors [c40,c43] */
#define REG_cmLocalPositionMatrix		register(c44)	/* 4 vectors [c44,c47] */
#define REG_cavHarmonicCoeff			register(c48)	/* 10 floats, 3 vectors, 1 pad vector [48,51] */

#define REG_camBlendMatrices			register(c52)	/* 16 vectors [c52,c67] */
#define REG_cavWorldHeadlightDirection	register(c68)	/* 2 vectors [c68,c69] */
#define REG_cavWorldHeadlightPosition	register(c70)	/* 2 vectors [c70,c71] */
#define REG_cavWorldHeadlightUpDirection register(c72)	/* 2 vectors [c72,c73] */

#define REG_cmShadowMapVP				register(c68) // note clash with head light
#define REG_cmShadowMapBiasMatrix		register(c72)	/* 4 vectors [c72, c75] */



#define REG_cvWorldSunColour			register(c79)
#define REG_cvWorldAmbientColour		register(c80)

// available: [c82,c115] (but would alias cavPcaWeightsR and cavPcaWeightsG)
// PCA/UCap parameters (ucap.fx, water.fx)
#define REG_cafPcaMean					register(c81)	/* 1 vector */
#define REG_cavPcaWeightsR				register(c82)	/* 22 vectors [c82,c103] */
#define REG_cavPcaWeightsG				register(c104)	/* 22 vectors [c104,c125] */
#define REG_cavPcaWeightsB				register(c126)	/* 22 vectors [c126,c147] */
#define REG_cavPcaWeightsX				register(c148)	/* 8 vectors [c148,c155] */
#define REG_cavPcaWeightsY				register(c156)	/* 8 vectors [c156,c163] */
#define REG_cavPcaWeightsZ				register(c164)	/* 8 vectors [c164,c171] */
#define REG_cavPcaWeightsNX				register(c172)	/* 8 vectors [c172,c179] */
#define REG_cavPcaWeightsNY				register(c180)	/* 8 vectors [c180,c187] */
#define REG_cavPcaWeightsNZ				register(c188)	/* 8 vectors [c188,c195] */
#define REG_cavFeatureHeights			register(c196)	/* 1 vector */


// The following parameters alias cavPcaWeightsG:
#define REG_cfMipMapBias				register(c116)
#define REG_cfBrightness				register(c117)
#define REG_cfSurfaceReflection			register(c118)
#define REG_cfRainIntensity				register(c119)
#define REG_cfSpecularPower				register(c120)
#define REG_cfMetallicScale				register(c121)
#define REG_cfEnvmapPullAmount			register(c122)
#define REG_cfEnvmapPower				register(c123)
#define REG_PAD2						register(c125)

// The following parameters alias cavPcaWeightsB:
#define REG_cfCombinedBrightness		register(c126)
#define REG_cvVisualEffectFadeColour	register(c127)	/* also aliases cfSkyAlphaTag */
#define REG_cfSkyAlphaTag				register(c127)	/* also aliases cvVisualEffectFadeColour */
#define REG_cfShadowVolumeOffset		register(c128)
#define REG_cfRVMWorldBrightness		register(c129)
#define REG_cfDesaturation				register(c130)
#define REG_cfBloomScale				register(c131)
#define REG_cfSplitScreenUVScale		register(c132)
#define REG_cfColourCubeFilterBlend		register(c133)
#define REG_cfTimeTicker				register(c134)
#define REG_cfMiddleGray				register(c135)
#define REG_cfBrightPassThreshold		register(c136)

#define REG_cvScreenOffset				register(c137)
#define REG_cvFog_Br_Plus_Bm			register(c138)
#define REG_cvFog_One_Over_BrBm			register(c139)
#define REG_cvFog_Const_1				register(c140)
#define REG_cvFog_Const_2				register(c141)
#define REG_cvFog_Const_3				register(c142)
#define REG_cvAmbientColour				register(c143)
#define REG_cvShadowParams0				register(c144)
#define REG_cvShadowParams1				register(c145)


// The following parameters alias cavPcaWeightsX:
#define REG_cvDiffuseColour				register(c148)
#define REG_cvSpecularColour			register(c149)
// available: [c150,c155] (but would alias cavPcaWeightsX)

// The following parameters alias cavPcaWeightsY:
#define REG_cvShadowColour				register(c156)
#define REG_cvTextureOffset				register(c161)
#define REG_cvLocalCenter				register(c162)
#define REG_cvTreeParams				register(c163)

// The following parameters alias cavPcaWeightsZ:
#define REG_cvBaseAlphaRef				register(c164)
#define REG_cvCloudIntensity			register(c165)
#define REG_cvLocalLightPos				register(c166)
#define REG_cvPixelizationScale			register(c167)
#define REG_cvGrassColour				register(c169)

// The following parameters alias cavPcaWeightsNX:
#define REG_cvDepthOfFieldParams		register(c172)	/* aliases cavFeatureHeights */
#define REG_cvBlurParams				register(c173)
// The following parameters alias cavPcaWeightsNX and cavPcaWeightsNY:
#define REG_cavSampleOffsetWeights		register(c174)	/* 16 vectors [c174,c189] */

#define REG_PAD0						register(c190)	/* free space!! */

#define REG_cvFogValue					register(c206)
#define REG_cvFogColour					register(c207)
#define REG_cfSkyFogFalloff				register(c208)
#define REG_cfLightMapVertColBlend		register(c209)

#define REG_cvLightColour				register(c210)
#define REG_cvLightPosition				register(c211)

#define REG_cvLightDirection			register(c212)
#define REG_cfShadowMapEnabled			register(c213)
#define REG_cfVSMEnabled				register(c214)
#define REG_cfReceiveShadow				register(c215)

#define REG_cvVertexPowerBrightness		register(c216)

#define REG_cfFogEnable					register(c240)



// Light Material Registers - alias REG_cavLightDirections

#define REG_cvDiffuseMin				register(c228)
#define REG_cvDiffuseRange				register(c229)
#define REG_cvEnvmapMin					register(c230)
#define REG_cvEnvmapRange				register(c231)
#define REG_cvSpecularMin				register(c232)
#define REG_cvSpecularRange				register(c233)
#define REG_cvSpecular1Min				register(c234)
#define REG_cvSpecular1Range			register(c235)
#define REG_cvPowers					register(c236)
#define REG_cvClampAndScales			register(c237)
#define REG_cvFlakes					register(c238)
#define REG_cvVinylScales				register(c239)

#define	REG_cvGradientParams            register(c240)
#define	REG_cvGradientColour            register(c241)
#define	REG_cvGradientColourE           register(c242)
#define	REG_ScreenRez                  	register(c243)
#define REG_cfScaleUVs					register(c244)

// for the constants heavy shader instancing
// 4 vectors, c4 to c7
#define REG_cmInstanceVP					register(c4)
#define REG_cvInstanceData					register(c8)
#define REG_cvInstanceWorldSunPosition		register(c9)
#define REG_cvInstanceWorldSunColour		register(c10)
#define REG_cvInstanceWorldAmbientColour	register(c11)
#define REG_cvInstancedFogColour			register(c12)
#define REG_cvInstancedFogValue				register(c13)
#define REG_cvInstanceArray					register(c14)


// Aliased With Light Materials ...

#define REG_cfDrawDepthOfField			register(c230)


#define REG_ciVSMEnabled				register(c)
#define REG_ciShadowMapPCFLevel			register(c)
#define REG_ciShadowMapAlphaEnabled		register(c)
#define REG_ciDoCarShadowMap			register(c)
#define REG_cbIsParallexMapped			register(c)
#define REG_cbDecompressPCA				register(c)

#define REG_DIFFUSE_SAMPLER				register(c)
#define REG_HEIGHTMAP_SAMPLER			register(c)
#define REG_MISCMAP1_SAMPLER			register(c)
#define REG_MISCMAP2_SAMPLER			register(c)
#define REG_MISCMAP3_SAMPLER			register(c)
#define REG_MISCMAP4_SAMPLER			register(c)
#define REG_OPACITY_SAMPLER				register(c)
#define REG_VOLUMEMAP_SAMPLER			register(c)
#define REG_ENVIROMAP_SAMPLER			register(c)
#define REG_NORMALMAP_SAMPLER			register(c)
#define REG_SHADOWMAP_SAMPLER			register(c)
#define REG_SHADOWVOLUME_COLOUR			register(c)
#define REG_SPECULARMAP_SAMPLER			register(c)
#define REG_PCA_COMPONENTS0_SAMPLER		register(c)
#define REG_PCA_COMPONENTS1_SAMPLER		register(c)
#define REG_PCA_COMPONENTS2_SAMPLER		register(c)
#define REG_PCA_COMPONENTS3_SAMPLER		register(c)
#define REG_HEADLIGHT_SAMPLER			register(c)
#define REG_HEADLIGHT_CLIP_SAMPLER		register(c)
#define REG_MIPMAP_GEN_SAMPLER			register(c)





</file>
  <file id="3" path="D:\eax-build1-s09-xenon\Oban\Speed\Xenon\Src\Render\Shaders\hdr.h" time="01c7f8c7-b0f3d1a4">/////////////////////////////////////////////////////////////////////////////////////////
shared float cfMiddleGray				: REG_cfMiddleGray; //MIDDLE_GRAY;		//	The	middle gray	key	value
shared float cfVisualEffectBrightness	: REG_cfVisualEffectBrightness; //VISUAL_EFFECT_BRIGHTNESS;

/////////////////////////////////////////////////////////////////////////////////////////

float GetAdaptedLuminanceFromSampler( sampler samplerLum )
{
	float	fAdaptedLum = tex2D( samplerLum, float2((0.5f), (0.5f)) ).x;

	// clamp lower bound of adaptive lum to middle gray
	fAdaptedLum = max( fAdaptedLum, cfMiddleGray );

	return fAdaptedLum;
}

/////////////////////////////////////////////////////////////////////////////////////////

float GetCombinedBrightness( sampler samplerLum )
{
	float	fLum = GetAdaptedLuminanceFromSampler( samplerLum ),
			fCombinedBrightness;

	fCombinedBrightness = 2 * (cfMiddleGray / (fLum + 0.001f)) * cfVisualEffectBrightness;

	return fCombinedBrightness;
}

/////////////////////////////////////////////////////////////////////////////////////////
</file>
  <file id="4" path="D:\eax-build1-s09-xenon\Oban\Speed\Xenon\Src\Render\Shaders\shadowmap_fx_def.h" time="01c7f8c7-b0ffbd6b">/////////////////////////////////////////////////////////////////////////////////////////
#include "shadowenum.h"

shared float4x4	cmShadowMapWVP			: REG_cmShadowMapWVP;
shared float4x4	cmShadowMapVP			: REG_cmShadowMapVP;
shared float4x4 cmLightWVP				: REG_cmLightWVP;
shared float4x4 cmShadowMapBiasMatrix	: REG_cmShadowMapBiasMatrix;
shared float4	cvLightDirection		: REG_cvLightDirection;

shared float4 cvAmbientColour			: REG_cvAmbientColour;
shared float4 cvShadowParams0			: REG_cvShadowParams0;
shared float4 cvShadowParams1			: REG_cvShadowParams1;

shared float cfShadowMapEnabled			: REG_cfShadowMapEnabled;
shared float cfVSMEnabled				: REG_cfVSMEnabled;	
shared float cfReceiveShadow			: REG_cfReceiveShadow;


#define	cfShadowMapAlphaMin cvShadowParams0.x
#define	cfShadowMapBiasA	cvShadowParams0.y
#define	cfShadowMapBiasB	cvShadowParams0.z
#define	cfVSMEpsilon		cvShadowParams0.w

#define	ShadowMapNdotLBiasOffset	cvShadowParams1.x
#define	ShadowMapNdotLBiasScale		cvShadowParams1.y
#define	ShadowMapVSMThreshold		cvShadowParams1.z
#define	ShadowMapWingMirrorBias		cvShadowParams1.w

#define SHADOWMAP_C1				0.2f
#define SHADOWMAP_C2				0.1f

//#define cfShadowMapScaleY	cvShadowParams1.w


//#define ENABLE_SHADOW_STENCIL_MASK
//#define SHADOW_LOD_ON

#define USE_SHADOW_OPTIMIZED

/////////////////////////////////////////////////////////////////////////////////////////

sampler SHADOWMAP_SAMPLER = sampler_state
{
	BorderColor = 0xFFFFFFFF;
	AddressU    = BORDER;
	AddressV    = BORDER;
	MIPFILTER   = NONE; //POINT;
	MINFILTER   = POINT;
	MAGFILTER   = POINT;
};

/////////////////////////////////////////////////////////////////////////////////////////

struct PS_INPUT_LISPSM
{
	float4 position		: POSITION;
};

/////////////////////////////////////////////////////////////////////////////////////////

struct PS_INPUT_LISPSM_ALPHA
{
	float4 position		: POSITION;
	float4 diffuse_tex	: TEXCOORD0;
	//float4 light_tex	: TEXCOORD1;
};

/////////////////////////////////////////////////////////////////////////////////////////

struct PS_OUTPUT_LISPSM
{
	float4 color		: COLOR0;
	//	float depth			: DEPTH0;
};

/////////////////////////////////////////////////////////////////////////////////////////

struct PS_INPUT_TSM
{
	float4 position		: POSITION;
	float4 light_tex	: TEXCOORD1;
};

/////////////////////////////////////////////////////////////////////////////////////////

struct PS_INPUT_TSM_ALPHA
{
	float4 position		: POSITION;
	float4 diffuse_tex	: TEXCOORD0;
	float4 light_tex	: TEXCOORD1;
};

/////////////////////////////////////////////////////////////////////////////////////////

struct PS_OUTPUT_TSM
{
	float4 color		: COLOR0;
	float depth			: DEPTH0;
};

/////////////////////////////////////////////////////////////////////////////////////////

float4 VertexShadowTex( const float4 v_position )
{
	return mul( v_position, cmShadowMapWVP );
}

float4 VertexShadowTexOptimized( const float4 v_position, float ndotl, out float shadow_fade)
{
	float4 shadow_tex		= mul( v_position, cmShadowMapWVP );

#ifdef USE_SHADOW_OPTIMIZED

	// bias
//	shadow_tex.z			= shadow_tex.z / shadow_tex.w - ShadowMapNdotLBiasOffset - ShadowMapNdotLBiasScale * (1.0f - max(SHADOWMAP_C2, saturate(ndotl)));
	// edge attenuation
	float2 edgeAttenuation = shadow_tex.xy / shadow_tex.w;
	edgeAttenuation = saturate(1 - pow(edgeAttenuation,4));
	shadow_fade	= 1 - edgeAttenuation.x * edgeAttenuation.y;
#else
	shadow_fade = 0;
#endif

	return shadow_tex;
}

/////////////////////////////////////////////////////////////////////////////////////////
/*
float4 VertexLightTex( const float4 v_position )
{
return mul( v_position, cmLightWVP );
}
*/
/////////////////////////////////////////////////////////////////////////////////////////

float4 VertexShadowPosView( const float4 v_position )
{
	// Transform position to view space
	return mul( v_position, cmWorldView );
}

/////////////////////////////////////////////////////////////////////////////////////////

float2 GetShadowMapTexCoord( const float4 s_tex )
{
	float2	shadow_tex_c = (0.5 * s_tex.xy / s_tex.w) + 0.5f;

	shadow_tex_c.y = 1.0f - shadow_tex_c.y;

	return shadow_tex_c;
}

/////////////////////////////////////////////////////////////////////////////////////////

float4 Tex2DOffset( sampler2D ss, float2 uv, float2 offset )
{
	float4 result;
	float offsetx = offset.x;
	float offsety = offset.y;

	asm {
		tfetch2D result, uv, ss, OffsetX=offsetx, OffsetY=offsety
	};

	return result;
}

float DoShadowPCFDepth( const float2 shadow_lookup_uv, const float shadow_bias, const float shadow_fade, const int shadowDetail)
{
	float stepSize = 1.0f;
	float cornerStepSize = 0.5f;

	// Center tap
	float sum = Tex2DOffset( SHADOWMAP_SAMPLER, shadow_lookup_uv, float2(  0,  0 ) ).r; 
	sum = step( shadow_bias, sum );

	//
	// Default 9 tap PCF for anything greater than the low detail
	//
	if(shadowDetail != ShadowShaderDetail_LOW)	// const if-statement compiled out at compile time
	{
		// Top, right, bottom and left taps
		float4 first_group = 0;
		first_group.x = Tex2DOffset( SHADOWMAP_SAMPLER, shadow_lookup_uv, float2( -stepSize, 0 ) ).r; 
		first_group.y = Tex2DOffset( SHADOWMAP_SAMPLER, shadow_lookup_uv, float2( stepSize,  0 ) ).r; 
		first_group.z = Tex2DOffset( SHADOWMAP_SAMPLER, shadow_lookup_uv, float2( 0,  stepSize ) ).r; 
		first_group.w = Tex2DOffset( SHADOWMAP_SAMPLER, shadow_lookup_uv, float2(  0, -stepSize ) ).r; 

		// 4 Corner taps
		float4 second_group = 0;
		second_group.x = Tex2DOffset( SHADOWMAP_SAMPLER, shadow_lookup_uv, float2(  cornerStepSize,  cornerStepSize) ).r; 
		second_group.y = Tex2DOffset( SHADOWMAP_SAMPLER, shadow_lookup_uv, float2(  cornerStepSize, -cornerStepSize ) ).r; 
		second_group.z = Tex2DOffset( SHADOWMAP_SAMPLER, shadow_lookup_uv, float2(  -cornerStepSize, cornerStepSize ) ).r; 
		second_group.w = Tex2DOffset( SHADOWMAP_SAMPLER, shadow_lookup_uv, float2(  -cornerStepSize, -cornerStepSize ) ).r; 

		first_group = step( shadow_bias, first_group );
		second_group = step( shadow_bias, second_group );

		sum += dot(first_group, first_group);
		sum += dot(second_group, second_group);
		sum /= 9.0;
	}

	return (shadow_fade + sum);
}

float DoShadow( const float4 shadow_tex, const float ndotl, int shadowDetail = ShadowShaderDetail_HIGH)
{
	float adjusted_ndotl	= max(SHADOWMAP_C2, saturate(ndotl));


	float2 edgeAttenuation = shadow_tex.xy / shadow_tex.w;
	edgeAttenuation = saturate(1 - pow(edgeAttenuation,4));
	float2 shadow_uv		= GetShadowMapTexCoord( shadow_tex );
	float  shadow_biased	= ( shadow_tex.z / shadow_tex.w ) - ShadowMapNdotLBiasOffset - ShadowMapNdotLBiasScale * (1.0f - adjusted_ndotl);
	float  shadow_fade		= 1 - edgeAttenuation.x * edgeAttenuation.y;

	float fv =  DoShadowPCFDepth( shadow_uv, shadow_biased, shadow_fade, shadowDetail);


	if(shadowDetail != ShadowShaderDetail_LOW)	// const if-statement compiled out at compile time
	{
		fv = saturate(lerp(0.0f, fv, saturate((adjusted_ndotl - SHADOWMAP_C2)/(SHADOWMAP_C1 - SHADOWMAP_C2))) + (1.0 - cfShadowMapEnabled));
	}

	return fv;
}


float DoShadowOptimized( const float4 shadow_tex, const float ndotl, float shadow_fade, int shadowDetail = ShadowShaderDetail_HIGH)
{
	float adjusted_ndotl	= max(SHADOWMAP_C2, saturate(ndotl));

#ifdef USE_SHADOW_OPTIMIZED
	float2 shadow_uv		= GetShadowMapTexCoord( shadow_tex );
	//float  shadow_biased	= shadow_tex.z;
	float  shadow_biased	= ( shadow_tex.z / shadow_tex.w ) - ShadowMapNdotLBiasOffset - ShadowMapNdotLBiasScale * (1.0f - adjusted_ndotl);
#else
	float2 edgeAttenuation = shadow_tex.xy / shadow_tex.w;
	edgeAttenuation = saturate(1 - pow(edgeAttenuation,4));
	float2 shadow_uv		= GetShadowMapTexCoord( shadow_tex );
	float  shadow_biased	= ( shadow_tex.z / shadow_tex.w ) - ShadowMapNdotLBiasOffset - ShadowMapNdotLBiasScale * (1.0f - adjusted_ndotl);
	shadow_fade		= 1 - edgeAttenuation.x * edgeAttenuation.y;

#endif
	float fv =  DoShadowPCFDepth( shadow_uv, shadow_biased, shadow_fade, shadowDetail);

	if(shadowDetail != ShadowShaderDetail_LOW)	// const if-statement compiled out at compile time
	{
		fv = saturate(lerp(0.0f, fv, saturate((adjusted_ndotl - SHADOWMAP_C2)/(SHADOWMAP_C1 - SHADOWMAP_C2))) + (1.0 - cfShadowMapEnabled));
	}

	return fv;
}

/////////////////////////////////////////////////////////////////////////////////////////


float DoShadowCar( const float4 shadow_tex, const float ndotl, int shadowDetail = ShadowShaderDetail_HIGH )
{
	return DoShadow(shadow_tex, ndotl);
}

</file>
  <file id="5" path="D:\eax-build1-s09-xenon\Oban\Speed\Indep\Src\Render\Shaders\shadowenum.h" time="01c7f8bf-7e400889">#ifndef SHADOWENUM_H
#define SHADOWENUM_H

// these numbers should match up with the enumerations in ShadowShaderDetail in eEffect.hpp
// (should make these in a header thats included by both fxc and the game compiler)
static const int ShadowShaderDetail_OFF = 0;
static const int ShadowShaderDetail_LOW = 1;
static const int ShadowShaderDetail_MEDIUM = 2;
static const int ShadowShaderDetail_HIGH = 3;

#endif
</file>
  <file id="6" path="D:\eax-build1-s09-xenon\Oban\Speed\Xenon\Src\Render\Shaders\car.h" time="01c7f8c7-b0e0becc">
#ifndef CAR_SH_H
#define CAR_SH_H

#define CAR_SHADER

#if !defined(NO_FOG)
#include "fog.h"
#endif

struct VS_INPUT
{
	float4 position : POSITION;
	float4 normal   : NORMAL;
	float4 tangent	: TANGENT;
	float4 color    : COLOR;
	float4 tex		: TEXCOORD;
};

struct PS_INPUT
{
	float4	position			: POSITION;		// xyzw

	float4  diffuse				: COLOR0;		// rgba = full diffuse colour
	float4  envmap_scale		: COLOR1;		// rgb  = envmap scale colour	a   = light luminance

	float4  uv_occ_bias			: TEXCOORD0;	// xy   = st					zw  = ambient occ, bias
	float4  noise_dmg			: TEXCOORD1;	// xyz	= noise texcoords		w	= damage level

	float4	shadow_tex			: TEXCOORD2;

	float4  view				: TEXCOORD4;	// xyz  = view dir	 			w   = metallic fleck amount

	float4	normal				: TEXCOORD5;    //								w   = env scale amount (0.1 or 1.0)

#ifdef USE_TANGENT
	float4  tangent             : TEXCOORD6;
#endif

	// It's to bad we don't have any more interpolater's I can pack this fog float into
#if !defined(NO_FOG)
	float   fog					: FOG;
#endif
};

struct PS_INPUT_LOD
{
	float4	position			: POSITION;		// xyzw

	float4  diffuse				: COLOR0;		// rgba = full diffuse colour
	float4  envmap_scale		: COLOR1;		// rgb  = envmap scale colour	a   = light luminance

	float4  uv_occ_bias			: TEXCOORD0;	// xy   = st					zw  = ambient occ, bias

#ifndef USE_TANGENT
	float4  reflection			: TEXCOORD1;	// xyz  = reflection dir	 	w   = metallic fleck amount
#endif

#ifdef USE_TANGENT
	float4  normal				: TEXCOORD2;
	float4  tangent             : TEXCOORD3;
	float4  view_direction		: TEXCOORD4;
#endif

	// It's to bad we don't have any more interpolater's I can pack this fog float into
#if !defined(NO_FOG)
	float   fog					: FOG;
#endif
};

struct PS_INPUT1
{
	float4	position			: POSITION;		// xyzw
	float4  diffuse_colour		: COLOR0;		// rgba = full diffuse colour
	float4  envmap_scale		: COLOR1;		// rgb  = envmap scale colour	a   = light luminance
	float4  tex_base			: TEXCOORD0;	// xy   = st					z = env scale, w  = &lt;free&gt;
	float4  reflection			: TEXCOORD1;	// xyz  = relfection			w   = 0.0
};

void GetMatrix(const VS_INPUT IN, out float4x4 result, out float2 uv_damage)
{
	// retrieve matrix plate index: 16 entries, 15.1 multplier to offset floating point inaccuracy
	int index = IN.color.z * 15.1;  

	result = camBlendMatrices[index];

	// clear damage contex information
	result[2].w = 0; 
	result[3].w = 1;

	uv_damage.x = camBlendMatrices[index][3].w;		// scale
	uv_damage.y = camBlendMatrices[index][2].w;		// shift
}

float GetPixelDamage(const VS_INPUT IN)
{
	return IN.position.w;
}
	
float4 GetLocalPosition(const VS_INPUT IN)
{
	return float4(IN.position.xyz, 1);
}

float4 GetLocalPosition(const VS_INPUT IN, float4x4 tm)
{
	return mul(float4(IN.position.xyz, 1), tm);
}

float3 GetLocalNormal(const VS_INPUT IN)
{
	return IN.normal.xyz;
}

float3 GetLocalNormal(const VS_INPUT IN, float4x4 tm)
{
	return mul(IN.normal.xyz, tm);
}

float4 GetLocalTangent(const VS_INPUT IN)
{
	float4 t;

	t.xyz = IN.tangent.xyz;
	t.w = IN.tangent.w;

	return t;
}

float4 GetLocalTangent(const VS_INPUT IN, float4x4 tm)
{
	float4 t;
	
	t.xyz = mul(IN.tangent.xyz, tm);
	t.w = IN.tangent.w;

	return t;
}

float3 GetLocalBinormal(const VS_INPUT IN)
{
	float3 n = normalize(IN.normal.xyz);
	float3 t = normalize(IN.tangent.xyz);
	float3 b = cross(n, t) * IN.tangent.w;

	return b;
}

void ReadPositionNormalTangent(const VS_INPUT IN, bool palette, 
                               out float4 position, out float3 normal, out float4 tangent, out float2 uv_damage)
{
	// compile time IF 
	if (palette)
	{
		float4x4 tm;
		
		GetMatrix(IN, tm, uv_damage);

		position = GetLocalPosition(IN, tm);
		normal = GetLocalNormal(IN, tm);
		tangent = GetLocalTangent(IN, tm);
	}
	else
	{
		position = GetLocalPosition(IN);
		normal = GetLocalNormal(IN);
		tangent = GetLocalTangent(IN);
		uv_damage = float2(1, 0); // x=scale, y=shift
	}
}

float3 CalculateShaperRigDiffuse(float3 normal, float4 shadow_uv, out float shadow, bool do_shadows = false)
{
	float3 diffuse;

	// key light 
	float d = saturate(dot(cmLocalDirectionMatrix[0].xyz, normal));

	// compile time comparation 
	if (do_shadows)
	{
		shadow = DoShadowCar(shadow_uv, d);
		shadow = saturate(shadow + 0.5);
	}
	else
		shadow = 1;

	diffuse = cmLocalColourMatrix[0] * d * shadow;

	// fill lights
	d = saturate(dot(cmLocalDirectionMatrix[1].xyz, normal));
	diffuse += cmLocalColourMatrix[1] * d;

	d = saturate(dot(cmLocalDirectionMatrix[2].xyz, normal));
	diffuse += cmLocalColourMatrix[2] * d;

	diffuse = saturate(diffuse);

	return diffuse;
}

#endif
</file>
  <file id="7" path="D:\eax-build1-s09-xenon\Oban\Speed\Xenon\Src\Render\Shaders\fog.h" time="01c7f8c7-b0ecaa93">#ifndef FOG_H
#define FOG_H 


#include "registermap.h"

shared float4 cvFogColour			: REG_cvFogColour;

// x : fog end distance
// y : 1.0f / (fog_end_dist - fog_start_dist)
// z : maximum fog intensity (clamp to this so that objects don't turn into the pure fog colour at long ranges)
// w : exponent that modifies how the fog falls off over distance
shared float4 cvFogValue			: REG_cvFogValue;

// This is 1.0 if fog is enabled and 0.0 if fog is disabled
shared float cfFogEnable			: REG_cfFogEnable;

// Calculates the fog colour (not light scattering fog, but regular fog) for each vertex
// vert_pos should be the result of a mul(IN.position, WVP) operation
float CalcVertexFog(float4 vert_pos_screen)
{
	float fog_end = cvFogValue.x;
	float fog_recip_end_minus_start = cvFogValue.y;
	float dist_fog_power = cvFogValue.z;
	float fog_exponent = cvFogValue.w;

	//float3 screen_pos_normalized = abs(vert_pos_screen.xyz / vert_pos_screen.w);
	                                                                                                                                 
	float fog_intensity_dist = saturate((fog_end - vert_pos_screen.z) * fog_recip_end_minus_start);
	fog_intensity_dist = pow((1.0 - fog_intensity_dist), fog_exponent) * dist_fog_power;

	float result = fog_intensity_dist;

	// Maybe the fog should be off? If thats what the user wants, cfFogEnable will be 0.0f
	result *= cfFogEnable;

	// We do the following because with the Fog register, a value of 0 means full on fog colour
	// a value of 1.0 means no fog whatsoever, so we reverse it.
	result = 1.0 - result; 
        
	return result;
}



// The xbox 360 doesn't have fog hardware like PC video cards do, so implement the same functionality here
// srcColour is the output colour from the pixel shader. Modulate it by invFogIntensity.
float3 CalcFogColour(float3 src_colour, float inv_fog_intensity)
{
	//float3 fogColour	= lerp(cvFogColour.xyz, src_colour, inv_fog_intensity);
	//return fogColour;//lerp(fogColour, src_colour , pow(max(max(src_colour.x, src_colour.y) , src_colour.z), 7) );
	
	//float fog_lerp = saturate(inv_fog_intensity + pow(max(max(src_colour.x, src_colour.y) , src_colour.z), 7));
	//float3 result = src_colour * inv_fog_intensity + (1 - inv_fog_intensity) * cvFogColour.xyz;
	//return result;	
	return lerp(cvFogColour.xyz, src_colour, inv_fog_intensity);
}


//
// This version is used when the fog is calculated in the post processing
//
float4 CalcPostProcessFog(float4 srcColour, float depth)   //  w is wPos
{
	float zDist	= (1 / (1-depth));
	zDist *= cfFogEnable;

	float fog_end					= cvFogValue.x;
	float fog_recip_end_minus_start = cvFogValue.y;
	float distFogPower				= cvFogValue.z;
	float fog_exponent				= cvFogValue.w; 


	float fogIntensityDist = saturate((fog_end - zDist) * fog_recip_end_minus_start);
	fogIntensityDist = pow((1.0 - fogIntensityDist), fog_exponent) * distFogPower * 0.5;

	// pixel
	float4 result		= srcColour;
	float4 fogColour	= lerp(result, cvFogColour, fogIntensityDist);
	result.xyz			= lerp(fogColour, result.xyz , pow(max(max(result.x, result.y) , result.z), 7) );
	//result.xyz = fogColour;
	result.w			= srcColour.w;  

	//float3 blend_fog = CalcFogColour(OUT, IN.fog);
	//OUT.xyz = lerp(blend_fog, OUT.xyz , pow(max(max(OUT.x, OUT.y) , OUT.z), 7) );
	//result.xyz = pow(max(max(result.x, result.y) , result.z), 7);//fogIntensityDist;

	//result.xyz = depth;
	return result; 
}


#endif</file>
  <file id="8" path="D:\eax-build1-s09-xenon\Oban\Speed\Indep\Src\Render\Shaders\carx.h" time="01c7f8bf-7e3da62e">#if !defined(_CARX_H_)
#define _CARX_H_

#include "shadowenum.h"

#define NEW_NOISE 1

#define NV_POWER_NEAR_ZERO_HACK	0.0001

static const float3	kLuminanceVector  =	float3(0.2125f,	0.7154f, 0.0721f);
static const float  kMipMapBias		  = float(-0.5f);
static const float  kMipMapBiasSharp  = float(-0.6f);

shared float4   cvTextureOffset			: REG_cvTextureOffset;
shared float	cfScaleUVs				: REG_cfScaleUVs;
shared float3	cvLocalEyePos			: REG_cvLocalEyePos;			// LOCALEYEPOS;
shared float4	cvPowers				: REG_cvPowers;					// xyz  = Diffuse, Specular, Envmap powers
shared float4	cvFlakes				: REG_cvFlakes;					// xy   = Diffuse, Spec Metallic Flake amounts
shared float4	cvClampAndScales		: REG_cvClampAndScales;			// xyzw = Diffuse, Envmap Clamp		zw = Diffuse, Envmap Scale

shared float4	cvDiffuseMin			: REG_cvDiffuseMin;				// DIFFUSEMIN;
shared float4	cvDiffuseRange			: REG_cvDiffuseRange;			// DIFFUSERANGE;
shared float4	cvEnvmapMin				: REG_cvEnvmapMin;				// ENVMAPMIN;
shared float4	cvEnvmapRange			: REG_cvEnvmapRange;			// ENVMAPANGE;

//void VS_CarHighLOD_PC(const VS_INPUT IN, out PS_INPUT OUT, uniform bool use_matrix_palette)
//{
//	float4 position;
//	float3 normal;
//	float4 tangent;
//	
//	ReadPositionNormalTangent(IN, use_matrix_palette, position, normal, tangent);
//	
//	OUT.position		= world_position(position);
//	
//	OUT.noise_dmg		= position * 20;
//	OUT.noise_dmg.w		= 1; 
//				
//	OUT.uv_occ_bias.xy  = cfScaleUVs * (IN.tex.xy + cvTextureOffset.xy);
//	OUT.uv_occ_bias.zw	= IN.tex.zw;
//	
//	OUT.uv_occ_bias.z	= IN.color.x;
//	
//	
//	OUT.normal.xyz		= normal;
//	
//	// Calculate the view direction
//	float3 view_vector	= cvLocalEyePos - position;
//	float  view_length	= length(view_vector);
//
//	float vdotn			= dot(view_vector, normal) / view_length;
//	
//	OUT.uv_occ_bias.w	= lerp(kMipMapBiasSharp, kMipMapBias, -vdotn);	// bias, and sharpen mip-maps based on view angle
//
//	OUT.view.xyz		= view_vector;
//
//
//	// Metallic paint distance falloff coeff
//	OUT.view.w			 = saturate(view_length * -0.25 + 1.2);			// line equation
//	OUT.view.w			*= 0.04 * cvFlakes.y;
//
//	// Envmap scale 0.1 - on the inside of the poly  1.0 - on the outside
//	// THis scale it help when looking at the windows from the inside of the car.  The envmap
//	// is too blown out and looks like crap
//	OUT.normal.w = vdotn &lt; 0.0f ? 0.25f : 1.0f;
//
//	float4 dummy = 0;
//	float3 diffuse = CalculateShaperRigDiffuse(normal, dummy, dummy.x, false);
//
//	vdotn = saturate(vdotn);
//
//	// Calcalute view direction powers for each lighting component
//	float	
//	vdotn_diffuse			= pow(vdotn, cvPowers.x);
//	vdotn_diffuse			= min(vdotn_diffuse, cvClampAndScales.x) * cvClampAndScales.z;
//
//	OUT.diffuse		= cvDiffuseMin + (vdotn_diffuse * cvDiffuseRange);
//	OUT.diffuse.xyz	*= diffuse;
//
//	// fake fresnel effect
//	float	
//	vdotn_envmap			= pow(vdotn, cvPowers.z);
//	vdotn_envmap			= min(vdotn_envmap,  cvClampAndScales.y) * cvClampAndScales.w;
//
//	OUT.envmap_scale.xyz	= cvEnvmapMin  + (vdotn_envmap  * cvEnvmapRange);
//	OUT.envmap_scale.w		= cvFlakes.z + (vdotn_diffuse * cvFlakes.w) * dot(kLuminanceVector, diffuse);
//
//	// shadow maps
//	OUT.shadow_tex = VertexShadowTex(position);
//}

void VS_CarHighLOD(const VS_INPUT IN, out PS_INPUT OUT, uniform bool use_matrix_palette)
{
	float4 position;
	float3 normal;
	float4 tangent;
	float2 uv_damage;
	
	ReadPositionNormalTangent(IN, use_matrix_palette, position, normal, tangent, uv_damage);

	
	OUT.position		= world_position(position);
	
#if defined (NEW_NOISE)
	OUT.noise_dmg		= position * 8.33;
#else
	OUT.noise_dmg		= position * 20;
#endif
	OUT.noise_dmg.w		= 1; 

 	if (use_matrix_palette)	
 	{
 		OUT.uv_occ_bias.xy  = (IN.tex.xy + cvTextureOffset.xy);
 		OUT.uv_occ_bias.y = OUT.uv_occ_bias.y * uv_damage.x + uv_damage.y;		
 	}
 	else
 	{
 		OUT.uv_occ_bias.xy  = (IN.tex.xy + cvTextureOffset.xy) * cfScaleUVs;
 	}
 
	OUT.uv_occ_bias.zw	= IN.tex.zw;
	
	OUT.uv_occ_bias.z	= IN.color.x;

#if !defined(NO_FOG)
	OUT.fog				= CalcVertexFog(OUT.position);
#endif // NO_FOG
	
	OUT.normal.xyz		= normal;
	
	// Calculate the view direction
	float3 view_vector	= cvLocalEyePos - position.xyz;
	float  view_length	= length(view_vector);

	float vdotn			= dot(view_vector, normal) / view_length;
	
	OUT.uv_occ_bias.w	= lerp(kMipMapBiasSharp, kMipMapBias, -vdotn);	// bias, and sharpen mip-maps based on view angle

	OUT.view.xyz		= view_vector;

	// Metallic paint distance falloff coeff
	OUT.view.w			 = saturate(view_length * -0.25 + 1.2);			// line equation
	OUT.view.w			*= 0.04 * cvFlakes.y;

	// Envmap scale 0.1 - on the inside of the poly  1.0 - on the outside
	// THis scale it help when looking at the windows from the inside of the car.  The envmap
	// is too blown out and looks like crap
	OUT.normal.w = vdotn &lt; 0.0f ? 0.25f : 1.0f;

	float4 shadow_uv;
	float shadow;
	float3 diffuse = CalculateShaperRigDiffuse(normal, shadow_uv, shadow, ShadowShaderDetail_OFF);

	vdotn = saturate(vdotn) + NV_POWER_NEAR_ZERO_HACK;

	// Calcalute view direction powers for each lighting component
	float	
	vdotn_diffuse			= pow(vdotn, cvPowers.x);
	vdotn_diffuse			= min(vdotn_diffuse, cvClampAndScales.x) * cvClampAndScales.z;

	OUT.diffuse		= cvDiffuseMin + (vdotn_diffuse * cvDiffuseRange);
	OUT.diffuse.xyz	*= diffuse;

	// fake fresnel effect
	float	
	vdotn_envmap			= pow(vdotn, cvPowers.z);
	vdotn_envmap			= min(vdotn_envmap,  cvClampAndScales.y) * cvClampAndScales.w;

	OUT.envmap_scale.xyz	= cvEnvmapMin.xyz  + (vdotn_envmap  * cvEnvmapRange.xyz);
	OUT.envmap_scale.w		= cvFlakes.z + (vdotn_diffuse * cvFlakes.w) * dot(kLuminanceVector, diffuse);

	// shadow maps
	OUT.shadow_tex = VertexShadowTex(position);
}

void VS_CarHighLOD_PS3(const VS_INPUT IN, out PS_INPUT OUT, uniform bool use_matrix_palette)
{
	float4 position;
	half3 normal;
	half4 tangent;
	half2 uv_damage;
	
	ReadPositionNormalTangent(IN, use_matrix_palette, position, normal, tangent, uv_damage);

	
	OUT.position		= world_position(position);
	
#if defined (NEW_NOISE)
	OUT.noise_dmg		= position * 8.33;
#else
	OUT.noise_dmg		= position * 20;
#endif
	OUT.noise_dmg.w		= 1; 

 	if (use_matrix_palette)	
 	{
 		OUT.uv_occ_bias.xy  = (IN.tex.xy + cvTextureOffset.xy);
 		OUT.uv_occ_bias.y = OUT.uv_occ_bias.y * uv_damage.x + uv_damage.y;		
 	}
 	else
 	{
 		OUT.uv_occ_bias.xy  = (IN.tex.xy + cvTextureOffset.xy) * cfScaleUVs;
 	}
 
	OUT.uv_occ_bias.zw	= IN.tex.zw;
	
	OUT.uv_occ_bias.z	= IN.color.x;

#if !defined(NO_FOG)
	OUT.fog				= CalcVertexFog(OUT.position);
#endif // NO_FOG
	
	OUT.normal.xyz		= normal;
	
	// Calculate the view direction
	float3 view_vector	= cvLocalEyePos - position.xyz;
	float  view_length	= length(view_vector);

	float vdotn			= dot(view_vector, normal) / view_length;
	
	OUT.uv_occ_bias.w	= lerp(kMipMapBiasSharp, kMipMapBias, -vdotn);	// bias, and sharpen mip-maps based on view angle

	OUT.view.xyz		= view_vector;

	// Metallic paint distance falloff coeff
	OUT.view.w			 = saturate(view_length * -0.25 + 1.2);			// line equation
	OUT.view.w			*= 0.04 * cvFlakes.y;

	// Envmap scale 0.1 - on the inside of the poly  1.0 - on the outside
	// THis scale it help when looking at the windows from the inside of the car.  The envmap
	// is too blown out and looks like crap
	OUT.normal.w = vdotn &lt; 0.0f ? 0.25f : 1.0f;

	float4 shadow_uv;
	float shadow;
	float3 diffuse = CalculateShaperRigDiffuse(normal, shadow_uv, shadow, ShadowShaderDetail_OFF);

	vdotn = saturate(vdotn) + NV_POWER_NEAR_ZERO_HACK;

	// Calcalute view direction powers for each lighting component
	float	
	vdotn_diffuse			= pow(vdotn, cvPowers.x);
	vdotn_diffuse			= min(vdotn_diffuse, cvClampAndScales.x) * cvClampAndScales.z;

	OUT.diffuse		= cvDiffuseMin + (vdotn_diffuse * cvDiffuseRange);
	OUT.diffuse.xyz	*= diffuse;

	// fake fresnel effect
	float	
	vdotn_envmap			= pow(vdotn, cvPowers.z);
	vdotn_envmap			= min(vdotn_envmap,  cvClampAndScales.y) * cvClampAndScales.w;

	OUT.envmap_scale.xyz	= cvEnvmapMin.xyz  + (vdotn_envmap  * cvEnvmapRange.xyz);
	OUT.envmap_scale.w		= cvFlakes.z + (vdotn_diffuse * cvFlakes.w) * dot(kLuminanceVector, diffuse);

	// shadow maps
	OUT.shadow_tex = VertexShadowTex(position);
}


#ifndef USE_TANGENT 
void VS_CarLowLOD_360(const VS_INPUT IN, out PS_INPUT_LOD OUT, uniform bool use_matrix_palette)
{
	float4 position;
	float3 normal;
	float4 tangent;
	float2 uv_damage;

	ReadPositionNormalTangent(IN, use_matrix_palette, position, normal, tangent, uv_damage);


	OUT.position		= world_position(position);

	if (use_matrix_palette)	
	{
		OUT.uv_occ_bias.xy  = (IN.tex.xy + cvTextureOffset.xy);
		OUT.uv_occ_bias.y = OUT.uv_occ_bias.y * uv_damage.x + uv_damage.y;		
	}
	else
	{
		OUT.uv_occ_bias.xy  = (IN.tex.xy + cvTextureOffset.xy) * cfScaleUVs;
	}

	OUT.uv_occ_bias.zw	= IN.tex.zw;

	OUT.uv_occ_bias.z	= IN.color.x;

#if !defined(NO_FOG)
	OUT.fog				= CalcVertexFog(OUT.position);
#endif // NO_FOG



	// Calculate the view direction
	float3 view_vector	= cvLocalEyePos - position.xyz;
	float  view_length	= length(view_vector);

	float vdotn			= dot(view_vector, normal) / view_length;

	OUT.uv_occ_bias.w	= lerp(kMipMapBiasSharp, kMipMapBias, -vdotn);	// bias, and sharpen mip-maps based on view angle

	OUT.reflection.xyz	= reflect(-view_vector, normal);
	// no local-&gt;world: we're using it for spec and there is no envmap for lod
	// OUT.reflection.xyz	= mul(reflection, (float3x4)cmWorldMat).xyz; 


	// Envmap scale 0.1 - on the inside of the poly  1.0 - on the outside
	// THis scale it help when looking at the windows from the inside of the car.  The envmap
	// is too blown out and looks like crap
	OUT.reflection.w = vdotn &lt; 0.0f ? 0.25f : 1.0f;

	float4 shadow_uv;
	float shadow;
	float3 diffuse = CalculateShaperRigDiffuse(normal, shadow_uv, shadow, ShadowShaderDetail_OFF);

	vdotn = saturate(vdotn) + NV_POWER_NEAR_ZERO_HACK;

	// Calcalute view direction powers for each lighting component
	float	
		vdotn_diffuse			= pow(vdotn, cvPowers.x);
	vdotn_diffuse			= min(vdotn_diffuse, cvClampAndScales.x) * cvClampAndScales.z;

	OUT.diffuse		= cvDiffuseMin + (vdotn_diffuse * cvDiffuseRange);
	OUT.diffuse.xyz	*= diffuse;

	// fake fresnel effect
	float	
	vdotn_envmap			= pow(vdotn, cvPowers.z);
	vdotn_envmap			= min(vdotn_envmap,  cvClampAndScales.y) * cvClampAndScales.w;

	OUT.envmap_scale.xyz	= cvEnvmapMin.xyz  + (vdotn_envmap  * cvEnvmapRange.xyz);
	OUT.envmap_scale.w		= cvFlakes.z + (vdotn_diffuse * cvFlakes.w) * dot(kLuminanceVector, diffuse);
}

void VS_CarLowLOD_PS3(const VS_INPUT IN, out PS_INPUT_LOD OUT, uniform bool use_matrix_palette)
{
	float4 position;
	float3 normal;
	float4 tangent;
	float2 uv_damage;

	ReadPositionNormalTangent(IN, use_matrix_palette, position, normal, tangent, uv_damage);


	OUT.position		= world_position(position);

	if (use_matrix_palette)	
	{
		OUT.uv_occ_bias.xy  = (IN.tex.xy + cvTextureOffset.xy);
		OUT.uv_occ_bias.y = OUT.uv_occ_bias.y * uv_damage.x + uv_damage.y;		
	}
	else
	{
		OUT.uv_occ_bias.xy  = (IN.tex.xy + cvTextureOffset.xy) * cfScaleUVs;
	}

	OUT.uv_occ_bias.zw	= IN.tex.zw;

	OUT.uv_occ_bias.z	= IN.color.x;

#if !defined(NO_FOG)
	OUT.fog				= CalcVertexFog(OUT.position);
#endif // NO_FOG



	// Calculate the view direction
	float3 view_vector	= cvLocalEyePos - position.xyz;
	float  view_length	= length(view_vector);

	float vdotn			= dot(view_vector, normal) / view_length;

	OUT.uv_occ_bias.w	= lerp(kMipMapBiasSharp, kMipMapBias, -vdotn);	// bias, and sharpen mip-maps based on view angle

	OUT.reflection.xyz	= reflect(-view_vector, normal);
	// no local-&gt;world: we're using it for spec and there is no envmap for lod
	// OUT.reflection.xyz	= mul(reflection, (float3x4)cmWorldMat).xyz; 


	// Envmap scale 0.1 - on the inside of the poly  1.0 - on the outside
	// THis scale it help when looking at the windows from the inside of the car.  The envmap
	// is too blown out and looks like crap
	OUT.reflection.w = vdotn &lt; 0.0f ? 0.25f : 1.0f;

	float4 shadow_uv;
	float shadow;
	float3 diffuse = CalculateShaperRigDiffuse(normal, shadow_uv, shadow, ShadowShaderDetail_OFF);

	vdotn = saturate(vdotn) + NV_POWER_NEAR_ZERO_HACK;

	// Calcalute view direction powers for each lighting component
	float	
		vdotn_diffuse			= pow(vdotn, cvPowers.x);
	vdotn_diffuse			= min(vdotn_diffuse, cvClampAndScales.x) * cvClampAndScales.z;

	OUT.diffuse		= cvDiffuseMin + (vdotn_diffuse * cvDiffuseRange);
	OUT.diffuse.xyz	*= diffuse;

	// fake fresnel effect
	float	
	vdotn_envmap			= pow(vdotn, cvPowers.z);
	vdotn_envmap			= min(vdotn_envmap,  cvClampAndScales.y) * cvClampAndScales.w;

	OUT.envmap_scale.xyz	= cvEnvmapMin.xyz  + (vdotn_envmap  * cvEnvmapRange.xyz);
	OUT.envmap_scale.w		= cvFlakes.z + (vdotn_diffuse * cvFlakes.w) * dot(kLuminanceVector, diffuse);
}

#endif
void VS_CarLowLOD(const VS_INPUT IN, out PS_INPUT1 OUT)
{
	OUT.position				= world_position(float4(IN.position.xyz, 1.0f));
	OUT.tex_base				= float4(IN.tex.xy, 0.0f, 0.0f);

	
	// Reflection Vector
	float3	view_vector			= normalize(cvLocalEyePos - IN.position.xyz);
	float4	reflection;
	
	reflection					= float4( reflect(-view_vector, IN.normal), 0.0f );		// R = 2 * (N.V) * N - V
	reflection					= float4( mul(reflection, cmWorldMat).xyz, 0.0f );

	OUT.reflection.xyz			= reflection.xyz;
	float3 fake_view_vector		= float3(view_vector.x, view_vector.y, view_vector.z+1);
	
	OUT.reflection.w			= dot( normalize(fake_view_vector), IN.normal );					// For specular lighting
	OUT.reflection.w			= pow( OUT.reflection.w, cvPowers.y );

	float	vdotn				= dot(view_vector, IN.normal);

	float	env_scale	= vdotn &lt; 0.0f ? 0.25f : 1.0f;
	OUT.tex_base.z = env_scale;


	float3 light_colour = 0;
	for (int i = 0; i &lt; 3; i++)
	{
		float d = saturate(dot(cmLocalDirectionMatrix[i].xyz, IN.normal.xyz));
		light_colour += cmLocalColourMatrix[i].xyz * d;
	}
	light_colour = saturate(light_colour);

	// Calcalute view direction powers for each lighting component
	float	vdotn_sat		= saturate( vdotn );				// Range = 0.0 .. +1.0

	float	vdotn_diffuse	= pow( vdotn_sat, cvPowers.x   );
	vdotn_diffuse			= clamp( vdotn_diffuse, 0, cvClampAndScales.x );
	vdotn_diffuse			*= cvClampAndScales.z;

	float	vdotn_envmap	= pow( vdotn_sat, cvPowers.z   );
	vdotn_envmap			= clamp( vdotn_envmap,  0, cvClampAndScales.y );
	vdotn_envmap			*= cvClampAndScales.w;

	OUT.diffuse_colour		 = cvDiffuseMin + ( vdotn_diffuse * cvDiffuseRange );
	OUT.diffuse_colour.xyz	*= light_colour;

	OUT.envmap_scale.xyz	= cvEnvmapMin.xyz  + ( vdotn_envmap.rrr  * cvEnvmapRange.xyz  );
	OUT.envmap_scale.w		= cvFlakes.z + ( vdotn_diffuse * cvFlakes.w );
	OUT.envmap_scale.w		*= dot( kLuminanceVector, light_colour );
}

// @danote:
// temp until the transpose for cmLocalDirectionMatrix is don for the other platforms
void VS_CarLowLOD_PS3(const VS_INPUT IN, out PS_INPUT1 OUT)
{
	OUT.position				= world_position(float4(IN.position.xyz, 1.0f));
	OUT.tex_base				= float4(IN.tex.xy, 0.0f, 0.0f);

	
	// Reflection Vector
	float3	view_vector			= normalize(cvLocalEyePos - IN.position.xyz);
	float4	reflection;
	
	reflection					= float4( reflect(-view_vector, IN.normal), 0.0f );		// R = 2 * (N.V) * N - V
	reflection					= float4( mul(reflection, cmWorldMat).xyz, 0.0f );

	OUT.reflection.xyz			= reflection.xyz;
	float3 fake_view_vector		= float3(view_vector.x, view_vector.y, view_vector.z+1);
	
	OUT.reflection.w			= dot( normalize(fake_view_vector), IN.normal );					// For specular lighting
	OUT.reflection.w			= pow( OUT.reflection.w, cvPowers.y );

	float	vdotn				= dot(view_vector, IN.normal);

	float	env_scale	= vdotn &lt; 0.0f ? 0.25f : 1.0f;
	OUT.tex_base.z = env_scale;

	float3 light_colour = 0;
	for (int i = 0; i &lt; 3; i++)
	{
		float d = saturate(dot(cmLocalDirectionMatrix[i].xyz, IN.normal.xyz));
		light_colour += cmLocalColourMatrix[i].xyz * d;
	}
	light_colour = saturate(light_colour);


	// Calcalute view direction powers for each lighting component
	float	vdotn_sat		= saturate( vdotn );				// Range = 0.0 .. +1.0

	float	vdotn_diffuse	= pow( vdotn_sat, cvPowers.x   );
	vdotn_diffuse			= clamp( vdotn_diffuse, 0, cvClampAndScales.x );
	vdotn_diffuse			*= cvClampAndScales.z;

	float	vdotn_envmap	= pow( vdotn_sat, cvPowers.z   );
	vdotn_envmap			= clamp( vdotn_envmap,  0, cvClampAndScales.y );
	vdotn_envmap			*= cvClampAndScales.w;

	OUT.diffuse_colour		 = cvDiffuseMin + ( vdotn_diffuse * cvDiffuseRange );
	OUT.diffuse_colour.xyz	*= light_colour;

	OUT.envmap_scale.xyz	= cvEnvmapMin.xyz  + ( vdotn_envmap.rrr  * cvEnvmapRange.xyz  );
	OUT.envmap_scale.w		= cvFlakes.z + ( vdotn_diffuse * cvFlakes.w );
	OUT.envmap_scale.w		*= dot( kLuminanceVector, light_colour );
}



void VS_CarNormalMapHighLOD(const VS_INPUT IN, out PS_INPUT OUT, uniform bool use_matrix_palette)
{
	float4 position;
	float3 normal;
	float4 tangent;
	float2 uv_damage;
	
	ReadPositionNormalTangent(IN, use_matrix_palette, position, normal, tangent, uv_damage);
	
	OUT.position		= world_position(position);
	
#if defined (NEW_NOISE)
	OUT.noise_dmg		= position * 8.33;
#else
	OUT.noise_dmg		= position * 20;
#endif
	OUT.noise_dmg.w		= GetPixelDamage(IN);
		
	OUT.uv_occ_bias		= IN.tex;
	OUT.uv_occ_bias.z	= IN.color.x;
	
	OUT.normal.xyz		= normal;
#if defined(USE_TANGENT)
	OUT.tangent			= tangent;
#endif // USE_TANGENT
#if !defined(NO_FOG)
	OUT.fog				= CalcVertexFog(OUT.position);
#endif // NO_FOG

	// Calculate the view direction
	float3 view_vector	= cvLocalEyePos - position.xyz;
	float  view_length	= length(view_vector);

	float vdotn			= dot(view_vector, normal) / view_length;
	
	OUT.uv_occ_bias.w	= lerp(kMipMapBiasSharp, kMipMapBias, -vdotn);	// bias, and sharpen mip-maps based on view angle

	OUT.view.xyz		= view_vector;

	// Metallic paint distance falloff coeff
	OUT.view.w			 = saturate(view_length * -0.25 + 1.2);			// line equation
	OUT.view.w			*= 0.04 * cvFlakes.y;
	
	// Envmap scale 0.1 - on the inside of the poly  1.0 - on the outside
	// THis scale it help when looking at the windows from the inside of the car.  The envmap
	// is too blown out and looks like crap
	OUT.normal.w = vdotn &lt; 0.0f ? 0.25f : 1.0f;

	vdotn = saturate(vdotn) + NV_POWER_NEAR_ZERO_HACK;

	// Calcalute view direction powers for each lighting component
	float	
	vdotn_diffuse			= pow(vdotn, cvPowers.x);
	vdotn_diffuse			= min(vdotn_diffuse, cvClampAndScales.x) * cvClampAndScales.z;

	OUT.diffuse.xyz			= cvDiffuseMin.xyz + (vdotn_diffuse * cvDiffuseRange.xyz);
	//OUT.diffuse.xyz			= cvDiffuseMin.xyz + cvDiffuseRange.xyz;
	OUT.diffuse.a			= IN.color.a;

	// fake fresnel effect
	float	
	vdotn_envmap			= pow(vdotn, cvPowers.z);
	vdotn_envmap			= min(vdotn_envmap,  cvClampAndScales.y) * cvClampAndScales.w;

	OUT.envmap_scale.xyz	= cvEnvmapMin.xyz  + (vdotn_envmap  * cvEnvmapRange.xyz);

	float3 lightColour		= float3(1, 1, 1);	
	OUT.envmap_scale.w		= (cvFlakes.z + (vdotn_diffuse * cvFlakes.w)) * dot(kLuminanceVector, lightColour);

	// shadow maps
	OUT.shadow_tex = VertexShadowTex(position);
}


void VS_CarNormalMapLowLOD(const VS_INPUT IN, out PS_INPUT_LOD OUT, uniform bool use_matrix_palette)
{
	float4 position;
	float3 normal;
	float4 tangent;
	float2 uv_damage;

	ReadPositionNormalTangent(IN, use_matrix_palette, position, normal, tangent, uv_damage);

	OUT.position		= world_position(position);

	OUT.uv_occ_bias		= IN.tex;
	OUT.uv_occ_bias.z	= IN.color.x;

#if !defined(NO_FOG)
	OUT.fog				= CalcVertexFog(OUT.position);
#endif // NO_FOG

	// Calculate the view direction
	float3 view_vector	= cvLocalEyePos - position.xyz;
	float  view_length	= length(view_vector);

	float vdotn			= dot(view_vector, normal) / view_length;

	OUT.uv_occ_bias.w	= lerp(kMipMapBiasSharp, kMipMapBias, -vdotn);	// bias, and sharpen mip-maps based on view angle

// 	OUT.reflection.xyz	= reflect(-view_vector, normal);
// 	OUT.reflection.xyz	= mul(OUT.reflection.xyz, (float3x4)cmWorldMat).xyz;


	// Envmap scale 0.1 - on the inside of the poly  1.0 - on the outside
	// THis scale it help when looking at the windows from the inside of the car.  The envmap
	// is too blown out and looks like crap
	// OUT.reflection.w = vdotn &lt; 0.0f ? 0.25f : 1.0f;

#if defined(USE_TANGENT)
	OUT.view_direction.xyz	= view_vector / view_length;
	OUT.view_direction.w	= vdotn &lt; 0.0f ? 0.25f : 1.0f;;

	OUT.normal.w		= GetPixelDamage(IN);
	OUT.normal.xyz		= normal;
	OUT.tangent			= tangent;
#endif // USE_TANGENT

	vdotn = saturate(vdotn) + NV_POWER_NEAR_ZERO_HACK;

	// Calcalute view direction powers for each lighting component
	float	
	vdotn_diffuse			= pow(vdotn, cvPowers.x);
	vdotn_diffuse			= min(vdotn_diffuse, cvClampAndScales.x) * cvClampAndScales.z;

	OUT.diffuse.xyz			= cvDiffuseMin.xyz + (vdotn_diffuse * cvDiffuseRange.xyz);
	OUT.diffuse.a			= IN.color.a;

	// fake fresnel effect
	float	
	vdotn_envmap			= pow(vdotn, cvPowers.z);
	vdotn_envmap			= min(vdotn_envmap,  cvClampAndScales.y) * cvClampAndScales.w;

	OUT.envmap_scale.xyz	= cvEnvmapMin.xyz  + (vdotn_envmap  * cvEnvmapRange.xyz);

	float3 lightColour		= float3(1, 1, 1);	
	OUT.envmap_scale.w		= (cvFlakes.z + (vdotn_diffuse * cvFlakes.w)) * dot(kLuminanceVector, lightColour);

	// shadow maps
//	OUT.shadow_tex = VertexShadowTex(position);
}


void VS_CarNormalMapHighLOD_PC(const VS_INPUT IN, out PS_INPUT OUT, uniform bool use_matrix_palette)
{
	float4 position;
	float3 normal;
	float4 tangent;
	float2 uv_damage;
	
	ReadPositionNormalTangent(IN, use_matrix_palette, position, normal, tangent, uv_damage);
	
	OUT.position		= world_position(position);
	
	OUT.noise_dmg		= position * 20;
	OUT.noise_dmg.w		= GetPixelDamage(IN);
		
	OUT.uv_occ_bias		= IN.tex;
	OUT.uv_occ_bias.z	= IN.color.x;
	
	OUT.normal.xyz		= normal;
#if defined(USE_TANGENT)
	OUT.tangent			= tangent;
#endif // USE_TANGENT
	
	// Calculate the view direction
	float3 view_vector	= cvLocalEyePos - position.xyz;
	float  view_length	= length(view_vector);

	float vdotn			= dot(view_vector, normal) / view_length;
	
	OUT.uv_occ_bias.w	= lerp(kMipMapBiasSharp, kMipMapBias, -vdotn);	// bias, and sharpen mip-maps based on view angle

	OUT.view.xyz		= view_vector;

	// Metallic paint distance falloff coeff
	OUT.view.w			 = saturate(view_length * -0.25 + 1.2);			// line equation
	OUT.view.w			*= 0.04 * cvFlakes.y;
	
	// Envmap scale 0.1 - on the inside of the poly  1.0 - on the outside
	// THis scale it help when looking at the windows from the inside of the car.  The envmap
	// is too blown out and looks like crap
	OUT.normal.w = vdotn &lt; 0.0f ? 0.25f : 1.0f;

	vdotn = saturate(vdotn) + NV_POWER_NEAR_ZERO_HACK;

	// Calcalute view direction powers for each lighting component
	float	
	vdotn_diffuse			= pow(vdotn, cvPowers.x);
	vdotn_diffuse			= min(vdotn_diffuse, cvClampAndScales.x) * cvClampAndScales.z;

	OUT.diffuse.xyz			= cvDiffuseMin.xyz + (vdotn_diffuse * cvDiffuseRange.xyz);
	OUT.diffuse.a			= IN.color.a;

	// fake fresnel effect
	float	
	vdotn_envmap			= pow(vdotn, cvPowers.z);
	vdotn_envmap			= min(vdotn_envmap,  cvClampAndScales.y) * cvClampAndScales.w;

	OUT.envmap_scale.xyz	= cvEnvmapMin.xyz  + (vdotn_envmap  * cvEnvmapRange.xyz);
	float3 lightColour		= float3(1, 1, 1);	
	OUT.envmap_scale.w		= (cvFlakes.z + (vdotn_diffuse * cvFlakes.w)) * dot(kLuminanceVector, lightColour);

	// shadow maps
	OUT.shadow_tex = VertexShadowTex(position);
}

float3 GetNoiseNormal(const PS_INPUT IN, float3 normal)
{
	if (cvFlakes.y &lt;= 0 || IN.view.w &lt; 0.001)
	{
		return normal;
	}

	float3 uv = IN.noise_dmg.xyz;
	
#if defined (NEW_NOISE)
	float3 noise = tex3D(VOLUMEMAP_SAMPLER,	uv).xyz;
	uv = uv * 3.1;
	noise = noise + tex3D(VOLUMEMAP_SAMPLER, uv).xyz - 1;
#else
	float3 noise = tex3Dbias(VOLUMEMAP_SAMPLER,	float4(uv, -3)).xyz;
	noise = (noise * 2) - 1;
#endif

	return normalize(normal + noise * IN.view.w);
}

// This is the original code from the PC which used to match the cross platform version above
// except for the IN.view.w &lt; 0.001 test. Keeping here for reference but PC uses the above.
// float3 GetNoiseNormal_PC(const PS_INPUT IN, float3 normal)
// {
// 	float3 xyz[3];
// 
// 	float3 result;
// 	if (cvFlakes.y &lt;= 0)
// 	{
// 		result = normal;
// 	}
// 	else
// 	{
// 		float3 uv = IN.noise_dmg.xyz;
// 		
// 	#if 0 // this version is bit faster but looks 'different'
// 		xyz[0] = float3(uv.y, uv.x, 0.3);
// 		xyz[1] = float3(uv.x, uv.z, 0.6);
// 		xyz[2] = float3(uv.z, uv.y, 0.9);
// 
// 		float3 noise = tex3Dbias(VOLUMEMAP_SAMPLER,	float4(xyz[0], -3));
//  		noise *= tex3Dbias(VOLUMEMAP_SAMPLER,	float4(xyz[1], -3));
//  		noise *= tex3Dbias(VOLUMEMAP_SAMPLER,	float4(xyz[2], -3));
// 	#else
// 		float3 noise = tex3Dbias(VOLUMEMAP_SAMPLER,	float4(uv, -3));
// 	#endif
// 		noise = noise*2 - 1;
// 
// 		result = normalize(normal + noise * IN.view.w);
// 	}
// 
// 	return result;
// }

float4 PS_CarHighLOD(const PS_INPUT IN, int shadowDetail = ShadowShaderDetail_HIGH)
{
	float3	normal = normalize(IN.normal.xyz);
    float3	view_direction = normalize(IN.view.xyz);

	// Texture Samples
	float4	diffuse_sample = tex2Dbias(DIFFUSE_SAMPLER,	IN.uv_occ_bias);
	
	// Noise
	float3	flake_spec_normal		= GetNoiseNormal(IN, normal);
	float3	flake_spec_reflection	= reflect(-view_direction, flake_spec_normal);
	
	float3 reflection = reflect(-view_direction, normal);
	reflection = mul(reflection, (float3x4)cmWorldMat).xyz;
	
	float n_dot_l = saturate(dot(cmLocalDirectionMatrix[0].xyz, normal));
			
	// Vinyl Scales
	float	diffuse_vinyl_scale;
	float	spec_vinyl_scale;
	float	envmap_vinyl_scale;


	diffuse_vinyl_scale			= (1 - diffuse_sample.w)*(cvVinylScales.x);
	spec_vinyl_scale			= 1.0 - min(diffuse_sample.w, cvVinylScales.y);
	envmap_vinyl_scale			= 1.0 - min(diffuse_sample.w, cvVinylScales.z);

	float3	diffuse_light		= lerp(dot(IN.diffuse.xyz, float3(0.333, 0.333, 0.333)), IN.diffuse.xyz, diffuse_vinyl_scale);
	float3	diffuse_final		= diffuse_light * diffuse_sample.xyz;


	// Envmap
	float4	envmap_sample		= texCUBE  (ENVIROMAP_SAMPLER,	reflection);
	envmap_sample.xyz			= DeCompressColourSpace(envmap_sample.xyz);
	float3	envmap_color		= envmap_vinyl_scale * (envmap_sample.xyz * IN.envmap_scale.xyz);
		
	// Specular
	//
	//	This is a little different than a normal spec at the 'trick' part
	//	the trick allows us to have a spec with a hot center colour that falls off
	//	into a another colour.  render the colour before and after the 'trick'
	//	to see the difference
	//
	float spec_dot = saturate(dot(flake_spec_reflection, cmLocalDirectionMatrix[0].xyz));
	spec_dot = pow(spec_dot, cvPowers.y);
	float3 spec_col = cmLocalColourMatrix[0].xyz * (cvSpecularMin.xyz + (cvSpecularRange.xyz*spec_dot));
	spec_col *= spec_vinyl_scale * spec_dot;
	
	float shadow = DoShadowCar(IN.shadow_tex, n_dot_l, shadowDetail);
	shadow = saturate(shadow + 0.5);

	// Total up the final colour
	float4	OUT = float4(0,0,0,diffuse_sample.w);
	
	float ambient_occl = IN.uv_occ_bias.z;
	
	OUT.xyz += spec_col * ambient_occl * shadow;
	OUT.xyz	+= diffuse_final * ambient_occl; 
	OUT.xyz	+= (envmap_color * IN.normal.w * ambient_occl);

#if !defined(NO_FOG)
	OUT.xyz = CalcFogColour(OUT.xyz, IN.fog);
#endif // NO_FOG
	OUT.xyz = CompressColourSpace(OUT.xyz);

	return OUT;
}

#ifndef USE_TANGENT
float4 PS_CarLowLOD_360(const PS_INPUT_LOD IN)
{
	// Texture Samples
	float4	diffuse_sample		= tex2Dbias(DIFFUSE_SAMPLER,	IN.uv_occ_bias);

	// Vinyl Scales
	float	diffuse_vinyl_scale;
	float	spec_vinyl_scale;
	float	envmap_vinyl_scale;

	diffuse_vinyl_scale			= (1 - diffuse_sample.w)*cvVinylScales.x;
	spec_vinyl_scale			= 1.0 - min(diffuse_sample.w, cvVinylScales.y);
	envmap_vinyl_scale			= 1.0 - min(diffuse_sample.w, cvVinylScales.z);

	float3	diffuse_light		= lerp(dot(IN.diffuse.xyz, float3(0.333, 0.333, 0.333)), IN.diffuse.xyz, diffuse_vinyl_scale);
	float3	diffuse_final		= diffuse_light * diffuse_sample.xyz;

	// Specular
	//
	//	This is a little different than a normal spec at the 'trick' part
	//	the trick allows us to have a spec with a hot center colour that falls off
	//	into a another colour.  render the colour before and after the 'trick'
	//	to see the difference
	//
	float spec_dot = saturate(dot(IN.reflection.xyz, cmLocalDirectionMatrix[0].xyz));
	spec_dot = pow(spec_dot, cvPowers.y);
	float3 spec_col = cmLocalColourMatrix[0].xyz * (cvSpecularMin.xyz + (cvSpecularRange.xyz*spec_dot));
	spec_col *= spec_vinyl_scale * spec_dot;

	// Total up the final colour
	float4	OUT = float4(0,0,0,diffuse_sample.w);

	float ambient_occl = IN.uv_occ_bias.z;

	OUT.xyz += spec_col * ambient_occl;
	OUT.xyz	+= diffuse_final * ambient_occl; 

#if !defined(NO_FOG)
	OUT.xyz = CalcFogColour(OUT.xyz, IN.fog);
#endif // NO_FOG
	OUT.xyz = CompressColourSpace(OUT.xyz);

	return OUT;
}

float4 PS_CarLowLOD_PS3(const PS_INPUT_LOD IN)
{
	//return 0;
	//return float4(CompressColourSpace(cmLocalColourMatrix[0].xyz * cmLocalDirectionMatrix[0].xyz),1);
	// Texture Samples
	float4	diffuse_sample		= tex2Dbias(DIFFUSE_SAMPLER,	IN.uv_occ_bias);

	// Vinyl Scales
	half	diffuse_vinyl_scale;
	half	spec_vinyl_scale;
	half	envmap_vinyl_scale;

	diffuse_vinyl_scale			= (1 - diffuse_sample.w)*cvVinylScales.x;
	spec_vinyl_scale			= 1.0 - min(diffuse_sample.w, cvVinylScales.y);
	envmap_vinyl_scale			= 1.0 - min(diffuse_sample.w, cvVinylScales.z);

	half3	diffuse_light		= lerp(dot(IN.diffuse.xyz, half3(0.333, 0.333, 0.333)), IN.diffuse.xyz, diffuse_vinyl_scale);
	half3	diffuse_final		= diffuse_light * diffuse_sample.xyz;

	// Specular
	//
	//	This is a little different than a normal spec at the 'trick' part
	//	the trick allows us to have a spec with a hot center colour that falls off
	//	into a another colour.  render the colour before and after the 'trick'
	//	to see the difference
	//
	half spec_dot = (half)saturate(dot(IN.reflection.xyz, cmLocalDirectionMatrix[0].xyz));
	spec_dot = pow(spec_dot, cvPowers.y);
	half3 spec_col = cmLocalColourMatrix[0].xyz * (cvSpecularMin.xyz + (cvSpecularRange.xyz*spec_dot));
	spec_col *= spec_vinyl_scale * spec_dot;

	// Total up the final colour
	float4	OUT = float4(0,0,0,diffuse_sample.w);

	half ambient_occl = IN.uv_occ_bias.z;

	OUT.xyz += spec_col * ambient_occl;
	OUT.xyz	+= diffuse_final * ambient_occl; 
#if !defined(NO_FOG)
	OUT.xyz = CalcFogColour(OUT.xyz, IN.fog);
#endif // NO_FOG
	OUT.xyz = CompressColourSpace(OUT.xyz);

	return OUT;
}

#endif // #ifndef USE_TANGENT

#if defined (ENABLE_BLUR)
float4 PS_CarHighLOD_PS3(const PS_INPUT IN, float4 w : wPos)

#else
float4 PS_CarHighLOD_PS3(const PS_INPUT IN, int shadowDetail = ShadowShaderDetail_HIGH)

#endif
{
	//return float4(CompressColourSpace(cmLocalColourMatrix[0].xyz * cmLocalDirectionMatrix[0].xyz),1);

	float3 normal = normalize(IN.normal.xyz);

	// Inputs
	float3	position			= IN.noise_dmg.xyz;
    float3	view_direction		= normalize(IN.view.xyz);


	// Texture Samples
	float4	diffuse_sample		= tex2Dbias(DIFFUSE_SAMPLER,	IN.uv_occ_bias);
	//float4	noise_sample	= tex3Dbias(VOLUMEMAP_SAMPLER,	float4(position,-3));
	float4	noise_sample		= noise(position.xyz);

	//return float4(reflection, 1);
	//return envmap_sample;
	//return noise_sample;
	
	// Noise
	float3	flake_noise_vec			= normal;//IN.view.www * normalize(noise_sample.rgb*2 - 1);
	float3	flake_spec_normal		= normalize( normal + flake_noise_vec );
	float3	flake_spec_reflection	= reflect  (-view_direction, flake_spec_normal );
	
	float3 reflection = reflect(-view_direction, normal);
	reflection = mul(reflection, (float3x4)cmWorldMat).xyz;
	
	float n_dot_l = saturate(dot(cmLocalDirectionMatrix[0].xyz, flake_spec_normal));
	//return float4(CompressColourSpace(float3(n_dot_l,n_dot_l,n_dot_l)), 1);;
		
	// Vinyl Scales
	float	diffuse_vinyl_scale;
	float	spec_vinyl_scale;
	float	envmap_vinyl_scale;

	diffuse_vinyl_scale			= (1 - diffuse_sample.w)*cvVinylScales.x;
	spec_vinyl_scale			= 1.0 - min(diffuse_sample.w, cvVinylScales.y);
	envmap_vinyl_scale			= 1.0 - min(diffuse_sample.w, cvVinylScales.z);

	float3	diffuse_light		= lerp(dot(IN.diffuse.xyz, float3(0.333, 0.333, 0.333)), IN.diffuse.xyz, diffuse_vinyl_scale);
	float3	diffuse_final		= diffuse_light * diffuse_sample.xyz;

	//return float4(CompressColourSpace(diffuse_sample), 1);

	// Envmap
	float4	envmap_sample		= texCUBE  (ENVIROMAP_SAMPLER,	reflection);
	envmap_sample.xyz			= DeCompressColourSpace(envmap_sample.xyz);
	float3	envmap_color		= envmap_vinyl_scale.rrr * (envmap_sample.rgb * IN.envmap_scale.rgb);
		
	float spec_dot = saturate(dot(flake_spec_reflection, cmLocalDirectionMatrix[0].xyz));
	spec_dot = pow(spec_dot, cvPowers.y);
	float3 spec_col = cmLocalColourMatrix[0].xyz * (cvSpecularMin.rgb + (cvSpecularRange.rgb*spec_dot));
	spec_col *= spec_vinyl_scale * spec_dot;
	
	float shadow = DoShadow( IN.shadow_tex, n_dot_l, shadowDetail);

	// Total up the final colour
	float4	OUT = float4(0,0,0,diffuse_sample.w);

	float ambient_occl = IN.uv_occ_bias.z;

	OUT.xyz += spec_col * ambient_occl * shadow;
	OUT.xyz	+= diffuse_final * ambient_occl; 
	OUT.xyz	+= (envmap_color * IN.normal.w * ambient_occl);

#if !defined(NO_FOG)
	OUT.xyz = CalcFogColour(OUT.xyz, IN.fog);
#endif // NO_FOG


#if defined (ENABLE_BLUR)

	float4 result;
	float2 blurTexCoord;

	blurTexCoord.x = w.x / (1280 );
	blurTexCoord.y = 1 - w.y / (720);

	float len =  length(IN.position_dmg.xyz/20);
	len = clamp(len, 0, 1);


	result.xyz = 0;
	for( int i=0; i	&lt; 16; i++ )
	{
		result += tex2D(MISCMAP1_SAMPLER, blurTexCoord + cavSampleOffsets[i].xy );;
	}
		
	result /= 16;

	OUT.xyz = (result.xyz * (1-len)) + OUT.xyz * (len);//+ (OUT.xyz /2);

#endif

	OUT.xyz	= CompressColourSpace(OUT.xyz);
	return OUT;
}

#if defined(USE_TANGENT)
float4 PS_CarNormalMapHighLOD(const PS_INPUT IN, int shadowDetail = ShadowShaderDetail_HIGH)
{
	float3 n = normalize(IN.normal.xyz);
	float3 t = normalize(IN.tangent.xyz);
	float3 b = cross(n, t); //* IN.tangent.w;


	float3x3 tbn = {t, b, n};

	float w = IN.noise_dmg.w;
	//return w;
	
    float3	view_direction = normalize(IN.view.xyz);

	//w *= saturate(dot(view_direction, n));
	w *= IN.diffuse.a;
	
	// per pixel damage -&gt; normal vector
	float3 normal = tex2Dbias(NORMALMAP_SAMPLER, IN.uv_occ_bias).xyz;
	
	normal = normal * 2 - 1;
	normal.z = sqrt(1 - dot(normal.xy, normal.xy)); // this doesnt need to be correctly calculated (we can skip sqrt)
	
	normal = normalize(lerp(float3(0, 0, 1), normal, w));
	normal = mul(normal, tbn);

	// Texture Samples
	float4	vinyl_sample		= tex2Dbias(AMBIENT_SAMPLER,	IN.uv_occ_bias);
	float4	diffuse_sample		= tex2Dbias(DIFFUSE_SAMPLER,	IN.uv_occ_bias);

	//return diffuse_sample.w;

	float3	flake_spec_normal		= GetNoiseNormal(IN, normal);
	float3	flake_spec_reflection	= reflect(-view_direction, flake_spec_normal);

	float3 reflection = reflect(-view_direction, normal);
	reflection = mul(reflection, (float3x4)cmWorldMat).xyz;


	// Vinyl Scales
	float	diffuse_vinyl_scale;
	float	spec_vinyl_scale;
	float	envmap_vinyl_scale;

	diffuse_vinyl_scale			= min(vinyl_sample.w, 1 - cvVinylScales.x);
 	spec_vinyl_scale			= 1 - min(diffuse_sample.w, cvVinylScales.y);
 	envmap_vinyl_scale			= 1 - min(diffuse_sample.w, cvVinylScales.z);

// 	spec_vinyl_scale			= diffuse_sample.w*(1 - cvVinylScales.y);
// 	envmap_vinyl_scale			= diffuse_sample.w*(1 - cvVinylScales.z);

	// Diffuse
	float4	diffuse_paint;
	float4	diffuse_vinyl;
	float4	diffuse_final;

	float shadow = 1;
	float4 diffuse;

	diffuse.xyz = CalculateShaperRigDiffuse(normal, IN.shadow_tex, shadow, shadowDetail);
	diffuse.w = 1;	

	
	// Diffuse Vinyl min/max or Paint min/max
	float vdotn = saturate(dot(view_direction, normal)) + NV_POWER_NEAR_ZERO_HACK;
	vdotn = pow(vdotn, cvPowers.x);
	vdotn = min(vdotn, cvClampAndScales.x) * cvClampAndScales.z;

	
	float4 shaper = diffuse;
	diffuse.xyz *= cvDiffuseMin.xyz + (vdotn * cvDiffuseRange.xyz);
	
	
	float4 vinyl_light = lerp(float4(IN.envmap_scale.w, IN.envmap_scale.w, IN.envmap_scale.w, 0), diffuse, cvVinylScales.x);

	diffuse_paint				= lerp(diffuse,  diffuse_sample*diffuse, cvVinylScales.x);
	diffuse_vinyl				= shaper*vinyl_light*vinyl_sample;
	
	diffuse_final.xyz			= lerp(diffuse_paint.xyz, diffuse_vinyl.xyz, diffuse_vinyl_scale);	
	diffuse_final.w				= diffuse_sample.w;
	
	// Envmap
	float4	envmap_sample		= texCUBE  (ENVIROMAP_SAMPLER,	reflection) ;
	envmap_sample.xyz			= DeCompressColourSpace(envmap_sample.xyz);
	float3	envmap_color		= envmap_vinyl_scale * (envmap_sample.xyz * IN.envmap_scale.xyz);


	float4 scratch = tex2Dbias(MISCMAP1_SAMPLER, IN.uv_occ_bias);
	float  sc = 1 - (scratch.w) * min(w, 1 - cvVinylScales.x);


	envmap_color *= sc;
		
	float spec_dot = saturate(dot(flake_spec_reflection, cmLocalDirectionMatrix[0].xyz));
	spec_dot = pow(spec_dot, cvPowers.y);
	float3 spec_col = cmLocalColourMatrix[0].xyz * (cvSpecularMin.xyz + (cvSpecularRange.xyz*spec_dot));
	spec_col *= spec_vinyl_scale * spec_dot;

	
	scratch.xyz *= (shaper.xyz * 2);
	scratch.xyz += (spec_col*(1-sc)*7);
	
	// Total up the final colour
	float4	OUT = float4(0,0,0,diffuse_final.w);
	
	float ambient_occl = IN.uv_occ_bias.z;



	//Hack to lose spec from shadowed areas
	//spec_col = spec_col * (shadow * shadow);
	shadow = (shadow - 0.5) * 2;
	
	OUT.xyz += spec_col * sc * ambient_occl * shadow;
	OUT.xyz	+= lerp(scratch.xyz, diffuse_final.xyz, sc) * ambient_occl;
	OUT.xyz	+= (envmap_color * IN.normal.w * ambient_occl);


	

#if !defined(NO_FOG)
	OUT.xyz = CalcFogColour(OUT.xyz, IN.fog);
#endif // NO_FOG
	OUT.xyz = CompressColourSpace(OUT.xyz);
	
	return OUT;
}

float4 PS_CarNormalMapLowLOD(const PS_INPUT_LOD IN)
{
	float3 n = normalize(IN.normal.xyz);
	float3 t = normalize(IN.tangent.xyz);
	float3 b = cross(n, t);// * IN.tangent.w;

	float3x3 tbn = {t, b, n};

	float w = IN.normal.w;

	w *= IN.diffuse.a;

	// per pixel damage -&gt; normal vector
	float3 normal = tex2Dbias(NORMALMAP_SAMPLER, IN.uv_occ_bias).xyz;

	normal = normal * 2 - 1;
	normal.z = sqrt(1 - dot(normal.xy, normal.xy)); // this doesnt need to be correctly calculated (we can skip sqrt)

	normal = normalize(lerp(float3(0, 0, 1), normal, w));
	normal = mul(normal, tbn);

	float3 r = reflect(-IN.view_direction.xyz, normal);
	float3 reflection = mul(r, (float3x4)cmWorldMat).xyz;

	// Texture Samples
	float4	vinyl_sample		= tex2Dbias(AMBIENT_SAMPLER,	IN.uv_occ_bias);
	float4	diffuse_sample		= tex2Dbias(DIFFUSE_SAMPLER,	IN.uv_occ_bias);

	// Vinyl Scales
	float	diffuse_vinyl_scale;
	float	spec_vinyl_scale;
	float	envmap_vinyl_scale;

	diffuse_vinyl_scale			= min(vinyl_sample.w, 1 - cvVinylScales.x);
	spec_vinyl_scale			= 1 - min(diffuse_sample.w, cvVinylScales.y);
	envmap_vinyl_scale			= 1 - min(diffuse_sample.w, cvVinylScales.z);

	// Diffuse
	float4	diffuse_paint;
	float4	diffuse_vinyl;
	float4	diffuse_final;

	float shadow = 1;
	float4 diffuse;

	float4 dummy = {0,0,0,0};

	//diffuse.xyz = CalculateShaperRigDiffuse(normal, IN.shadow_tex, shadow, true);
	diffuse.xyz = CalculateShaperRigDiffuse(normal, dummy, shadow, ShadowShaderDetail_OFF);
	diffuse.w = 1;	

	// Diffuse Vinyl min/max or Paint min/max
	float vdotn = saturate(dot(IN.view_direction.xyz, normal)) + NV_POWER_NEAR_ZERO_HACK;
	vdotn = pow(vdotn, cvPowers.x);
	vdotn = min(vdotn, cvClampAndScales.x) * cvClampAndScales.z;

	float4 shaper = diffuse;
	diffuse.xyz *= cvDiffuseMin.xyz + (vdotn * cvDiffuseRange.xyz);

	float4 vinyl_light = lerp(float4(IN.envmap_scale.w, IN.envmap_scale.w, IN.envmap_scale.w, 0), diffuse, cvVinylScales.x);

	diffuse_paint				= lerp(diffuse,  diffuse_sample*diffuse, cvVinylScales.x);
	diffuse_vinyl				= shaper*vinyl_light*vinyl_sample;


	diffuse_final.xyz			= lerp(diffuse_paint.xyz, diffuse_vinyl.xyz, diffuse_vinyl_scale);	
	diffuse_final.w				= diffuse_sample.w;


	// Envmap
	float4	envmap_sample		= texCUBE  (ENVIROMAP_SAMPLER,	reflection) ;
	envmap_sample.xyz			= DeCompressColourSpace(envmap_sample.xyz);
	float3	envmap_color		= envmap_vinyl_scale * (envmap_sample.xyz * IN.envmap_scale.xyz);

	float4 scratch = tex2Dbias(MISCMAP1_SAMPLER, IN.uv_occ_bias);
	float  sc = 1 - (scratch.w) * min(w, 1 - cvVinylScales.x);


	envmap_color *= sc;


	float spec_dot = saturate(dot(r, cmLocalDirectionMatrix[0].xyz));
	spec_dot = pow(spec_dot, cvPowers.y);
	float3 spec_col = cmLocalColourMatrix[0].xyz * (cvSpecularMin.xyz + (cvSpecularRange.xyz*spec_dot));
	spec_col *= spec_vinyl_scale * spec_dot;


	scratch.xyz *= (shaper.xyz * 2);
	scratch.xyz += (spec_col*(1-sc)*7);

	// Total up the final colour
	float4	OUT = float4(0,0,0,diffuse_final.w);

	float ambient_occl = IN.uv_occ_bias.z;

	//Hack to lose spec from shadowed areas
	//spec_col = spec_col * (shadow * shadow);
	shadow = (shadow - 0.5) * 2;

	OUT.xyz += spec_col * sc * ambient_occl * shadow;
	OUT.xyz	+= lerp(scratch.xyz, diffuse_final.xyz, sc) * ambient_occl;
	OUT.xyz	+= (envmap_color * IN.view_direction.w * ambient_occl);

#if !defined(NO_FOG)
	OUT.xyz = CalcFogColour(OUT.xyz, IN.fog);
#endif // NO_FOG
	OUT.xyz = CompressColourSpace(OUT.xyz);

	return OUT;
}
#if 1
float4 PS_CarNormalMapHighLOD_PS3(const PS_INPUT IN, int shadowDetail = ShadowShaderDetail_HIGH)
{
	//return float4(CompressColourSpace(cmLocalColourMatrix[0].xyz * cmLocalDirectionMatrix[0].xyz),1);


	// per pixel damage -&gt; normal vector
	half3 normal = tex2Dbias(NORMALMAP_SAMPLER, IN.uv_occ_bias).xyz;

	// Texture Samples
	float4	vinyl_sample		= tex2Dbias(AMBIENT_SAMPLER,	IN.uv_occ_bias);
	float4	diffuse_sample		= tex2Dbias(DIFFUSE_SAMPLER,	IN.uv_occ_bias);


	half3 n = normalize(IN.normal.xyz);
	half3 t = normalize(IN.tangent.xyz);
	half3 b = cross(n, t);// * IN.tangent.w;
	half3x3 tbn = {t, b, n};
	//float3 b = cross( IN.normal.xyz, IN.tangent.xyz );
	//float3x3 tbn = { IN.tangent.xyz, b, IN.normal.xyz };


	half w = IN.noise_dmg.w;

    half3	view_direction = normalize(IN.view.xyz);
//	float3	view_direction = IN.view.xyz;
	w *= IN.diffuse.a;


	normal = normal * 2 - 1;
//	normal.z = sqrt(1 - dot(normal.xy, normal.xy)); // this doesnt need to be correctly calculated (we can skip sqrt)
	normal.z = 1 - dot(normal.xy, normal.xy);

	//normal = normalize(lerp(float3(0, 0, 1), normal, w));
	normal = lerp(half3(0, 0, 1), normal, w);
	normal = mul(normal, tbn);

	// Inputs
	float3	position			= IN.noise_dmg.xyz;

	
	half3	flake_spec_normal		= normal; //noise(normal*IN.noise_dmg.xyz*IN.view.w); //GetNoiseNormal(IN, normal);
	half3	flake_spec_reflection	= reflect(-view_direction, flake_spec_normal);

	half3 reflection = reflect(-view_direction, normal);
	reflection = mul(half4(reflection, 0.0f), cmWorldMat).xyz;
	
	// Vinyl Scales
	half	diffuse_vinyl_scale;
	half	spec_vinyl_scale;
	half	envmap_vinyl_scale;

	diffuse_vinyl_scale			= min(vinyl_sample.w, 1 - cvVinylScales.x);
 	spec_vinyl_scale			= 1 - min(diffuse_sample.w, cvVinylScales.y);
 	envmap_vinyl_scale			= 1 - min(diffuse_sample.w, cvVinylScales.z);
		
	float shadow_n_dot_l = saturate(dot(cmLocalDirectionMatrix[0].xyz, flake_spec_normal));
	//return float4(CompressColourSpace(float3(shadow_n_dot_l,shadow_n_dot_l,shadow_n_dot_l)), 1);

	// Diffuse
	float4	diffuse_paint;
	float4	diffuse_vinyl;
	float4	diffuse_final;
	
	float shadow = 1;
	float4 diffuse;

	diffuse.xyz = CalculateShaperRigDiffuse(normal, IN.shadow_tex, shadow, shadowDetail);
	diffuse.w = 1;	
	
	// Diffuse Vinyl min/max or Paint min/max
	float vdotn = saturate(dot(view_direction, normal)) + NV_POWER_NEAR_ZERO_HACK;
	vdotn = pow(vdotn, cvPowers.x);
	vdotn = min(vdotn, cvClampAndScales.x) * cvClampAndScales.z;
	
	
	float4 shaper = diffuse;
	diffuse.xyz *= cvDiffuseMin.xyz + (vdotn * cvDiffuseRange.xyz);
	
	
	float4 vinyl_light = lerp(float4(IN.envmap_scale.w, IN.envmap_scale.w, IN.envmap_scale.w, 0), diffuse, cvVinylScales.x);

	diffuse_paint				= lerp(diffuse,  diffuse_sample*diffuse, cvVinylScales.x);
	diffuse_vinyl				= shaper*vinyl_light*vinyl_sample;
	
	
	diffuse_final.xyz			= lerp(diffuse_paint.xyz, diffuse_vinyl.xyz, diffuse_vinyl_scale);	
	diffuse_final.w				= diffuse_sample.w;
	

	// Envmap
	float4	envmap_sample		= texCUBE  (ENVIROMAP_SAMPLER,	reflection) ;
	envmap_sample.xyz			= DeCompressColourSpace(envmap_sample.xyz);
	float3	envmap_color		= envmap_vinyl_scale * (envmap_sample.xyz * IN.envmap_scale.xyz);

	float4 scratch = tex2Dbias(MISCMAP1_SAMPLER, IN.uv_occ_bias);
	float  sc = 1 - (scratch.w) * min(w, 1 - cvVinylScales.x);


	envmap_color *= sc;
	
	//return (envmap_sample * IN.envmap_scale);

	float spec_dot = saturate(dot(flake_spec_reflection, cmLocalDirectionMatrix[0].xyz));
	spec_dot = pow(spec_dot, cvPowers.y);
	float3 spec_col = cmLocalColourMatrix[0].xyz * (cvSpecularMin.xyz + (cvSpecularRange.xyz*spec_dot));
	spec_col *= spec_vinyl_scale * spec_dot;
	
	scratch.xyz *= (shaper.xyz * 2);
	scratch.xyz += (spec_col*(1-sc)*7);
		
	// Total up the final colour
	float4	OUT = float4(0,0,0,diffuse_final.w);
	
	half ambient_occl = IN.uv_occ_bias.z;
	
	//Hack to lose spec from shadowed areas
	//spec_col = spec_col * (shadow * shadow);
	shadow = (shadow - 0.5) * 2;
	
	OUT.xyz += spec_col * sc * ambient_occl * shadow;
	OUT.xyz	+= lerp(scratch.xyz, diffuse_final.xyz, sc) * ambient_occl;
	OUT.xyz	+= (envmap_color * IN.normal.w * ambient_occl);

	// hack to prevent overflowing log space
	//OUT		 = min(CalcFogColour(OUT, IN.fog), 100);	
#ifndef NO_FOG
	OUT.xyz = CalcFogColour(OUT.xyz, IN.fog);
#endif
	OUT.xyz  = CompressColourSpace(OUT.xyz);
	
	return OUT;
}
#else

float4 PS_CarNormalMapHighLOD_PS3(const PS_INPUT IN, int shadowDetail = ShadowShaderDetail_HIGH)
{
	// per pixel damage -&gt; normal vector
	float3 normal = tex2Dbias(NORMALMAP_SAMPLER, IN.uv_occ_bias).xyz;

	// Texture Samples
	float4	vinyl_sample		= tex2Dbias(AMBIENT_SAMPLER,	IN.uv_occ_bias);
	float4	diffuse_sample		= tex2Dbias(DIFFUSE_SAMPLER,	IN.uv_occ_bias);


	float3 n = normalize(IN.normal.xyz);
	float3 t = normalize(IN.tangent.xyz);
	float3 b = cross(n, t);// * IN.tangent.w;
	float3x3 tbn = {t, b, n};
	//float3 b = cross( IN.normal.xyz, IN.tangent.xyz );
	//float3x3 tbn = { IN.tangent.xyz, b, IN.normal.xyz };


	float w = IN.noise_dmg.w;

    float3	view_direction = normalize(IN.view.xyz);
//	float3	view_direction = IN.view.xyz;
	w *= IN.diffuse.a;


	normal = normal * 2 - 1;
//	normal.z = sqrt(1 - dot(normal.xy, normal.xy)); // this doesnt need to be correctly calculated (we can skip sqrt)
	normal.z = 1 - dot(normal.xy, normal.xy);

	//normal = normalize(lerp(float3(0, 0, 1), normal, w));
	normal = lerp(float3(0, 0, 1), normal, w);
	normal = mul(normal, tbn);

	// Inputs
	float3	position			= IN.noise_dmg.xyz;

	
	float3	flake_spec_normal		= noise(normal*IN.noise_dmg.xyz*IN.view.w); //GetNoiseNormal(IN, normal);
	float3	flake_spec_reflection	= reflect(-view_direction, flake_spec_normal);

	float3 reflection = reflect(-view_direction, normal);
	reflection = mul(float4(reflection, 0.0f), cmWorldMat).xyz;
	
	// Vinyl Scales
	float	diffuse_vinyl_scale;
	float	spec_vinyl_scale;
	float	envmap_vinyl_scale;

	diffuse_vinyl_scale			= min(vinyl_sample.w, 1 - cvVinylScales.x);
 	spec_vinyl_scale			= 1 - min(diffuse_sample.w, cvVinylScales.y);
 	envmap_vinyl_scale			= 1 - min(diffuse_sample.w, cvVinylScales.z);
		
	float shadow_n_dot_l = saturate(dot(cmLocalDirectionMatrix[0].xyz, flake_spec_normal));
	
	// Diffuse
	float4	diffuse_paint;
	float4	diffuse_vinyl;
	float4	diffuse_final;
	
	float shadow = 1;
	float4 diffuse;

	diffuse.xyz = CalculateShaperRigDiffuse(normal, IN.shadow_tex, shadow, shadowDetail);
	diffuse.w = 1;	
	
	// Diffuse Vinyl min/max or Paint min/max
	float vdotn = saturate(dot(view_direction, normal)) + NV_POWER_NEAR_ZERO_HACK;
	vdotn = pow(vdotn, cvPowers.x);
	vdotn = min(vdotn, cvClampAndScales.x) * cvClampAndScales.z;
	
	
	float4 shaper = diffuse;
	diffuse.xyz *= cvDiffuseMin.xyz + (vdotn * cvDiffuseRange.xyz);
	
	
	float4 vinyl_light = lerp(float4(IN.envmap_scale.w, IN.envmap_scale.w, IN.envmap_scale.w, 0), diffuse, cvVinylScales.x);

	diffuse_paint				= lerp(diffuse,  diffuse_sample*diffuse, cvVinylScales.x);
	diffuse_vinyl				= shaper*vinyl_light*vinyl_sample;
	
	
	diffuse_final.xyz			= lerp(diffuse_paint.xyz, diffuse_vinyl.xyz, diffuse_vinyl_scale);	
	diffuse_final.w				= diffuse_sample.w;
	

	// Envmap
	float4	envmap_sample		= texCUBE  (ENVIROMAP_SAMPLER,	reflection) ;
	envmap_sample.xyz			= DeCompressColourSpace(envmap_sample.xyz);
	float3	envmap_color		= envmap_vinyl_scale * (envmap_sample.xyz * IN.envmap_scale.xyz);

	float4 scratch = tex2Dbias(MISCMAP1_SAMPLER, IN.uv_occ_bias);
	float  sc = 1 - (scratch.w) * min(w, 1 - cvVinylScales.x);


	envmap_color *= sc;
	
	//return (envmap_sample * IN.envmap_scale);

	float spec_dot = saturate(dot(flake_spec_reflection, cmLocalDirectionMatrix[0].xyz));
	spec_dot = pow(spec_dot, cvPowers.y);
	float3 spec_col = cmLocalColourMatrix[0].xyz * (cvSpecularMin.xyz + (cvSpecularRange.xyz*spec_dot));
	spec_col *= spec_vinyl_scale * spec_dot;
	
	scratch.xyz *= (shaper.xyz * 2);
	scratch.xyz += (spec_col*(1-sc)*7);
		
	// Total up the final colour
	float4	OUT = float4(0,0,0,diffuse_final.w);
	
	float ambient_occl = IN.uv_occ_bias.z;
	
	//Hack to lose spec from shadowed areas
	//spec_col = spec_col * (shadow * shadow);
	shadow = (shadow - 0.5) * 2;
	
	OUT.xyz += spec_col * sc * ambient_occl * shadow;
	OUT.xyz	+= lerp(scratch.xyz, diffuse_final.xyz, sc) * ambient_occl;
	OUT.xyz	+= (envmap_color * IN.normal.w * ambient_occl);

	// hack to prevent overflowing log space
	//OUT		 = min(CalcFogColour(OUT, IN.fog), 100);	
#ifndef NO_FOG
	OUT.xyz = CalcFogColour(OUT.xyz, IN.fog);
#endif
	OUT.xyz  = CompressColourSpace(OUT.xyz);
	
	return OUT;
}

#endif





#endif // USE_TANGENT
#endif // _CARX_H_
</file>
  <file id="9" path="D:\eax-build1-s09-xenon\Oban\Speed\Xenon\Src\Render\Shaders\ZPrePass_fx.h" time="01c7f8c7-b0dbfa16">/////////////////////////////////////////////////////////////////////////////////////////

struct PS_INPUT_Z
{
	float4 position		: POSITION;
};

PS_INPUT_Z ZPassVertexShader(const VS_INPUT IN)
{
	PS_INPUT_Z OUT;

	OUT.position = mul(IN.position, cmWorldViewProj);

	return OUT;
}

technique ZPrePass &lt;int shader = 1;&gt;
{
	pass p0
	{
		VertexShader		= compile vs_1_1 ZPassVertexShader();
		PixelShader			= NULL;
	}
}

/////////////////////////////////////////////////////////////////////////////////////////
struct PS_INPUT_VERTEX_COLOUR
{
	float4 position			: POSITION;
	float4 color			: COLOR;
};

PS_INPUT_VERTEX_COLOUR VertexShaderVertexColour(	float4 position : POSITION,
													float4 color    : COLOR)
{
	PS_INPUT_VERTEX_COLOUR OUT;

	OUT.position = mul(position, cmWorldViewProj);
	OUT.color	 = color;

	return OUT;
}

float4 PixelShaderVertexColour(const PS_INPUT_VERTEX_COLOUR IN) : COLOR0
{
	return IN.color;
}

technique RenderVertexColour &lt;int shader = 1;&gt;
{
	pass p0
	{
		VertexShader = compile vs_1_1 VertexShaderVertexColour();
		PixelShader  = compile ps_2_0 PixelShaderVertexColour();
	}
}

/////////////////////////////////////////////////////////////////////////////////////////
</file>
  <file id="10" path="D:\eax-build1-s09-xenon\Oban\Speed\Xenon\Src\Render\Shaders\shadowmap_fx.h" time="01c7f8c7-b0ffbd6b">/////////////////////////////////////////////////////////////////////////////////////////
//	Shadow Map Shaders
/////////////////////////////////////////////////////////////////////////////////////////

float4 CalcShadowBias(float4 pos)
{
	float4 Pbias;

	float4 Porig = mul(pos, cmWorldMat);

	Porig.w = 1.0f;

	float4 tmp = mul(Porig, cmShadowMapBiasMatrix); // Porig * M'

	tmp.xy /= tmp.w;

	//tmp.x *= tmp.x;//dot(tmp.xyz, tmp.xyz);
	
	float L_tex = cfShadowMapBiasA + cfShadowMapBiasB * abs(tmp.x);
	
	Pbias.xyz = Porig.xyz + cvLightDirection.xyz * L_tex;

	Pbias = mul(float4(Pbias.xyz,1), cmShadowMapVP);

	//Pbias.x = tmp.x;//L_tex;
	//Pbias = mul(Porig, cmShadowMapVP);
	//Pbias.x = cmShadowMapWVP[0][0];//dot(Pbias.xyz, Pbias.xyz);
	//Pbias.x = (cfShadowMapBiasA);// + cfShadowMapBiasB * L_tex);

	return Pbias;
}


PS_INPUT_LISPSM VertexShaderLiSPSM(const VS_INPUT IN, uniform bool use_matrix_palette)
{
	PS_INPUT_LISPSM OUT;

	float4 position = float4(IN.position.xyz, 1);

// car matrix palette specific
#ifdef CAR_SHADER 
	if (use_matrix_palette)
	{
		int index = IN.color.z * 15.1;

		float4x4 tm = camBlendMatrices[index];

		// clear damage context information
		tm[2].w = 0;
		tm[3].w = 1;

		position = mul(position, tm);
	}
#endif 

	OUT.position = mul(position, cmWorldViewProj);



	return OUT;
}

/////////////////////////////////////////////////////////////////////////////////////////

PS_INPUT_LISPSM_ALPHA VertexShaderLiSPSMAlpha(const VS_INPUT IN)
{
	PS_INPUT_LISPSM_ALPHA OUT;

	float4 position = float4(IN.position.xyz, 1);

	OUT.position = mul(position, cmWorldViewProj);


	OUT.diffuse_tex.xy = IN.tex.xy;

	OUT.diffuse_tex.zw = 1.0f;

	return OUT;
}

/////////////////////////////////////////////////////////////////////////////////////////

PS_OUTPUT_LISPSM PixelShaderLiSPSM(const PS_INPUT_LISPSM IN)
{
	PS_OUTPUT_LISPSM OUT;

	OUT.color = 0;

//	OUT.depth = saturate(IN.light_tex.z / IN.light_tex.w);

	return OUT;
}

/////////////////////////////////////////////////////////////////////////////////////////

PS_OUTPUT_LISPSM PixelShaderLiSPSMAlpha(const PS_INPUT_LISPSM_ALPHA IN)
{
	PS_OUTPUT_LISPSM OUT;

	OUT.color = 0;

//	OUT.depth = saturate(IN.light_tex.z / IN.light_tex.w);
	
	float4 v_tex = tex2D(DIFFUSE_SAMPLER, IN.diffuse_tex);

	clip( v_tex.w - cfShadowMapAlphaMin );
	
	return OUT;
}

/////////////////////////////////////////////////////////////////////////////////////////

technique RenderLiSPSM &lt;int shader = 1;&gt;
{
    pass p0
    {
		VertexShader = compile vs_1_1 VertexShaderLiSPSM(false);
		PixelShader  = NULL;//compile ps_3_0 PixelShaderLiSPSM();
    }
}

/////////////////////////////////////////////////////////////////////////////////////////

technique RenderLiSPSMMatrixPalette &lt;int shader = 1;&gt;
{
	pass p0
	{
		VertexShader = compile vs_1_1 VertexShaderLiSPSM(true);
		PixelShader  = NULL;//compile ps_3_0 PixelShaderLiSPSM();
	}
}

/////////////////////////////////////////////////////////////////////////////////////////

technique RenderLiSPSMAlphaTex &lt;int shader = 1;&gt;
{
    pass p0
    {
		VertexShader = compile vs_1_1 VertexShaderLiSPSMAlpha();
		PixelShader  = compile ps_3_0 PixelShaderLiSPSMAlpha();
    }
}

/////////////////////////////////////////////////////////////////////////////////////////

PS_INPUT_TSM VertexShaderTSM(const VS_INPUT IN, uniform bool use_matrix_palette)
{
	PS_INPUT_TSM OUT;

	float4 position = float4(IN.position.xyz, 1);

// car matrix palette specific
#ifdef CAR_SHADER 
	if (use_matrix_palette)
	{
		int index = IN.color.z * 15.1;
		position = mul(position, camBlendMatrices[index]);
	}
#endif 


	OUT.position = mul(position, cmWorldViewProj);

	OUT.light_tex = mul(position, cmLightWVP);

//	OUT.position.z = OUT.light_tex.z / OUT.light_tex.w;

//	OUT.position.z *= OUT.position.w;

	return OUT;
}

/////////////////////////////////////////////////////////////////////////////////////////

PS_INPUT_TSM_ALPHA VertexShaderTSMAlpha(const VS_INPUT IN)
{
	PS_INPUT_TSM_ALPHA OUT;

	float4 position = float4(IN.position.xyz, 1);

	OUT.position = mul(position, cmWorldViewProj);

	OUT.diffuse_tex.xy = IN.tex.xy;
	OUT.diffuse_tex.zw = 1.0f;

	OUT.light_tex = mul(position, cmLightWVP);

//	OUT.position.z = OUT.light_tex.z / OUT.light_tex.w;

//	OUT.position.z *= OUT.position.w;

	return OUT;
}

/////////////////////////////////////////////////////////////////////////////////////////

PS_OUTPUT_TSM PixelShaderTSM(const PS_INPUT_TSM IN)
{
	PS_OUTPUT_TSM	OUT;

	OUT.color = 1.0;

	OUT.depth = IN.light_tex.z / IN.light_tex.w;

	return OUT;
}

/////////////////////////////////////////////////////////////////////////////////////////

PS_OUTPUT_TSM PixelShaderTSMAlpha(const PS_INPUT_TSM_ALPHA IN)
{
	PS_OUTPUT_TSM OUT;

	OUT.color = 1.0;
	
	OUT.depth = IN.light_tex.z / IN.light_tex.w;

	//if ( ciShadowMapAlphaEnabled )
	{
		float4 v_tex = tex2D(DIFFUSE_SAMPLER, IN.diffuse_tex);
		clip( v_tex.w - cfShadowMapAlphaMin );
	}

	return OUT;
}

/////////////////////////////////////////////////////////////////////////////////////////

technique RenderTSM &lt;int shader = 1;&gt;
{
    pass p0
    {
		VertexShader = compile vs_1_1 VertexShaderTSM(false);
		PixelShader  = compile ps_3_0 PixelShaderTSM();
    }
}

/////////////////////////////////////////////////////////////////////////////////////////

technique RenderTSMMatrixPalette &lt;int shader = 1;&gt;
{
	pass p0
	{
		VertexShader = compile vs_1_1 VertexShaderTSM(true);
		PixelShader  = compile ps_3_0 PixelShaderTSM();
	}
}

/////////////////////////////////////////////////////////////////////////////////////////

technique RenderTSMAlphaTex &lt;int shader = 1;&gt;
{
    pass p0
    {
		VertexShader = compile vs_1_1 VertexShaderTSMAlpha();
		PixelShader  = compile ps_3_0 PixelShaderTSMAlpha();
    }
}
/*
/////////////////////////////////////////////////////////////////////////////////////////

struct PS_INPUT_WORLD
{
	float4 position : POSITION;
};

/////////////////////////////////////////////////////////////////////////////////////////

PS_INPUT_WORLD VertexShaderWorld(const VS_INPUT IN)
{
	PS_INPUT_WORLD OUT;

	OUT.position = mul(IN.position, cmWorldViewProj);

	return OUT;
}

/////////////////////////////////////////////////////////////////////////////////////////

struct PS_INPUT_WORLD_TEX
{
	float4 position		: POSITION;
	float2 diffuse_tex	: TEXCOORD0;
};

/////////////////////////////////////////////////////////////////////////////////////////

PS_INPUT_WORLD_TEX VertexShaderWorldTex(const VS_INPUT IN)
{
	PS_INPUT_WORLD_TEX OUT;

	OUT.position	= mul(IN.position, cmWorldViewProj);
	OUT.diffuse_tex	= IN.tex;

	return OUT;
}

/////////////////////////////////////////////////////////////////////////////////////////

PS_OUTPUT PixelShaderWhite(const PS_INPUT_WORLD IN)
{
	PS_OUTPUT OUT;

	OUT.color = 1.0f;

	return OUT;
}

/////////////////////////////////////////////////////////////////////////////////////////

PS_OUTPUT PixelShaderTexelDensity(const PS_INPUT_WORLD_TEX IN)
{
	PS_OUTPUT OUT;

	OUT.color.x   = fmod( floor( IN.diffuse_tex.x*cfDiffuseMapWidth /10 ), 2 );
	OUT.color.y   = fmod( floor( IN.diffuse_tex.y*cfDiffuseMapHeight/10 ), 2 );
	OUT.color.xyz = fmod( OUT.color.x+OUT.color.y, 2 );
	OUT.color.w   = 1.0f;

	return OUT;
}

/////////////////////////////////////////////////////////////////////////////////////////

PS_OUTPUT PixelShaderWhiteAlphaTex( const PS_INPUT_WORLD_TEX IN )
{
	PS_OUTPUT OUT;

	float4	v_tex = tex2D(DIFFUSE_SAMPLER, IN.diffuse_tex);

	// check alpha
	if ( v_tex.w &gt; cfShadowMapAlphaMin )
	{
		OUT.color = ( 1.0f, 1.0f, 1.0f, 1.0f );
	}
	else
	{
		// generate texkill
		float	v_kill = -1.0f;
		clip( v_kill );
	}

	return OUT;
}

/////////////////////////////////////////////////////////////////////////////////////////

technique RenderWhite &lt;int shader = 1;&gt;
{
    pass p0
    {
		VertexShader = compile vs_1_1 VertexShaderWorld();
        PixelShader  = compile ps_3_0 PixelShaderWhite();
    }
}

/////////////////////////////////////////////////////////////////////////////////////////

technique RenderTexelDensity &lt;int shader = 1;&gt;
{
    pass p0
    {
		VertexShader = compile vs_1_1 VertexShaderWorldTex();
        PixelShader  = compile ps_3_0 PixelShaderTexelDensity();
    }
}

/////////////////////////////////////////////////////////////////////////////////////////

technique RenderWhiteAlphaTex &lt;int shader = 1;&gt;
{
    pass p0
    {
		VertexShader = compile vs_1_1 VertexShaderWorldTex();
        PixelShader  = compile ps_3_0 PixelShaderWhiteAlphaTex();
    }
}
*/
/////////////////////////////////////////////////////////////////////////////////////////
</file>
 </files>
 <tool name="FXLite">
  <defines>
   <define name="PLAT_XENON" value="" />
  </defines>
  <arguments>
   <argument name="/Zi" value="false" />
   <argument name="/Vd" value="false" />
   <argument name="/Xu0_deprecated" value="false" />
   <argument name="/Odu_deprecated" value="false" />
   <argument name="/XOd_" value="false" />
   <argument name="/XOu" value="false" />
   <argument name="/Xmaxtempreg" value="0" />
   <argument name="PsSampBase" value="0" />
   <argument name="PsSampCount" value="0" />
   <argument name="VsSampBase" value="0" />
   <argument name="VsSampCount" value="0" />
   <argument name="VsInstCount" value="0" />
   <argument name="PsInstCount" value="0" />
   <argument name="/Od" value="false" />
   <argument name="/Zpr" value="false" />
   <argument name="/Zpc" value="false" />
   <argument name="/Gpp" value="false" />
   <argument name="/Op" value="false" />
   <argument name="/Gfa" value="false" />
   <argument name="/Gfp" value="false" />
   <argument name="/XZc:zeroInit" value="false" />
   <argument name="/XVe" value="false" />
   <argument name="/Xbe:3-" value="false" />
   <argument name="/Xbe:1-" value="false" />
   <argument name="/XQInomaskedexports" value="false" />
   <argument name="/XOautoz" value="false" />
   <argument name="/XfxAv" value="false" />
   <argument name="/XfxAs" value="false" />
   <argument name="/XfxPv" value="false" />
  </arguments>
 </tool>
 <shaders>
  <shader entrypoint="PixelShaderTSMAlpha" target="ps_3_0" FxlTechniqueName="NoMatrixPalette" FxlTechnique="9" FxlPassName="p0" FxlPass="0" ZPass="0" pdbHint="4e4a0000-08362a8e-aef0f5b7">
   <constanttable>
    <constant register="s0">
     <type name="DIFFUSE_SAMPLER" class="object" type="sampler2D" />
    </constant>
    <constant register="c144">
     <type name="cvShadowParams0" class="vector" type="float" columns="4" />
    </constant>
   </constanttable>
   <sourcemap>
    <statement pc="2" file="10" line="220" scope="-1" lastinstruction="0" />
    <statement pc="0.1" file="10" line="220" scope="-1" lastinstruction="0" />
    <statement pc="3" file="10" line="221" scope="-1" lastinstruction="0" />
    <statement pc="4" file="10" line="221" scope="-1" lastinstruction="0" />
    <statement pc="5" file="10" line="224" scope="-1" lastinstruction="0" />
    <statement pc="6" file="10" line="216" scope="-1" lastinstruction="0" />
   </sourcemap>
   <variables>
   </variables>
   <variableDebugInfo>
   </variableDebugInfo>
   <scopes>
   </scopes>
   <funcInfo>
    <function id="0" name="PixelShaderTSMAlpha" retID="519">
     <parameter id="518" />
    </function>
    <function id="1" name="PixelShaderTSM" retID="516">
     <parameter id="515" />
    </function>
    <function id="2" name="VertexShaderTSMAlpha" retID="512">
     <parameter id="511" />
    </function>
    <function id="3" name="VertexShaderTSM" retID="507">
     <parameter id="505" />
     <parameter id="506" />
    </function>
    <function id="4" name="PixelShaderLiSPSMAlpha" retID="499">
     <parameter id="498" />
    </function>
    <function id="5" name="PixelShaderLiSPSM" retID="496">
     <parameter id="495" />
    </function>
    <function id="6" name="VertexShaderLiSPSMAlpha" retID="492">
     <parameter id="491" />
    </function>
    <function id="7" name="VertexShaderLiSPSM" retID="486">
     <parameter id="484" />
     <parameter id="485" />
    </function>
    <function id="8" name="CalcShadowBias" retID="479">
     <parameter id="478" />
    </function>
    <function id="9" name="PixelShaderVertexColour" retID="476">
     <parameter id="475" />
    </function>
    <function id="10" name="VertexShaderVertexColour" retID="473">
     <parameter id="471" />
     <parameter id="472" />
    </function>
    <function id="11" name="ZPassVertexShader" retID="465">
     <parameter id="464" />
    </function>
    <function id="12" name="PS_LowLOD" retID="459">
     <parameter id="458" />
    </function>
    <function id="13" name="PS_HighLOD" retID="457">
     <parameter id="456" />
    </function>
    <function id="14" name="PS_CarHighLOD_PS3" retID="433">
     <parameter id="431" />
     <parameter id="432" />
     <parameter id="0" />
    </function>
    <function id="15" name="PS_CarLowLOD_PS3" retID="420">
     <parameter id="419" />
    </function>
    <function id="16" name="PS_CarLowLOD_360" retID="408">
     <parameter id="407" />
    </function>
    <function id="17" name="PS_CarHighLOD" retID="387">
     <parameter id="385" />
     <parameter id="386" />
     <parameter id="0" />
    </function>
    <function id="18" name="GetNoiseNormal" retID="382">
     <parameter id="380" />
     <parameter id="381" />
    </function>
    <function id="19" name="VS_CarNormalMapHighLOD_PC" retID="369">
     <parameter id="366" />
     <parameter id="367" />
     <parameter id="368" />
    </function>
    <function id="20" name="VS_CarNormalMapLowLOD" retID="355">
     <parameter id="352" />
     <parameter id="353" />
     <parameter id="354" />
    </function>
    <function id="21" name="VS_CarNormalMapHighLOD" retID="341">
     <parameter id="338" />
     <parameter id="339" />
     <parameter id="340" />
    </function>
    <function id="22" name="VS_CarLowLOD_PS3" retID="326">
     <parameter id="324" />
     <parameter id="325" />
    </function>
    <function id="23" name="VS_CarLowLOD" retID="312">
     <parameter id="310" />
     <parameter id="311" />
    </function>
    <function id="24" name="VS_CarLowLOD_PS3" retID="297">
     <parameter id="294" />
     <parameter id="295" />
     <parameter id="296" />
    </function>
    <function id="25" name="VS_CarLowLOD_360" retID="281">
     <parameter id="278" />
     <parameter id="279" />
     <parameter id="280" />
    </function>
    <function id="26" name="VS_CarHighLOD_PS3" retID="265">
     <parameter id="262" />
     <parameter id="263" />
     <parameter id="264" />
    </function>
    <function id="27" name="VS_CarHighLOD" retID="249">
     <parameter id="246" />
     <parameter id="247" />
     <parameter id="248" />
    </function>
    <function id="28" name="CalculateShaperRigDiffuse" retID="230">
     <parameter id="226" />
     <parameter id="227" />
     <parameter id="228" />
     <parameter id="229" />
     <parameter id="0" />
    </function>
    <function id="29" name="ReadPositionNormalTangent" retID="224">
     <parameter id="218" />
     <parameter id="219" />
     <parameter id="220" />
     <parameter id="221" />
     <parameter id="222" />
     <parameter id="223" />
    </function>
    <function id="30" name="GetLocalBinormal" retID="214">
     <parameter id="213" />
    </function>
    <function id="31" name="GetLocalTangent" retID="211">
     <parameter id="209" />
     <parameter id="210" />
    </function>
    <function id="32" name="GetLocalTangent" retID="207">
     <parameter id="206" />
    </function>
    <function id="33" name="GetLocalNormal" retID="205">
     <parameter id="203" />
     <parameter id="204" />
    </function>
    <function id="34" name="GetLocalNormal" retID="202">
     <parameter id="201" />
    </function>
    <function id="35" name="GetLocalPosition" retID="200">
     <parameter id="198" />
     <parameter id="199" />
    </function>
    <function id="36" name="GetLocalPosition" retID="197">
     <parameter id="196" />
    </function>
    <function id="37" name="GetPixelDamage" retID="195">
     <parameter id="194" />
    </function>
    <function id="38" name="GetMatrix" retID="192">
     <parameter id="189" />
     <parameter id="190" />
     <parameter id="191" />
    </function>
    <function id="39" name="CalcPostProcessFog" retID="151">
     <parameter id="149" />
     <parameter id="150" />
    </function>
    <function id="40" name="CalcFogColour" retID="148">
     <parameter id="146" />
     <parameter id="147" />
    </function>
    <function id="41" name="CalcVertexFog" retID="139">
     <parameter id="138" />
    </function>
    <function id="42" name="DoShadowCar" retID="134">
     <parameter id="131" />
     <parameter id="132" />
     <parameter id="133" />
     <parameter id="0" />
    </function>
    <function id="43" name="DoShadowOptimized" retID="126">
     <parameter id="122" />
     <parameter id="123" />
     <parameter id="124" />
     <parameter id="125" />
     <parameter id="0" />
    </function>
    <function id="44" name="DoShadow" retID="115">
     <parameter id="112" />
     <parameter id="113" />
     <parameter id="114" />
     <parameter id="0" />
    </function>
    <function id="45" name="DoShadowPCFDepth" retID="106">
     <parameter id="102" />
     <parameter id="103" />
     <parameter id="104" />
     <parameter id="105" />
    </function>
    <function id="46" name="Tex2DOffset" retID="98">
     <parameter id="95" />
     <parameter id="96" />
     <parameter id="97" />
    </function>
    <function id="47" name="GetShadowMapTexCoord" retID="93">
     <parameter id="92" />
    </function>
    <function id="48" name="VertexShadowPosView" retID="91">
     <parameter id="90" />
    </function>
    <function id="49" name="VertexShadowTexOptimized" retID="87">
     <parameter id="84" />
     <parameter id="85" />
     <parameter id="86" />
    </function>
    <function id="50" name="VertexShadowTex" retID="83">
     <parameter id="82" />
    </function>
    <function id="51" name="GetCombinedBrightness" retID="33">
     <parameter id="32" />
    </function>
    <function id="52" name="GetAdaptedLuminanceFromSampler" retID="30">
     <parameter id="29" />
    </function>
    <function id="53" name="DecodeRGBE8" retID="24">
     <parameter id="23" />
    </function>
    <function id="54" name="EncodeRGBE8" retID="19">
     <parameter id="18" />
    </function>
    <function id="55" name="DeCompressColourSpace" retID="17">
     <parameter id="16" />
    </function>
    <function id="56" name="CompressColourSpace" retID="15">
     <parameter id="14" />
    </function>
    <function id="57" name="ScaleHeadLightIntensity" retID="12">
     <parameter id="11" />
    </function>
    <function id="58" name="CalcVertexColour" retID="9">
     <parameter id="8" />
    </function>
    <function id="59" name="screen_position" retID="7">
     <parameter id="6" />
    </function>
    <function id="60" name="world_position" retID="4">
     <parameter id="3" />
    </function>
   </funcInfo>
   <funcEntryExitInfo>
   </funcEntryExitInfo>
   <VfetchInfo>
   </VfetchInfo>
   <InterpolatorInfo>
    <Interpolator Register="0" Semantic="0x50" Mask="xyzw" />
    <Interpolator Register="1" Semantic="0x51" Mask="xyzw" />
   </InterpolatorInfo>
   <LiteralFloats>
    <Float Register="252" value0="0" value1="0" value2="0" value3="0" />
    <Float Register="253" value0="0" value1="0" value2="0" value3="0" />
    <Float Register="254" value0="0" value1="0" value2="0" value3="0" />
    <Float Register="255" value0="1" value1="0" value2="0" value3="0" />
   </LiteralFloats>
   <LiteralInts>
   </LiteralInts>
   <LiteralBools>
   </LiteralBools>
  </shader>
  <shader entrypoint="VertexShaderTSMAlpha" target="vs_3_0" FxlTechniqueName="NoMatrixPalette" FxlTechnique="9" FxlPassName="p0" FxlPass="0" ZPass="0" pdbHint="4e4a0001-08362a8e-aef0f5b7">
   <constanttable>
    <constant register="c20" count="4">
     <type name="cmLightWVP" class="matrix_columns" type="float" rows="4" columns="4" />
    </constant>
    <constant register="c24" count="4">
     <type name="cmWorldViewProj" class="matrix_columns" type="float" rows="4" columns="4" />
    </constant>
   </constanttable>
   <sourcemap>
    <statement pc="3" file="10" line="175" scope="-1" lastinstruction="0" />
    <statement pc="4" file="10" line="175" scope="-1" lastinstruction="0" />
    <statement pc="0.1" file="10" line="175" scope="-1" lastinstruction="0" />
    <statement pc="5" file="10" line="181" scope="-1" lastinstruction="0" />
    <statement pc="6" file="10" line="181" scope="-1" lastinstruction="0" />
    <statement pc="7" file="10" line="181" scope="-1" lastinstruction="0" />
    <statement pc="8" file="10" line="181" scope="-1" lastinstruction="0" />
    <statement pc="1.1" file="10" line="181" scope="-1" lastinstruction="0" />
    <statement pc="9" file="10" line="192" scope="-1" lastinstruction="0" />
    <statement pc="10" file="10" line="186" scope="-1" lastinstruction="0" />
    <statement pc="11" file="10" line="186" scope="-1" lastinstruction="0" />
    <statement pc="12" file="10" line="186" scope="-1" lastinstruction="0" />
    <statement pc="13" file="10" line="186" scope="-1" lastinstruction="0" />
   </sourcemap>
   <variables>
   </variables>
   <variableDebugInfo>
   </variableDebugInfo>
   <scopes>
   </scopes>
   <funcInfo>
    <function id="0" name="PixelShaderTSMAlpha" retID="519">
     <parameter id="518" />
    </function>
    <function id="1" name="PixelShaderTSM" retID="516">
     <parameter id="515" />
    </function>
    <function id="2" name="VertexShaderTSMAlpha" retID="512">
     <parameter id="511" />
    </function>
    <function id="3" name="VertexShaderTSM" retID="507">
     <parameter id="505" />
     <parameter id="506" />
    </function>
    <function id="4" name="PixelShaderLiSPSMAlpha" retID="499">
     <parameter id="498" />
    </function>
    <function id="5" name="PixelShaderLiSPSM" retID="496">
     <parameter id="495" />
    </function>
    <function id="6" name="VertexShaderLiSPSMAlpha" retID="492">
     <parameter id="491" />
    </function>
    <function id="7" name="VertexShaderLiSPSM" retID="486">
     <parameter id="484" />
     <parameter id="485" />
    </function>
    <function id="8" name="CalcShadowBias" retID="479">
     <parameter id="478" />
    </function>
    <function id="9" name="PixelShaderVertexColour" retID="476">
     <parameter id="475" />
    </function>
    <function id="10" name="VertexShaderVertexColour" retID="473">
     <parameter id="471" />
     <parameter id="472" />
    </function>
    <function id="11" name="ZPassVertexShader" retID="465">
     <parameter id="464" />
    </function>
    <function id="12" name="PS_LowLOD" retID="459">
     <parameter id="458" />
    </function>
    <function id="13" name="PS_HighLOD" retID="457">
     <parameter id="456" />
    </function>
    <function id="14" name="PS_CarHighLOD_PS3" retID="433">
     <parameter id="431" />
     <parameter id="432" />
     <parameter id="0" />
    </function>
    <function id="15" name="PS_CarLowLOD_PS3" retID="420">
     <parameter id="419" />
    </function>
    <function id="16" name="PS_CarLowLOD_360" retID="408">
     <parameter id="407" />
    </function>
    <function id="17" name="PS_CarHighLOD" retID="387">
     <parameter id="385" />
     <parameter id="386" />
     <parameter id="0" />
    </function>
    <function id="18" name="GetNoiseNormal" retID="382">
     <parameter id="380" />
     <parameter id="381" />
    </function>
    <function id="19" name="VS_CarNormalMapHighLOD_PC" retID="369">
     <parameter id="366" />
     <parameter id="367" />
     <parameter id="368" />
    </function>
    <function id="20" name="VS_CarNormalMapLowLOD" retID="355">
     <parameter id="352" />
     <parameter id="353" />
     <parameter id="354" />
    </function>
    <function id="21" name="VS_CarNormalMapHighLOD" retID="341">
     <parameter id="338" />
     <parameter id="339" />
     <parameter id="340" />
    </function>
    <function id="22" name="VS_CarLowLOD_PS3" retID="326">
     <parameter id="324" />
     <parameter id="325" />
    </function>
    <function id="23" name="VS_CarLowLOD" retID="312">
     <parameter id="310" />
     <parameter id="311" />
    </function>
    <function id="24" name="VS_CarLowLOD_PS3" retID="297">
     <parameter id="294" />
     <parameter id="295" />
     <parameter id="296" />
    </function>
    <function id="25" name="VS_CarLowLOD_360" retID="281">
     <parameter id="278" />
     <parameter id="279" />
     <parameter id="280" />
    </function>
    <function id="26" name="VS_CarHighLOD_PS3" retID="265">
     <parameter id="262" />
     <parameter id="263" />
     <parameter id="264" />
    </function>
    <function id="27" name="VS_CarHighLOD" retID="249">
     <parameter id="246" />
     <parameter id="247" />
     <parameter id="248" />
    </function>
    <function id="28" name="CalculateShaperRigDiffuse" retID="230">
     <parameter id="226" />
     <parameter id="227" />
     <parameter id="228" />
     <parameter id="229" />
     <parameter id="0" />
    </function>
    <function id="29" name="ReadPositionNormalTangent" retID="224">
     <parameter id="218" />
     <parameter id="219" />
     <parameter id="220" />
     <parameter id="221" />
     <parameter id="222" />
     <parameter id="223" />
    </function>
    <function id="30" name="GetLocalBinormal" retID="214">
     <parameter id="213" />
    </function>
    <function id="31" name="GetLocalTangent" retID="211">
     <parameter id="209" />
     <parameter id="210" />
    </function>
    <function id="32" name="GetLocalTangent" retID="207">
     <parameter id="206" />
    </function>
    <function id="33" name="GetLocalNormal" retID="205">
     <parameter id="203" />
     <parameter id="204" />
    </function>
    <function id="34" name="GetLocalNormal" retID="202">
     <parameter id="201" />
    </function>
    <function id="35" name="GetLocalPosition" retID="200">
     <parameter id="198" />
     <parameter id="199" />
    </function>
    <function id="36" name="GetLocalPosition" retID="197">
     <parameter id="196" />
    </function>
    <function id="37" name="GetPixelDamage" retID="195">
     <parameter id="194" />
    </function>
    <function id="38" name="GetMatrix" retID="192">
     <parameter id="189" />
     <parameter id="190" />
     <parameter id="191" />
    </function>
    <function id="39" name="CalcPostProcessFog" retID="151">
     <parameter id="149" />
     <parameter id="150" />
    </function>
    <function id="40" name="CalcFogColour" retID="148">
     <parameter id="146" />
     <parameter id="147" />
    </function>
    <function id="41" name="CalcVertexFog" retID="139">
     <parameter id="138" />
    </function>
    <function id="42" name="DoShadowCar" retID="134">
     <parameter id="131" />
     <parameter id="132" />
     <parameter id="133" />
     <parameter id="0" />
    </function>
    <function id="43" name="DoShadowOptimized" retID="126">
     <parameter id="122" />
     <parameter id="123" />
     <parameter id="124" />
     <parameter id="125" />
     <parameter id="0" />
    </function>
    <function id="44" name="DoShadow" retID="115">
     <parameter id="112" />
     <parameter id="113" />
     <parameter id="114" />
     <parameter id="0" />
    </function>
    <function id="45" name="DoShadowPCFDepth" retID="106">
     <parameter id="102" />
     <parameter id="103" />
     <parameter id="104" />
     <parameter id="105" />
    </function>
    <function id="46" name="Tex2DOffset" retID="98">
     <parameter id="95" />
     <parameter id="96" />
     <parameter id="97" />
    </function>
    <function id="47" name="GetShadowMapTexCoord" retID="93">
     <parameter id="92" />
    </function>
    <function id="48" name="VertexShadowPosView" retID="91">
     <parameter id="90" />
    </function>
    <function id="49" name="VertexShadowTexOptimized" retID="87">
     <parameter id="84" />
     <parameter id="85" />
     <parameter id="86" />
    </function>
    <function id="50" name="VertexShadowTex" retID="83">
     <parameter id="82" />
    </function>
    <function id="51" name="GetCombinedBrightness" retID="33">
     <parameter id="32" />
    </function>
    <function id="52" name="GetAdaptedLuminanceFromSampler" retID="30">
     <parameter id="29" />
    </function>
    <function id="53" name="DecodeRGBE8" retID="24">
     <parameter id="23" />
    </function>
    <function id="54" name="EncodeRGBE8" retID="19">
     <parameter id="18" />
    </function>
    <function id="55" name="DeCompressColourSpace" retID="17">
     <parameter id="16" />
    </function>
    <function id="56" name="CompressColourSpace" retID="15">
     <parameter id="14" />
    </function>
    <function id="57" name="ScaleHeadLightIntensity" retID="12">
     <parameter id="11" />
    </function>
    <function id="58" name="CalcVertexColour" retID="9">
     <parameter id="8" />
    </function>
    <function id="59" name="screen_position" retID="7">
     <parameter id="6" />
    </function>
    <function id="60" name="world_position" retID="4">
     <parameter id="3" />
    </function>
   </funcInfo>
   <funcEntryExitInfo>
   </funcEntryExitInfo>
   <VfetchInfo>
    <vfetch Address="3" Register="1" DestSwizzle="xyz1" Semantic="0x00" End="false" />
    <vfetch Address="4" Register="0" DestSwizzle="xy1_" Semantic="0x50" End="true" />
   </VfetchInfo>
   <InterpolatorInfo>
    <Interpolator Register="0" Semantic="0x50" Mask="xyzw" />
    <Interpolator Register="1" Semantic="0x51" Mask="xyzw" />
   </InterpolatorInfo>
   <LiteralFloats>
   </LiteralFloats>
   <LiteralInts>
   </LiteralInts>
   <LiteralBools>
   </LiteralBools>
  </shader>
  <shader entrypoint="PixelShaderTSM" target="ps_3_0" FxlTechniqueName="MatrixPalette" FxlTechnique="8" FxlPassName="p0" FxlPass="0" ZPass="0" pdbHint="4e4a0002-08362a8e-aef0f5b7">
   <constanttable>
   </constanttable>
   <sourcemap>
    <statement pc="1" file="10" line="203" scope="-1" lastinstruction="0" />
    <statement pc="2" file="10" line="205" scope="-1" lastinstruction="0" />
    <statement pc="3" file="10" line="203" scope="-1" lastinstruction="0" />
   </sourcemap>
   <variables>
   </variables>
   <variableDebugInfo>
   </variableDebugInfo>
   <scopes>
   </scopes>
   <funcInfo>
    <function id="0" name="PixelShaderTSMAlpha" retID="519">
     <parameter id="518" />
    </function>
    <function id="1" name="PixelShaderTSM" retID="516">
     <parameter id="515" />
    </function>
    <function id="2" name="VertexShaderTSMAlpha" retID="512">
     <parameter id="511" />
    </function>
    <function id="3" name="VertexShaderTSM" retID="507">
     <parameter id="505" />
     <parameter id="506" />
    </function>
    <function id="4" name="PixelShaderLiSPSMAlpha" retID="499">
     <parameter id="498" />
    </function>
    <function id="5" name="PixelShaderLiSPSM" retID="496">
     <parameter id="495" />
    </function>
    <function id="6" name="VertexShaderLiSPSMAlpha" retID="492">
     <parameter id="491" />
    </function>
    <function id="7" name="VertexShaderLiSPSM" retID="486">
     <parameter id="484" />
     <parameter id="485" />
    </function>
    <function id="8" name="CalcShadowBias" retID="479">
     <parameter id="478" />
    </function>
    <function id="9" name="PixelShaderVertexColour" retID="476">
     <parameter id="475" />
    </function>
    <function id="10" name="VertexShaderVertexColour" retID="473">
     <parameter id="471" />
     <parameter id="472" />
    </function>
    <function id="11" name="ZPassVertexShader" retID="465">
     <parameter id="464" />
    </function>
    <function id="12" name="PS_LowLOD" retID="459">
     <parameter id="458" />
    </function>
    <function id="13" name="PS_HighLOD" retID="457">
     <parameter id="456" />
    </function>
    <function id="14" name="PS_CarHighLOD_PS3" retID="433">
     <parameter id="431" />
     <parameter id="432" />
     <parameter id="0" />
    </function>
    <function id="15" name="PS_CarLowLOD_PS3" retID="420">
     <parameter id="419" />
    </function>
    <function id="16" name="PS_CarLowLOD_360" retID="408">
     <parameter id="407" />
    </function>
    <function id="17" name="PS_CarHighLOD" retID="387">
     <parameter id="385" />
     <parameter id="386" />
     <parameter id="0" />
    </function>
    <function id="18" name="GetNoiseNormal" retID="382">
     <parameter id="380" />
     <parameter id="381" />
    </function>
    <function id="19" name="VS_CarNormalMapHighLOD_PC" retID="369">
     <parameter id="366" />
     <parameter id="367" />
     <parameter id="368" />
    </function>
    <function id="20" name="VS_CarNormalMapLowLOD" retID="355">
     <parameter id="352" />
     <parameter id="353" />
     <parameter id="354" />
    </function>
    <function id="21" name="VS_CarNormalMapHighLOD" retID="341">
     <parameter id="338" />
     <parameter id="339" />
     <parameter id="340" />
    </function>
    <function id="22" name="VS_CarLowLOD_PS3" retID="326">
     <parameter id="324" />
     <parameter id="325" />
    </function>
    <function id="23" name="VS_CarLowLOD" retID="312">
     <parameter id="310" />
     <parameter id="311" />
    </function>
    <function id="24" name="VS_CarLowLOD_PS3" retID="297">
     <parameter id="294" />
     <parameter id="295" />
     <parameter id="296" />
    </function>
    <function id="25" name="VS_CarLowLOD_360" retID="281">
     <parameter id="278" />
     <parameter id="279" />
     <parameter id="280" />
    </function>
    <function id="26" name="VS_CarHighLOD_PS3" retID="265">
     <parameter id="262" />
     <parameter id="263" />
     <parameter id="264" />
    </function>
    <function id="27" name="VS_CarHighLOD" retID="249">
     <parameter id="246" />
     <parameter id="247" />
     <parameter id="248" />
    </function>
    <function id="28" name="CalculateShaperRigDiffuse" retID="230">
     <parameter id="226" />
     <parameter id="227" />
     <parameter id="228" />
     <parameter id="229" />
     <parameter id="0" />
    </function>
    <function id="29" name="ReadPositionNormalTangent" retID="224">
     <parameter id="218" />
     <parameter id="219" />
     <parameter id="220" />
     <parameter id="221" />
     <parameter id="222" />
     <parameter id="223" />
    </function>
    <function id="30" name="GetLocalBinormal" retID="214">
     <parameter id="213" />
    </function>
    <function id="31" name="GetLocalTangent" retID="211">
     <parameter id="209" />
     <parameter id="210" />
    </function>
    <function id="32" name="GetLocalTangent" retID="207">
     <parameter id="206" />
    </function>
    <function id="33" name="GetLocalNormal" retID="205">
     <parameter id="203" />
     <parameter id="204" />
    </function>
    <function id="34" name="GetLocalNormal" retID="202">
     <parameter id="201" />
    </function>
    <function id="35" name="GetLocalPosition" retID="200">
     <parameter id="198" />
     <parameter id="199" />
    </function>
    <function id="36" name="GetLocalPosition" retID="197">
     <parameter id="196" />
    </function>
    <function id="37" name="GetPixelDamage" retID="195">
     <parameter id="194" />
    </function>
    <function id="38" name="GetMatrix" retID="192">
     <parameter id="189" />
     <parameter id="190" />
     <parameter id="191" />
    </function>
    <function id="39" name="CalcPostProcessFog" retID="151">
     <parameter id="149" />
     <parameter id="150" />
    </function>
    <function id="40" name="CalcFogColour" retID="148">
     <parameter id="146" />
     <parameter id="147" />
    </function>
    <function id="41" name="CalcVertexFog" retID="139">
     <parameter id="138" />
    </function>
    <function id="42" name="DoShadowCar" retID="134">
     <parameter id="131" />
     <parameter id="132" />
     <parameter id="133" />
     <parameter id="0" />
    </function>
    <function id="43" name="DoShadowOptimized" retID="126">
     <parameter id="122" />
     <parameter id="123" />
     <parameter id="124" />
     <parameter id="125" />
     <parameter id="0" />
    </function>
    <function id="44" name="DoShadow" retID="115">
     <parameter id="112" />
     <parameter id="113" />
     <parameter id="114" />
     <parameter id="0" />
    </function>
    <function id="45" name="DoShadowPCFDepth" retID="106">
     <parameter id="102" />
     <parameter id="103" />
     <parameter id="104" />
     <parameter id="105" />
    </function>
    <function id="46" name="Tex2DOffset" retID="98">
     <parameter id="95" />
     <parameter id="96" />
     <parameter id="97" />
    </function>
    <function id="47" name="GetShadowMapTexCoord" retID="93">
     <parameter id="92" />
    </function>
    <function id="48" name="VertexShadowPosView" retID="91">
     <parameter id="90" />
    </function>
    <function id="49" name="VertexShadowTexOptimized" retID="87">
     <parameter id="84" />
     <parameter id="85" />
     <parameter id="86" />
    </function>
    <function id="50" name="VertexShadowTex" retID="83">
     <parameter id="82" />
    </function>
    <function id="51" name="GetCombinedBrightness" retID="33">
     <parameter id="32" />
    </function>
    <function id="52" name="GetAdaptedLuminanceFromSampler" retID="30">
     <parameter id="29" />
    </function>
    <function id="53" name="DecodeRGBE8" retID="24">
     <parameter id="23" />
    </function>
    <function id="54" name="EncodeRGBE8" retID="19">
     <parameter id="18" />
    </function>
    <function id="55" name="DeCompressColourSpace" retID="17">
     <parameter id="16" />
    </function>
    <function id="56" name="CompressColourSpace" retID="15">
     <parameter id="14" />
    </function>
    <function id="57" name="ScaleHeadLightIntensity" retID="12">
     <parameter id="11" />
    </function>
    <function id="58" name="CalcVertexColour" retID="9">
     <parameter id="8" />
    </function>
    <function id="59" name="screen_position" retID="7">
     <parameter id="6" />
    </function>
    <function id="60" name="world_position" retID="4">
     <parameter id="3" />
    </function>
   </funcInfo>
   <funcEntryExitInfo>
   </funcEntryExitInfo>
   <VfetchInfo>
   </VfetchInfo>
   <InterpolatorInfo>
    <Interpolator Register="0" Semantic="0x51" Mask="xyzw" />
   </InterpolatorInfo>
   <LiteralFloats>
    <Float Register="252" value0="0" value1="0" value2="0" value3="0" />
    <Float Register="253" value0="0" value1="0" value2="0" value3="0" />
    <Float Register="254" value0="0" value1="0" value2="0" value3="0" />
    <Float Register="255" value0="1" value1="0" value2="0" value3="0" />
   </LiteralFloats>
   <LiteralInts>
   </LiteralInts>
   <LiteralBools>
   </LiteralBools>
  </shader>
  <shader entrypoint="VertexShaderTSM" target="vs_3_0" FxlTechniqueName="MatrixPalette" FxlTechnique="8" FxlPassName="p0" FxlPass="0" ZPass="0" pdbHint="4e4a0003-08362a8e-aef0f5b7">
   <constanttable>
    <constant register="c52" count="64">
     <type name="camBlendMatrices" class="matrix_columns" type="float" rows="4" columns="4" elements="16" />
    </constant>
    <constant register="c20" count="4">
     <type name="cmLightWVP" class="matrix_columns" type="float" rows="4" columns="4" />
    </constant>
    <constant register="c24" count="4">
     <type name="cmWorldViewProj" class="matrix_columns" type="float" rows="4" columns="4" />
    </constant>
   </constanttable>
   <sourcemap>
    <statement pc="3" file="10" line="146" scope="-1" lastinstruction="0" />
    <statement pc="4" file="10" line="146" scope="-1" lastinstruction="0" />
    <statement pc="0.1" file="10" line="146" scope="-1" lastinstruction="0" />
    <statement pc="5" file="10" line="156" scope="-1" lastinstruction="0" />
    <statement pc="6" file="10" line="156" scope="-1" lastinstruction="0" />
    <statement pc="7" file="10" line="157" scope="-1" lastinstruction="0" />
    <statement pc="8" file="10" line="157" scope="-1" lastinstruction="0" />
    <statement pc="9" file="10" line="157" scope="-1" lastinstruction="0" />
    <statement pc="10" file="10" line="157" scope="-1" lastinstruction="0" />
    <statement pc="11" file="10" line="157" scope="-1" lastinstruction="0" />
    <statement pc="12" file="10" line="157" scope="-1" lastinstruction="0" />
    <statement pc="13" file="10" line="162" scope="-1" lastinstruction="0" />
    <statement pc="14" file="10" line="162" scope="-1" lastinstruction="0" />
    <statement pc="15" file="10" line="162" scope="-1" lastinstruction="0" />
    <statement pc="16" file="10" line="162" scope="-1" lastinstruction="0" />
    <statement pc="2.0" file="10" line="162" scope="-1" lastinstruction="0" />
    <statement pc="17" file="10" line="164" scope="-1" lastinstruction="0" />
    <statement pc="18" file="10" line="164" scope="-1" lastinstruction="0" />
    <statement pc="19" file="10" line="164" scope="-1" lastinstruction="0" />
    <statement pc="20" file="10" line="164" scope="-1" lastinstruction="0" />
   </sourcemap>
   <variables>
   </variables>
   <variableDebugInfo>
   </variableDebugInfo>
   <scopes>
   </scopes>
   <funcInfo>
    <function id="0" name="PixelShaderTSMAlpha" retID="519">
     <parameter id="518" />
    </function>
    <function id="1" name="PixelShaderTSM" retID="516">
     <parameter id="515" />
    </function>
    <function id="2" name="VertexShaderTSMAlpha" retID="512">
     <parameter id="511" />
    </function>
    <function id="3" name="VertexShaderTSM" retID="507">
     <parameter id="505" />
     <parameter id="506" />
    </function>
    <function id="4" name="PixelShaderLiSPSMAlpha" retID="499">
     <parameter id="498" />
    </function>
    <function id="5" name="PixelShaderLiSPSM" retID="496">
     <parameter id="495" />
    </function>
    <function id="6" name="VertexShaderLiSPSMAlpha" retID="492">
     <parameter id="491" />
    </function>
    <function id="7" name="VertexShaderLiSPSM" retID="486">
     <parameter id="484" />
     <parameter id="485" />
    </function>
    <function id="8" name="CalcShadowBias" retID="479">
     <parameter id="478" />
    </function>
    <function id="9" name="PixelShaderVertexColour" retID="476">
     <parameter id="475" />
    </function>
    <function id="10" name="VertexShaderVertexColour" retID="473">
     <parameter id="471" />
     <parameter id="472" />
    </function>
    <function id="11" name="ZPassVertexShader" retID="465">
     <parameter id="464" />
    </function>
    <function id="12" name="PS_LowLOD" retID="459">
     <parameter id="458" />
    </function>
    <function id="13" name="PS_HighLOD" retID="457">
     <parameter id="456" />
    </function>
    <function id="14" name="PS_CarHighLOD_PS3" retID="433">
     <parameter id="431" />
     <parameter id="432" />
     <parameter id="0" />
    </function>
    <function id="15" name="PS_CarLowLOD_PS3" retID="420">
     <parameter id="419" />
    </function>
    <function id="16" name="PS_CarLowLOD_360" retID="408">
     <parameter id="407" />
    </function>
    <function id="17" name="PS_CarHighLOD" retID="387">
     <parameter id="385" />
     <parameter id="386" />
     <parameter id="0" />
    </function>
    <function id="18" name="GetNoiseNormal" retID="382">
     <parameter id="380" />
     <parameter id="381" />
    </function>
    <function id="19" name="VS_CarNormalMapHighLOD_PC" retID="369">
     <parameter id="366" />
     <parameter id="367" />
     <parameter id="368" />
    </function>
    <function id="20" name="VS_CarNormalMapLowLOD" retID="355">
     <parameter id="352" />
     <parameter id="353" />
     <parameter id="354" />
    </function>
    <function id="21" name="VS_CarNormalMapHighLOD" retID="341">
     <parameter id="338" />
     <parameter id="339" />
     <parameter id="340" />
    </function>
    <function id="22" name="VS_CarLowLOD_PS3" retID="326">
     <parameter id="324" />
     <parameter id="325" />
    </function>
    <function id="23" name="VS_CarLowLOD" retID="312">
     <parameter id="310" />
     <parameter id="311" />
    </function>
    <function id="24" name="VS_CarLowLOD_PS3" retID="297">
     <parameter id="294" />
     <parameter id="295" />
     <parameter id="296" />
    </function>
    <function id="25" name="VS_CarLowLOD_360" retID="281">
     <parameter id="278" />
     <parameter id="279" />
     <parameter id="280" />
    </function>
    <function id="26" name="VS_CarHighLOD_PS3" retID="265">
     <parameter id="262" />
     <parameter id="263" />
     <parameter id="264" />
    </function>
    <function id="27" name="VS_CarHighLOD" retID="249">
     <parameter id="246" />
     <parameter id="247" />
     <parameter id="248" />
    </function>
    <function id="28" name="CalculateShaperRigDiffuse" retID="230">
     <parameter id="226" />
     <parameter id="227" />
     <parameter id="228" />
     <parameter id="229" />
     <parameter id="0" />
    </function>
    <function id="29" name="ReadPositionNormalTangent" retID="224">
     <parameter id="218" />
     <parameter id="219" />
     <parameter id="220" />
     <parameter id="221" />
     <parameter id="222" />
     <parameter id="223" />
    </function>
    <function id="30" name="GetLocalBinormal" retID="214">
     <parameter id="213" />
    </function>
    <function id="31" name="GetLocalTangent" retID="211">
     <parameter id="209" />
     <parameter id="210" />
    </function>
    <function id="32" name="GetLocalTangent" retID="207">
     <parameter id="206" />
    </function>
    <function id="33" name="GetLocalNormal" retID="205">
     <parameter id="203" />
     <parameter id="204" />
    </function>
    <function id="34" name="GetLocalNormal" retID="202">
     <parameter id="201" />
    </function>
    <function id="35" name="GetLocalPosition" retID="200">
     <parameter id="198" />
     <parameter id="199" />
    </function>
    <function id="36" name="GetLocalPosition" retID="197">
     <parameter id="196" />
    </function>
    <function id="37" name="GetPixelDamage" retID="195">
     <parameter id="194" />
    </function>
    <function id="38" name="GetMatrix" retID="192">
     <parameter id="189" />
     <parameter id="190" />
     <parameter id="191" />
    </function>
    <function id="39" name="CalcPostProcessFog" retID="151">
     <parameter id="149" />
     <parameter id="150" />
    </function>
    <function id="40" name="CalcFogColour" retID="148">
     <parameter id="146" />
     <parameter id="147" />
    </function>
    <function id="41" name="CalcVertexFog" retID="139">
     <parameter id="138" />
    </function>
    <function id="42" name="DoShadowCar" retID="134">
     <parameter id="131" />
     <parameter id="132" />
     <parameter id="133" />
     <parameter id="0" />
    </function>
    <function id="43" name="DoShadowOptimized" retID="126">
     <parameter id="122" />
     <parameter id="123" />
     <parameter id="124" />
     <parameter id="125" />
     <parameter id="0" />
    </function>
    <function id="44" name="DoShadow" retID="115">
     <parameter id="112" />
     <parameter id="113" />
     <parameter id="114" />
     <parameter id="0" />
    </function>
    <function id="45" name="DoShadowPCFDepth" retID="106">
     <parameter id="102" />
     <parameter id="103" />
     <parameter id="104" />
     <parameter id="105" />
    </function>
    <function id="46" name="Tex2DOffset" retID="98">
     <parameter id="95" />
     <parameter id="96" />
     <parameter id="97" />
    </function>
    <function id="47" name="GetShadowMapTexCoord" retID="93">
     <parameter id="92" />
    </function>
    <function id="48" name="VertexShadowPosView" retID="91">
     <parameter id="90" />
    </function>
    <function id="49" name="VertexShadowTexOptimized" retID="87">
     <parameter id="84" />
     <parameter id="85" />
     <parameter id="86" />
    </function>
    <function id="50" name="VertexShadowTex" retID="83">
     <parameter id="82" />
    </function>
    <function id="51" name="GetCombinedBrightness" retID="33">
     <parameter id="32" />
    </function>
    <function id="52" name="GetAdaptedLuminanceFromSampler" retID="30">
     <parameter id="29" />
    </function>
    <function id="53" name="DecodeRGBE8" retID="24">
     <parameter id="23" />
    </function>
    <function id="54" name="EncodeRGBE8" retID="19">
     <parameter id="18" />
    </function>
    <function id="55" name="DeCompressColourSpace" retID="17">
     <parameter id="16" />
    </function>
    <function id="56" name="CompressColourSpace" retID="15">
     <parameter id="14" />
    </function>
    <function id="57" name="ScaleHeadLightIntensity" retID="12">
     <parameter id="11" />
    </function>
    <function id="58" name="CalcVertexColour" retID="9">
     <parameter id="8" />
    </function>
    <function id="59" name="screen_position" retID="7">
     <parameter id="6" />
    </function>
    <function id="60" name="world_position" retID="4">
     <parameter id="3" />
    </function>
   </funcInfo>
   <funcEntryExitInfo>
   </funcEntryExitInfo>
   <VfetchInfo>
    <vfetch Address="3" Register="1" DestSwizzle="xyz1" Semantic="0x00" End="false" />
    <vfetch Address="4" Register="0" DestSwizzle="z___" Semantic="0xa0" End="true" />
   </VfetchInfo>
   <InterpolatorInfo>
    <Interpolator Register="0" Semantic="0x51" Mask="xyzw" />
   </InterpolatorInfo>
   <LiteralFloats>
    <Float Register="252" value0="0" value1="0" value2="0" value3="0" />
    <Float Register="253" value0="0" value1="0" value2="0" value3="0" />
    <Float Register="254" value0="0" value1="0" value2="0" value3="0" />
    <Float Register="255" value0="4" value1="15.1" value2="0" value3="0" />
   </LiteralFloats>
   <LiteralInts>
   </LiteralInts>
   <LiteralBools>
   </LiteralBools>
  </shader>
  <shader entrypoint="PixelShaderTSM" target="ps_3_0" FxlTechniqueName="ZPrePass" FxlTechnique="7" FxlPassName="p0" FxlPass="0" ZPass="0" pdbHint="4e4a0004-08362a8e-aef0f5b7">
   <constanttable>
   </constanttable>
   <sourcemap>
    <statement pc="1" file="10" line="203" scope="-1" lastinstruction="0" />
    <statement pc="2" file="10" line="205" scope="-1" lastinstruction="0" />
    <statement pc="3" file="10" line="203" scope="-1" lastinstruction="0" />
   </sourcemap>
   <variables>
   </variables>
   <variableDebugInfo>
   </variableDebugInfo>
   <scopes>
   </scopes>
   <funcInfo>
    <function id="0" name="PixelShaderTSMAlpha" retID="519">
     <parameter id="518" />
    </function>
    <function id="1" name="PixelShaderTSM" retID="516">
     <parameter id="515" />
    </function>
    <function id="2" name="VertexShaderTSMAlpha" retID="512">
     <parameter id="511" />
    </function>
    <function id="3" name="VertexShaderTSM" retID="507">
     <parameter id="505" />
     <parameter id="506" />
    </function>
    <function id="4" name="PixelShaderLiSPSMAlpha" retID="499">
     <parameter id="498" />
    </function>
    <function id="5" name="PixelShaderLiSPSM" retID="496">
     <parameter id="495" />
    </function>
    <function id="6" name="VertexShaderLiSPSMAlpha" retID="492">
     <parameter id="491" />
    </function>
    <function id="7" name="VertexShaderLiSPSM" retID="486">
     <parameter id="484" />
     <parameter id="485" />
    </function>
    <function id="8" name="CalcShadowBias" retID="479">
     <parameter id="478" />
    </function>
    <function id="9" name="PixelShaderVertexColour" retID="476">
     <parameter id="475" />
    </function>
    <function id="10" name="VertexShaderVertexColour" retID="473">
     <parameter id="471" />
     <parameter id="472" />
    </function>
    <function id="11" name="ZPassVertexShader" retID="465">
     <parameter id="464" />
    </function>
    <function id="12" name="PS_LowLOD" retID="459">
     <parameter id="458" />
    </function>
    <function id="13" name="PS_HighLOD" retID="457">
     <parameter id="456" />
    </function>
    <function id="14" name="PS_CarHighLOD_PS3" retID="433">
     <parameter id="431" />
     <parameter id="432" />
     <parameter id="0" />
    </function>
    <function id="15" name="PS_CarLowLOD_PS3" retID="420">
     <parameter id="419" />
    </function>
    <function id="16" name="PS_CarLowLOD_360" retID="408">
     <parameter id="407" />
    </function>
    <function id="17" name="PS_CarHighLOD" retID="387">
     <parameter id="385" />
     <parameter id="386" />
     <parameter id="0" />
    </function>
    <function id="18" name="GetNoiseNormal" retID="382">
     <parameter id="380" />
     <parameter id="381" />
    </function>
    <function id="19" name="VS_CarNormalMapHighLOD_PC" retID="369">
     <parameter id="366" />
     <parameter id="367" />
     <parameter id="368" />
    </function>
    <function id="20" name="VS_CarNormalMapLowLOD" retID="355">
     <parameter id="352" />
     <parameter id="353" />
     <parameter id="354" />
    </function>
    <function id="21" name="VS_CarNormalMapHighLOD" retID="341">
     <parameter id="338" />
     <parameter id="339" />
     <parameter id="340" />
    </function>
    <function id="22" name="VS_CarLowLOD_PS3" retID="326">
     <parameter id="324" />
     <parameter id="325" />
    </function>
    <function id="23" name="VS_CarLowLOD" retID="312">
     <parameter id="310" />
     <parameter id="311" />
    </function>
    <function id="24" name="VS_CarLowLOD_PS3" retID="297">
     <parameter id="294" />
     <parameter id="295" />
     <parameter id="296" />
    </function>
    <function id="25" name="VS_CarLowLOD_360" retID="281">
     <parameter id="278" />
     <parameter id="279" />
     <parameter id="280" />
    </function>
    <function id="26" name="VS_CarHighLOD_PS3" retID="265">
     <parameter id="262" />
     <parameter id="263" />
     <parameter id="264" />
    </function>
    <function id="27" name="VS_CarHighLOD" retID="249">
     <parameter id="246" />
     <parameter id="247" />
     <parameter id="248" />
    </function>
    <function id="28" name="CalculateShaperRigDiffuse" retID="230">
     <parameter id="226" />
     <parameter id="227" />
     <parameter id="228" />
     <parameter id="229" />
     <parameter id="0" />
    </function>
    <function id="29" name="ReadPositionNormalTangent" retID="224">
     <parameter id="218" />
     <parameter id="219" />
     <parameter id="220" />
     <parameter id="221" />
     <parameter id="222" />
     <parameter id="223" />
    </function>
    <function id="30" name="GetLocalBinormal" retID="214">
     <parameter id="213" />
    </function>
    <function id="31" name="GetLocalTangent" retID="211">
     <parameter id="209" />
     <parameter id="210" />
    </function>
    <function id="32" name="GetLocalTangent" retID="207">
     <parameter id="206" />
    </function>
    <function id="33" name="GetLocalNormal" retID="205">
     <parameter id="203" />
     <parameter id="204" />
    </function>
    <function id="34" name="GetLocalNormal" retID="202">
     <parameter id="201" />
    </function>
    <function id="35" name="GetLocalPosition" retID="200">
     <parameter id="198" />
     <parameter id="199" />
    </function>
    <function id="36" name="GetLocalPosition" retID="197">
     <parameter id="196" />
    </function>
    <function id="37" name="GetPixelDamage" retID="195">
     <parameter id="194" />
    </function>
    <function id="38" name="GetMatrix" retID="192">
     <parameter id="189" />
     <parameter id="190" />
     <parameter id="191" />
    </function>
    <function id="39" name="CalcPostProcessFog" retID="151">
     <parameter id="149" />
     <parameter id="150" />
    </function>
    <function id="40" name="CalcFogColour" retID="148">
     <parameter id="146" />
     <parameter id="147" />
    </function>
    <function id="41" name="CalcVertexFog" retID="139">
     <parameter id="138" />
    </function>
    <function id="42" name="DoShadowCar" retID="134">
     <parameter id="131" />
     <parameter id="132" />
     <parameter id="133" />
     <parameter id="0" />
    </function>
    <function id="43" name="DoShadowOptimized" retID="126">
     <parameter id="122" />
     <parameter id="123" />
     <parameter id="124" />
     <parameter id="125" />
     <parameter id="0" />
    </function>
    <function id="44" name="DoShadow" retID="115">
     <parameter id="112" />
     <parameter id="113" />
     <parameter id="114" />
     <parameter id="0" />
    </function>
    <function id="45" name="DoShadowPCFDepth" retID="106">
     <parameter id="102" />
     <parameter id="103" />
     <parameter id="104" />
     <parameter id="105" />
    </function>
    <function id="46" name="Tex2DOffset" retID="98">
     <parameter id="95" />
     <parameter id="96" />
     <parameter id="97" />
    </function>
    <function id="47" name="GetShadowMapTexCoord" retID="93">
     <parameter id="92" />
    </function>
    <function id="48" name="VertexShadowPosView" retID="91">
     <parameter id="90" />
    </function>
    <function id="49" name="VertexShadowTexOptimized" retID="87">
     <parameter id="84" />
     <parameter id="85" />
     <parameter id="86" />
    </function>
    <function id="50" name="VertexShadowTex" retID="83">
     <parameter id="82" />
    </function>
    <function id="51" name="GetCombinedBrightness" retID="33">
     <parameter id="32" />
    </function>
    <function id="52" name="GetAdaptedLuminanceFromSampler" retID="30">
     <parameter id="29" />
    </function>
    <function id="53" name="DecodeRGBE8" retID="24">
     <parameter id="23" />
    </function>
    <function id="54" name="EncodeRGBE8" retID="19">
     <parameter id="18" />
    </function>
    <function id="55" name="DeCompressColourSpace" retID="17">
     <parameter id="16" />
    </function>
    <function id="56" name="CompressColourSpace" retID="15">
     <parameter id="14" />
    </function>
    <function id="57" name="ScaleHeadLightIntensity" retID="12">
     <parameter id="11" />
    </function>
    <function id="58" name="CalcVertexColour" retID="9">
     <parameter id="8" />
    </function>
    <function id="59" name="screen_position" retID="7">
     <parameter id="6" />
    </function>
    <function id="60" name="world_position" retID="4">
     <parameter id="3" />
    </function>
   </funcInfo>
   <funcEntryExitInfo>
   </funcEntryExitInfo>
   <VfetchInfo>
   </VfetchInfo>
   <InterpolatorInfo>
    <Interpolator Register="0" Semantic="0x51" Mask="xyzw" />
   </InterpolatorInfo>
   <LiteralFloats>
    <Float Register="252" value0="0" value1="0" value2="0" value3="0" />
    <Float Register="253" value0="0" value1="0" value2="0" value3="0" />
    <Float Register="254" value0="0" value1="0" value2="0" value3="0" />
    <Float Register="255" value0="1" value1="0" value2="0" value3="0" />
   </LiteralFloats>
   <LiteralInts>
   </LiteralInts>
   <LiteralBools>
   </LiteralBools>
  </shader>
  <shader entrypoint="VertexShaderTSM" target="vs_3_0" FxlTechniqueName="ZPrePass" FxlTechnique="7" FxlPassName="p0" FxlPass="0" ZPass="0" pdbHint="4e4a0005-08362a8e-aef0f5b7">
   <constanttable>
    <constant register="c20" count="4">
     <type name="cmLightWVP" class="matrix_columns" type="float" rows="4" columns="4" />
    </constant>
    <constant register="c24" count="4">
     <type name="cmWorldViewProj" class="matrix_columns" type="float" rows="4" columns="4" />
    </constant>
   </constanttable>
   <sourcemap>
    <statement pc="3" file="10" line="146" scope="-1" lastinstruction="0" />
    <statement pc="0.1" file="10" line="146" scope="-1" lastinstruction="0" />
    <statement pc="4" file="10" line="162" scope="-1" lastinstruction="0" />
    <statement pc="5" file="10" line="162" scope="-1" lastinstruction="0" />
    <statement pc="6" file="10" line="162" scope="-1" lastinstruction="0" />
    <statement pc="7" file="10" line="162" scope="-1" lastinstruction="0" />
    <statement pc="1.1" file="10" line="162" scope="-1" lastinstruction="0" />
    <statement pc="8" file="10" line="164" scope="-1" lastinstruction="0" />
    <statement pc="9" file="10" line="164" scope="-1" lastinstruction="0" />
    <statement pc="10" file="10" line="164" scope="-1" lastinstruction="0" />
    <statement pc="11" file="10" line="164" scope="-1" lastinstruction="0" />
   </sourcemap>
   <variables>
   </variables>
   <variableDebugInfo>
   </variableDebugInfo>
   <scopes>
   </scopes>
   <funcInfo>
    <function id="0" name="PixelShaderTSMAlpha" retID="519">
     <parameter id="518" />
    </function>
    <function id="1" name="PixelShaderTSM" retID="516">
     <parameter id="515" />
    </function>
    <function id="2" name="VertexShaderTSMAlpha" retID="512">
     <parameter id="511" />
    </function>
    <function id="3" name="VertexShaderTSM" retID="507">
     <parameter id="505" />
     <parameter id="506" />
    </function>
    <function id="4" name="PixelShaderLiSPSMAlpha" retID="499">
     <parameter id="498" />
    </function>
    <function id="5" name="PixelShaderLiSPSM" retID="496">
     <parameter id="495" />
    </function>
    <function id="6" name="VertexShaderLiSPSMAlpha" retID="492">
     <parameter id="491" />
    </function>
    <function id="7" name="VertexShaderLiSPSM" retID="486">
     <parameter id="484" />
     <parameter id="485" />
    </function>
    <function id="8" name="CalcShadowBias" retID="479">
     <parameter id="478" />
    </function>
    <function id="9" name="PixelShaderVertexColour" retID="476">
     <parameter id="475" />
    </function>
    <function id="10" name="VertexShaderVertexColour" retID="473">
     <parameter id="471" />
     <parameter id="472" />
    </function>
    <function id="11" name="ZPassVertexShader" retID="465">
     <parameter id="464" />
    </function>
    <function id="12" name="PS_LowLOD" retID="459">
     <parameter id="458" />
    </function>
    <function id="13" name="PS_HighLOD" retID="457">
     <parameter id="456" />
    </function>
    <function id="14" name="PS_CarHighLOD_PS3" retID="433">
     <parameter id="431" />
     <parameter id="432" />
     <parameter id="0" />
    </function>
    <function id="15" name="PS_CarLowLOD_PS3" retID="420">
     <parameter id="419" />
    </function>
    <function id="16" name="PS_CarLowLOD_360" retID="408">
     <parameter id="407" />
    </function>
    <function id="17" name="PS_CarHighLOD" retID="387">
     <parameter id="385" />
     <parameter id="386" />
     <parameter id="0" />
    </function>
    <function id="18" name="GetNoiseNormal" retID="382">
     <parameter id="380" />
     <parameter id="381" />
    </function>
    <function id="19" name="VS_CarNormalMapHighLOD_PC" retID="369">
     <parameter id="366" />
     <parameter id="367" />
     <parameter id="368" />
    </function>
    <function id="20" name="VS_CarNormalMapLowLOD" retID="355">
     <parameter id="352" />
     <parameter id="353" />
     <parameter id="354" />
    </function>
    <function id="21" name="VS_CarNormalMapHighLOD" retID="341">
     <parameter id="338" />
     <parameter id="339" />
     <parameter id="340" />
    </function>
    <function id="22" name="VS_CarLowLOD_PS3" retID="326">
     <parameter id="324" />
     <parameter id="325" />
    </function>
    <function id="23" name="VS_CarLowLOD" retID="312">
     <parameter id="310" />
     <parameter id="311" />
    </function>
    <function id="24" name="VS_CarLowLOD_PS3" retID="297">
     <parameter id="294" />
     <parameter id="295" />
     <parameter id="296" />
    </function>
    <function id="25" name="VS_CarLowLOD_360" retID="281">
     <parameter id="278" />
     <parameter id="279" />
     <parameter id="280" />
    </function>
    <function id="26" name="VS_CarHighLOD_PS3" retID="265">
     <parameter id="262" />
     <parameter id="263" />
     <parameter id="264" />
    </function>
    <function id="27" name="VS_CarHighLOD" retID="249">
     <parameter id="246" />
     <parameter id="247" />
     <parameter id="248" />
    </function>
    <function id="28" name="CalculateShaperRigDiffuse" retID="230">
     <parameter id="226" />
     <parameter id="227" />
     <parameter id="228" />
     <parameter id="229" />
     <parameter id="0" />
    </function>
    <function id="29" name="ReadPositionNormalTangent" retID="224">
     <parameter id="218" />
     <parameter id="219" />
     <parameter id="220" />
     <parameter id="221" />
     <parameter id="222" />
     <parameter id="223" />
    </function>
    <function id="30" name="GetLocalBinormal" retID="214">
     <parameter id="213" />
    </function>
    <function id="31" name="GetLocalTangent" retID="211">
     <parameter id="209" />
     <parameter id="210" />
    </function>
    <function id="32" name="GetLocalTangent" retID="207">
     <parameter id="206" />
    </function>
    <function id="33" name="GetLocalNormal" retID="205">
     <parameter id="203" />
     <parameter id="204" />
    </function>
    <function id="34" name="GetLocalNormal" retID="202">
     <parameter id="201" />
    </function>
    <function id="35" name="GetLocalPosition" retID="200">
     <parameter id="198" />
     <parameter id="199" />
    </function>
    <function id="36" name="GetLocalPosition" retID="197">
     <parameter id="196" />
    </function>
    <function id="37" name="GetPixelDamage" retID="195">
     <parameter id="194" />
    </function>
    <function id="38" name="GetMatrix" retID="192">
     <parameter id="189" />
     <parameter id="190" />
     <parameter id="191" />
    </function>
    <function id="39" name="CalcPostProcessFog" retID="151">
     <parameter id="149" />
     <parameter id="150" />
    </function>
    <function id="40" name="CalcFogColour" retID="148">
     <parameter id="146" />
     <parameter id="147" />
    </function>
    <function id="41" name="CalcVertexFog" retID="139">
     <parameter id="138" />
    </function>
    <function id="42" name="DoShadowCar" retID="134">
     <parameter id="131" />
     <parameter id="132" />
     <parameter id="133" />
     <parameter id="0" />
    </function>
    <function id="43" name="DoShadowOptimized" retID="126">
     <parameter id="122" />
     <parameter id="123" />
     <parameter id="124" />
     <parameter id="125" />
     <parameter id="0" />
    </function>
    <function id="44" name="DoShadow" retID="115">
     <parameter id="112" />
     <parameter id="113" />
     <parameter id="114" />
     <parameter id="0" />
    </function>
    <function id="45" name="DoShadowPCFDepth" retID="106">
     <parameter id="102" />
     <parameter id="103" />
     <parameter id="104" />
     <parameter id="105" />
    </function>
    <function id="46" name="Tex2DOffset" retID="98">
     <parameter id="95" />
     <parameter id="96" />
     <parameter id="97" />
    </function>
    <function id="47" name="GetShadowMapTexCoord" retID="93">
     <parameter id="92" />
    </function>
    <function id="48" name="VertexShadowPosView" retID="91">
     <parameter id="90" />
    </function>
    <function id="49" name="VertexShadowTexOptimized" retID="87">
     <parameter id="84" />
     <parameter id="85" />
     <parameter id="86" />
    </function>
    <function id="50" name="VertexShadowTex" retID="83">
     <parameter id="82" />
    </function>
    <function id="51" name="GetCombinedBrightness" retID="33">
     <parameter id="32" />
    </function>
    <function id="52" name="GetAdaptedLuminanceFromSampler" retID="30">
     <parameter id="29" />
    </function>
    <function id="53" name="DecodeRGBE8" retID="24">
     <parameter id="23" />
    </function>
    <function id="54" name="EncodeRGBE8" retID="19">
     <parameter id="18" />
    </function>
    <function id="55" name="DeCompressColourSpace" retID="17">
     <parameter id="16" />
    </function>
    <function id="56" name="CompressColourSpace" retID="15">
     <parameter id="14" />
    </function>
    <function id="57" name="ScaleHeadLightIntensity" retID="12">
     <parameter id="11" />
    </function>
    <function id="58" name="CalcVertexColour" retID="9">
     <parameter id="8" />
    </function>
    <function id="59" name="screen_position" retID="7">
     <parameter id="6" />
    </function>
    <function id="60" name="world_position" retID="4">
     <parameter id="3" />
    </function>
   </funcInfo>
   <funcEntryExitInfo>
   </funcEntryExitInfo>
   <VfetchInfo>
    <vfetch Address="3" Register="0" DestSwizzle="xyz1" Semantic="0x00" End="false" />
   </VfetchInfo>
   <InterpolatorInfo>
    <Interpolator Register="0" Semantic="0x51" Mask="xyzw" />
   </InterpolatorInfo>
   <LiteralFloats>
   </LiteralFloats>
   <LiteralInts>
   </LiteralInts>
   <LiteralBools>
   </LiteralBools>
  </shader>
  <shader entrypoint="PixelShaderLiSPSMAlpha" target="ps_3_0" FxlTechniqueName="RenderVertexColour" FxlTechnique="6" FxlPassName="p0" FxlPass="0" ZPass="0" pdbHint="4e4a0006-08362a8e-aef0f5b7">
   <constanttable>
    <constant register="s0">
     <type name="DIFFUSE_SAMPLER" class="object" type="sampler2D" />
    </constant>
    <constant register="c144">
     <type name="cvShadowParams0" class="vector" type="float" columns="4" />
    </constant>
   </constanttable>
   <sourcemap>
    <statement pc="2" file="10" line="104" scope="-1" lastinstruction="0" />
    <statement pc="0.1" file="10" line="104" scope="-1" lastinstruction="0" />
    <statement pc="3" file="10" line="106" scope="-1" lastinstruction="0" />
    <statement pc="4" file="10" line="106" scope="-1" lastinstruction="0" />
    <statement pc="5" file="10" line="108" scope="-1" lastinstruction="0" />
   </sourcemap>
   <variables>
   </variables>
   <variableDebugInfo>
   </variableDebugInfo>
   <scopes>
   </scopes>
   <funcInfo>
    <function id="0" name="PixelShaderTSMAlpha" retID="519">
     <parameter id="518" />
    </function>
    <function id="1" name="PixelShaderTSM" retID="516">
     <parameter id="515" />
    </function>
    <function id="2" name="VertexShaderTSMAlpha" retID="512">
     <parameter id="511" />
    </function>
    <function id="3" name="VertexShaderTSM" retID="507">
     <parameter id="505" />
     <parameter id="506" />
    </function>
    <function id="4" name="PixelShaderLiSPSMAlpha" retID="499">
     <parameter id="498" />
    </function>
    <function id="5" name="PixelShaderLiSPSM" retID="496">
     <parameter id="495" />
    </function>
    <function id="6" name="VertexShaderLiSPSMAlpha" retID="492">
     <parameter id="491" />
    </function>
    <function id="7" name="VertexShaderLiSPSM" retID="486">
     <parameter id="484" />
     <parameter id="485" />
    </function>
    <function id="8" name="CalcShadowBias" retID="479">
     <parameter id="478" />
    </function>
    <function id="9" name="PixelShaderVertexColour" retID="476">
     <parameter id="475" />
    </function>
    <function id="10" name="VertexShaderVertexColour" retID="473">
     <parameter id="471" />
     <parameter id="472" />
    </function>
    <function id="11" name="ZPassVertexShader" retID="465">
     <parameter id="464" />
    </function>
    <function id="12" name="PS_LowLOD" retID="459">
     <parameter id="458" />
    </function>
    <function id="13" name="PS_HighLOD" retID="457">
     <parameter id="456" />
    </function>
    <function id="14" name="PS_CarHighLOD_PS3" retID="433">
     <parameter id="431" />
     <parameter id="432" />
     <parameter id="0" />
    </function>
    <function id="15" name="PS_CarLowLOD_PS3" retID="420">
     <parameter id="419" />
    </function>
    <function id="16" name="PS_CarLowLOD_360" retID="408">
     <parameter id="407" />
    </function>
    <function id="17" name="PS_CarHighLOD" retID="387">
     <parameter id="385" />
     <parameter id="386" />
     <parameter id="0" />
    </function>
    <function id="18" name="GetNoiseNormal" retID="382">
     <parameter id="380" />
     <parameter id="381" />
    </function>
    <function id="19" name="VS_CarNormalMapHighLOD_PC" retID="369">
     <parameter id="366" />
     <parameter id="367" />
     <parameter id="368" />
    </function>
    <function id="20" name="VS_CarNormalMapLowLOD" retID="355">
     <parameter id="352" />
     <parameter id="353" />
     <parameter id="354" />
    </function>
    <function id="21" name="VS_CarNormalMapHighLOD" retID="341">
     <parameter id="338" />
     <parameter id="339" />
     <parameter id="340" />
    </function>
    <function id="22" name="VS_CarLowLOD_PS3" retID="326">
     <parameter id="324" />
     <parameter id="325" />
    </function>
    <function id="23" name="VS_CarLowLOD" retID="312">
     <parameter id="310" />
     <parameter id="311" />
    </function>
    <function id="24" name="VS_CarLowLOD_PS3" retID="297">
     <parameter id="294" />
     <parameter id="295" />
     <parameter id="296" />
    </function>
    <function id="25" name="VS_CarLowLOD_360" retID="281">
     <parameter id="278" />
     <parameter id="279" />
     <parameter id="280" />
    </function>
    <function id="26" name="VS_CarHighLOD_PS3" retID="265">
     <parameter id="262" />
     <parameter id="263" />
     <parameter id="264" />
    </function>
    <function id="27" name="VS_CarHighLOD" retID="249">
     <parameter id="246" />
     <parameter id="247" />
     <parameter id="248" />
    </function>
    <function id="28" name="CalculateShaperRigDiffuse" retID="230">
     <parameter id="226" />
     <parameter id="227" />
     <parameter id="228" />
     <parameter id="229" />
     <parameter id="0" />
    </function>
    <function id="29" name="ReadPositionNormalTangent" retID="224">
     <parameter id="218" />
     <parameter id="219" />
     <parameter id="220" />
     <parameter id="221" />
     <parameter id="222" />
     <parameter id="223" />
    </function>
    <function id="30" name="GetLocalBinormal" retID="214">
     <parameter id="213" />
    </function>
    <function id="31" name="GetLocalTangent" retID="211">
     <parameter id="209" />
     <parameter id="210" />
    </function>
    <function id="32" name="GetLocalTangent" retID="207">
     <parameter id="206" />
    </function>
    <function id="33" name="GetLocalNormal" retID="205">
     <parameter id="203" />
     <parameter id="204" />
    </function>
    <function id="34" name="GetLocalNormal" retID="202">
     <parameter id="201" />
    </function>
    <function id="35" name="GetLocalPosition" retID="200">
     <parameter id="198" />
     <parameter id="199" />
    </function>
    <function id="36" name="GetLocalPosition" retID="197">
     <parameter id="196" />
    </function>
    <function id="37" name="GetPixelDamage" retID="195">
     <parameter id="194" />
    </function>
    <function id="38" name="GetMatrix" retID="192">
     <parameter id="189" />
     <parameter id="190" />
     <parameter id="191" />
    </function>
    <function id="39" name="CalcPostProcessFog" retID="151">
     <parameter id="149" />
     <parameter id="150" />
    </function>
    <function id="40" name="CalcFogColour" retID="148">
     <parameter id="146" />
     <parameter id="147" />
    </function>
    <function id="41" name="CalcVertexFog" retID="139">
     <parameter id="138" />
    </function>
    <function id="42" name="DoShadowCar" retID="134">
     <parameter id="131" />
     <parameter id="132" />
     <parameter id="133" />
     <parameter id="0" />
    </function>
    <function id="43" name="DoShadowOptimized" retID="126">
     <parameter id="122" />
     <parameter id="123" />
     <parameter id="124" />
     <parameter id="125" />
     <parameter id="0" />
    </function>
    <function id="44" name="DoShadow" retID="115">
     <parameter id="112" />
     <parameter id="113" />
     <parameter id="114" />
     <parameter id="0" />
    </function>
    <function id="45" name="DoShadowPCFDepth" retID="106">
     <parameter id="102" />
     <parameter id="103" />
     <parameter id="104" />
     <parameter id="105" />
    </function>
    <function id="46" name="Tex2DOffset" retID="98">
     <parameter id="95" />
     <parameter id="96" />
     <parameter id="97" />
    </function>
    <function id="47" name="GetShadowMapTexCoord" retID="93">
     <parameter id="92" />
    </function>
    <function id="48" name="VertexShadowPosView" retID="91">
     <parameter id="90" />
    </function>
    <function id="49" name="VertexShadowTexOptimized" retID="87">
     <parameter id="84" />
     <parameter id="85" />
     <parameter id="86" />
    </function>
    <function id="50" name="VertexShadowTex" retID="83">
     <parameter id="82" />
    </function>
    <function id="51" name="GetCombinedBrightness" retID="33">
     <parameter id="32" />
    </function>
    <function id="52" name="GetAdaptedLuminanceFromSampler" retID="30">
     <parameter id="29" />
    </function>
    <function id="53" name="DecodeRGBE8" retID="24">
     <parameter id="23" />
    </function>
    <function id="54" name="EncodeRGBE8" retID="19">
     <parameter id="18" />
    </function>
    <function id="55" name="DeCompressColourSpace" retID="17">
     <parameter id="16" />
    </function>
    <function id="56" name="CompressColourSpace" retID="15">
     <parameter id="14" />
    </function>
    <function id="57" name="ScaleHeadLightIntensity" retID="12">
     <parameter id="11" />
    </function>
    <function id="58" name="CalcVertexColour" retID="9">
     <parameter id="8" />
    </function>
    <function id="59" name="screen_position" retID="7">
     <parameter id="6" />
    </function>
    <function id="60" name="world_position" retID="4">
     <parameter id="3" />
    </function>
   </funcInfo>
   <funcEntryExitInfo>
   </funcEntryExitInfo>
   <VfetchInfo>
   </VfetchInfo>
   <InterpolatorInfo>
    <Interpolator Register="0" Semantic="0x50" Mask="xyzw" />
   </InterpolatorInfo>
   <LiteralFloats>
    <Float Register="252" value0="0" value1="0" value2="0" value3="0" />
    <Float Register="253" value0="0" value1="0" value2="0" value3="0" />
    <Float Register="254" value0="0" value1="0" value2="0" value3="0" />
    <Float Register="255" value0="0" value1="0" value2="0" value3="0" />
   </LiteralFloats>
   <LiteralInts>
   </LiteralInts>
   <LiteralBools>
   </LiteralBools>
  </shader>
  <shader entrypoint="VertexShaderLiSPSMAlpha" target="vs_3_0" FxlTechniqueName="RenderVertexColour" FxlTechnique="6" FxlPassName="p0" FxlPass="0" ZPass="0" pdbHint="4e4a0007-08362a8e-aef0f5b7">
   <constanttable>
    <constant register="c24" count="4">
     <type name="cmWorldViewProj" class="matrix_columns" type="float" rows="4" columns="4" />
    </constant>
   </constanttable>
   <sourcemap>
    <statement pc="3" file="10" line="65" scope="-1" lastinstruction="0" />
    <statement pc="4" file="10" line="65" scope="-1" lastinstruction="0" />
    <statement pc="0.1" file="10" line="65" scope="-1" lastinstruction="0" />
    <statement pc="5" file="10" line="71" scope="-1" lastinstruction="0" />
    <statement pc="6" file="10" line="71" scope="-1" lastinstruction="0" />
    <statement pc="7" file="10" line="71" scope="-1" lastinstruction="0" />
    <statement pc="8" file="10" line="71" scope="-1" lastinstruction="0" />
    <statement pc="1.1" file="10" line="71" scope="-1" lastinstruction="0" />
    <statement pc="9" file="10" line="78" scope="-1" lastinstruction="0" />
   </sourcemap>
   <variables>
   </variables>
   <variableDebugInfo>
   </variableDebugInfo>
   <scopes>
   </scopes>
   <funcInfo>
    <function id="0" name="PixelShaderTSMAlpha" retID="519">
     <parameter id="518" />
    </function>
    <function id="1" name="PixelShaderTSM" retID="516">
     <parameter id="515" />
    </function>
    <function id="2" name="VertexShaderTSMAlpha" retID="512">
     <parameter id="511" />
    </function>
    <function id="3" name="VertexShaderTSM" retID="507">
     <parameter id="505" />
     <parameter id="506" />
    </function>
    <function id="4" name="PixelShaderLiSPSMAlpha" retID="499">
     <parameter id="498" />
    </function>
    <function id="5" name="PixelShaderLiSPSM" retID="496">
     <parameter id="495" />
    </function>
    <function id="6" name="VertexShaderLiSPSMAlpha" retID="492">
     <parameter id="491" />
    </function>
    <function id="7" name="VertexShaderLiSPSM" retID="486">
     <parameter id="484" />
     <parameter id="485" />
    </function>
    <function id="8" name="CalcShadowBias" retID="479">
     <parameter id="478" />
    </function>
    <function id="9" name="PixelShaderVertexColour" retID="476">
     <parameter id="475" />
    </function>
    <function id="10" name="VertexShaderVertexColour" retID="473">
     <parameter id="471" />
     <parameter id="472" />
    </function>
    <function id="11" name="ZPassVertexShader" retID="465">
     <parameter id="464" />
    </function>
    <function id="12" name="PS_LowLOD" retID="459">
     <parameter id="458" />
    </function>
    <function id="13" name="PS_HighLOD" retID="457">
     <parameter id="456" />
    </function>
    <function id="14" name="PS_CarHighLOD_PS3" retID="433">
     <parameter id="431" />
     <parameter id="432" />
     <parameter id="0" />
    </function>
    <function id="15" name="PS_CarLowLOD_PS3" retID="420">
     <parameter id="419" />
    </function>
    <function id="16" name="PS_CarLowLOD_360" retID="408">
     <parameter id="407" />
    </function>
    <function id="17" name="PS_CarHighLOD" retID="387">
     <parameter id="385" />
     <parameter id="386" />
     <parameter id="0" />
    </function>
    <function id="18" name="GetNoiseNormal" retID="382">
     <parameter id="380" />
     <parameter id="381" />
    </function>
    <function id="19" name="VS_CarNormalMapHighLOD_PC" retID="369">
     <parameter id="366" />
     <parameter id="367" />
     <parameter id="368" />
    </function>
    <function id="20" name="VS_CarNormalMapLowLOD" retID="355">
     <parameter id="352" />
     <parameter id="353" />
     <parameter id="354" />
    </function>
    <function id="21" name="VS_CarNormalMapHighLOD" retID="341">
     <parameter id="338" />
     <parameter id="339" />
     <parameter id="340" />
    </function>
    <function id="22" name="VS_CarLowLOD_PS3" retID="326">
     <parameter id="324" />
     <parameter id="325" />
    </function>
    <function id="23" name="VS_CarLowLOD" retID="312">
     <parameter id="310" />
     <parameter id="311" />
    </function>
    <function id="24" name="VS_CarLowLOD_PS3" retID="297">
     <parameter id="294" />
     <parameter id="295" />
     <parameter id="296" />
    </function>
    <function id="25" name="VS_CarLowLOD_360" retID="281">
     <parameter id="278" />
     <parameter id="279" />
     <parameter id="280" />
    </function>
    <function id="26" name="VS_CarHighLOD_PS3" retID="265">
     <parameter id="262" />
     <parameter id="263" />
     <parameter id="264" />
    </function>
    <function id="27" name="VS_CarHighLOD" retID="249">
     <parameter id="246" />
     <parameter id="247" />
     <parameter id="248" />
    </function>
    <function id="28" name="CalculateShaperRigDiffuse" retID="230">
     <parameter id="226" />
     <parameter id="227" />
     <parameter id="228" />
     <parameter id="229" />
     <parameter id="0" />
    </function>
    <function id="29" name="ReadPositionNormalTangent" retID="224">
     <parameter id="218" />
     <parameter id="219" />
     <parameter id="220" />
     <parameter id="221" />
     <parameter id="222" />
     <parameter id="223" />
    </function>
    <function id="30" name="GetLocalBinormal" retID="214">
     <parameter id="213" />
    </function>
    <function id="31" name="GetLocalTangent" retID="211">
     <parameter id="209" />
     <parameter id="210" />
    </function>
    <function id="32" name="GetLocalTangent" retID="207">
     <parameter id="206" />
    </function>
    <function id="33" name="GetLocalNormal" retID="205">
     <parameter id="203" />
     <parameter id="204" />
    </function>
    <function id="34" name="GetLocalNormal" retID="202">
     <parameter id="201" />
    </function>
    <function id="35" name="GetLocalPosition" retID="200">
     <parameter id="198" />
     <parameter id="199" />
    </function>
    <function id="36" name="GetLocalPosition" retID="197">
     <parameter id="196" />
    </function>
    <function id="37" name="GetPixelDamage" retID="195">
     <parameter id="194" />
    </function>
    <function id="38" name="GetMatrix" retID="192">
     <parameter id="189" />
     <parameter id="190" />
     <parameter id="191" />
    </function>
    <function id="39" name="CalcPostProcessFog" retID="151">
     <parameter id="149" />
     <parameter id="150" />
    </function>
    <function id="40" name="CalcFogColour" retID="148">
     <parameter id="146" />
     <parameter id="147" />
    </function>
    <function id="41" name="CalcVertexFog" retID="139">
     <parameter id="138" />
    </function>
    <function id="42" name="DoShadowCar" retID="134">
     <parameter id="131" />
     <parameter id="132" />
     <parameter id="133" />
     <parameter id="0" />
    </function>
    <function id="43" name="DoShadowOptimized" retID="126">
     <parameter id="122" />
     <parameter id="123" />
     <parameter id="124" />
     <parameter id="125" />
     <parameter id="0" />
    </function>
    <function id="44" name="DoShadow" retID="115">
     <parameter id="112" />
     <parameter id="113" />
     <parameter id="114" />
     <parameter id="0" />
    </function>
    <function id="45" name="DoShadowPCFDepth" retID="106">
     <parameter id="102" />
     <parameter id="103" />
     <parameter id="104" />
     <parameter id="105" />
    </function>
    <function id="46" name="Tex2DOffset" retID="98">
     <parameter id="95" />
     <parameter id="96" />
     <parameter id="97" />
    </function>
    <function id="47" name="GetShadowMapTexCoord" retID="93">
     <parameter id="92" />
    </function>
    <function id="48" name="VertexShadowPosView" retID="91">
     <parameter id="90" />
    </function>
    <function id="49" name="VertexShadowTexOptimized" retID="87">
     <parameter id="84" />
     <parameter id="85" />
     <parameter id="86" />
    </function>
    <function id="50" name="VertexShadowTex" retID="83">
     <parameter id="82" />
    </function>
    <function id="51" name="GetCombinedBrightness" retID="33">
     <parameter id="32" />
    </function>
    <function id="52" name="GetAdaptedLuminanceFromSampler" retID="30">
     <parameter id="29" />
    </function>
    <function id="53" name="DecodeRGBE8" retID="24">
     <parameter id="23" />
    </function>
    <function id="54" name="EncodeRGBE8" retID="19">
     <parameter id="18" />
    </function>
    <function id="55" name="DeCompressColourSpace" retID="17">
     <parameter id="16" />
    </function>
    <function id="56" name="CompressColourSpace" retID="15">
     <parameter id="14" />
    </function>
    <function id="57" name="ScaleHeadLightIntensity" retID="12">
     <parameter id="11" />
    </function>
    <function id="58" name="CalcVertexColour" retID="9">
     <parameter id="8" />
    </function>
    <function id="59" name="screen_position" retID="7">
     <parameter id="6" />
    </function>
    <function id="60" name="world_position" retID="4">
     <parameter id="3" />
    </function>
   </funcInfo>
   <funcEntryExitInfo>
   </funcEntryExitInfo>
   <VfetchInfo>
    <vfetch Address="3" Register="1" DestSwizzle="xyz1" Semantic="0x00" End="false" />
    <vfetch Address="4" Register="0" DestSwizzle="xy1_" Semantic="0x50" End="true" />
   </VfetchInfo>
   <InterpolatorInfo>
    <Interpolator Register="0" Semantic="0x50" Mask="xyzw" />
   </InterpolatorInfo>
   <LiteralFloats>
   </LiteralFloats>
   <LiteralInts>
   </LiteralInts>
   <LiteralBools>
   </LiteralBools>
  </shader>
  <shader entrypoint="VertexShaderLiSPSM" target="vs_3_0" FxlTechniqueName="RenderLiSPSM" FxlTechnique="5" FxlPassName="p0" FxlPass="0" ZPass="0" pdbHint="4e4a0008-08362a8e-aef0f5b7">
   <constanttable>
    <constant register="c52" count="64">
     <type name="camBlendMatrices" class="matrix_columns" type="float" rows="4" columns="4" elements="16" />
    </constant>
    <constant register="c24" count="4">
     <type name="cmWorldViewProj" class="matrix_columns" type="float" rows="4" columns="4" />
    </constant>
   </constanttable>
   <sourcemap>
    <statement pc="3" file="10" line="34" scope="-1" lastinstruction="0" />
    <statement pc="4" file="10" line="34" scope="-1" lastinstruction="0" />
    <statement pc="0.1" file="10" line="34" scope="-1" lastinstruction="0" />
    <statement pc="5" file="10" line="44" scope="-1" lastinstruction="0" />
    <statement pc="6" file="10" line="44" scope="-1" lastinstruction="0" />
    <statement pc="7" file="10" line="46" scope="-1" lastinstruction="0" />
    <statement pc="8" file="10" line="46" scope="-1" lastinstruction="0" />
    <statement pc="9" file="10" line="52" scope="-1" lastinstruction="0" />
    <statement pc="10" file="10" line="52" scope="-1" lastinstruction="0" />
    <statement pc="11" file="10" line="52" scope="-1" lastinstruction="0" />
    <statement pc="12" file="10" line="52" scope="-1" lastinstruction="0" />
    <statement pc="13" file="10" line="56" scope="-1" lastinstruction="0" />
    <statement pc="14" file="10" line="56" scope="-1" lastinstruction="0" />
    <statement pc="15" file="10" line="56" scope="-1" lastinstruction="0" />
    <statement pc="16" file="10" line="56" scope="-1" lastinstruction="0" />
    <statement pc="2.0" file="10" line="56" scope="-1" lastinstruction="0" />
    <statement pc="2.1" file="10" line="60" scope="-1" lastinstruction="0" />
   </sourcemap>
   <variables>
   </variables>
   <variableDebugInfo>
   </variableDebugInfo>
   <scopes>
   </scopes>
   <funcInfo>
    <function id="0" name="PixelShaderTSMAlpha" retID="519">
     <parameter id="518" />
    </function>
    <function id="1" name="PixelShaderTSM" retID="516">
     <parameter id="515" />
    </function>
    <function id="2" name="VertexShaderTSMAlpha" retID="512">
     <parameter id="511" />
    </function>
    <function id="3" name="VertexShaderTSM" retID="507">
     <parameter id="505" />
     <parameter id="506" />
    </function>
    <function id="4" name="PixelShaderLiSPSMAlpha" retID="499">
     <parameter id="498" />
    </function>
    <function id="5" name="PixelShaderLiSPSM" retID="496">
     <parameter id="495" />
    </function>
    <function id="6" name="VertexShaderLiSPSMAlpha" retID="492">
     <parameter id="491" />
    </function>
    <function id="7" name="VertexShaderLiSPSM" retID="486">
     <parameter id="484" />
     <parameter id="485" />
    </function>
    <function id="8" name="CalcShadowBias" retID="479">
     <parameter id="478" />
    </function>
    <function id="9" name="PixelShaderVertexColour" retID="476">
     <parameter id="475" />
    </function>
    <function id="10" name="VertexShaderVertexColour" retID="473">
     <parameter id="471" />
     <parameter id="472" />
    </function>
    <function id="11" name="ZPassVertexShader" retID="465">
     <parameter id="464" />
    </function>
    <function id="12" name="PS_LowLOD" retID="459">
     <parameter id="458" />
    </function>
    <function id="13" name="PS_HighLOD" retID="457">
     <parameter id="456" />
    </function>
    <function id="14" name="PS_CarHighLOD_PS3" retID="433">
     <parameter id="431" />
     <parameter id="432" />
     <parameter id="0" />
    </function>
    <function id="15" name="PS_CarLowLOD_PS3" retID="420">
     <parameter id="419" />
    </function>
    <function id="16" name="PS_CarLowLOD_360" retID="408">
     <parameter id="407" />
    </function>
    <function id="17" name="PS_CarHighLOD" retID="387">
     <parameter id="385" />
     <parameter id="386" />
     <parameter id="0" />
    </function>
    <function id="18" name="GetNoiseNormal" retID="382">
     <parameter id="380" />
     <parameter id="381" />
    </function>
    <function id="19" name="VS_CarNormalMapHighLOD_PC" retID="369">
     <parameter id="366" />
     <parameter id="367" />
     <parameter id="368" />
    </function>
    <function id="20" name="VS_CarNormalMapLowLOD" retID="355">
     <parameter id="352" />
     <parameter id="353" />
     <parameter id="354" />
    </function>
    <function id="21" name="VS_CarNormalMapHighLOD" retID="341">
     <parameter id="338" />
     <parameter id="339" />
     <parameter id="340" />
    </function>
    <function id="22" name="VS_CarLowLOD_PS3" retID="326">
     <parameter id="324" />
     <parameter id="325" />
    </function>
    <function id="23" name="VS_CarLowLOD" retID="312">
     <parameter id="310" />
     <parameter id="311" />
    </function>
    <function id="24" name="VS_CarLowLOD_PS3" retID="297">
     <parameter id="294" />
     <parameter id="295" />
     <parameter id="296" />
    </function>
    <function id="25" name="VS_CarLowLOD_360" retID="281">
     <parameter id="278" />
     <parameter id="279" />
     <parameter id="280" />
    </function>
    <function id="26" name="VS_CarHighLOD_PS3" retID="265">
     <parameter id="262" />
     <parameter id="263" />
     <parameter id="264" />
    </function>
    <function id="27" name="VS_CarHighLOD" retID="249">
     <parameter id="246" />
     <parameter id="247" />
     <parameter id="248" />
    </function>
    <function id="28" name="CalculateShaperRigDiffuse" retID="230">
     <parameter id="226" />
     <parameter id="227" />
     <parameter id="228" />
     <parameter id="229" />
     <parameter id="0" />
    </function>
    <function id="29" name="ReadPositionNormalTangent" retID="224">
     <parameter id="218" />
     <parameter id="219" />
     <parameter id="220" />
     <parameter id="221" />
     <parameter id="222" />
     <parameter id="223" />
    </function>
    <function id="30" name="GetLocalBinormal" retID="214">
     <parameter id="213" />
    </function>
    <function id="31" name="GetLocalTangent" retID="211">
     <parameter id="209" />
     <parameter id="210" />
    </function>
    <function id="32" name="GetLocalTangent" retID="207">
     <parameter id="206" />
    </function>
    <function id="33" name="GetLocalNormal" retID="205">
     <parameter id="203" />
     <parameter id="204" />
    </function>
    <function id="34" name="GetLocalNormal" retID="202">
     <parameter id="201" />
    </function>
    <function id="35" name="GetLocalPosition" retID="200">
     <parameter id="198" />
     <parameter id="199" />
    </function>
    <function id="36" name="GetLocalPosition" retID="197">
     <parameter id="196" />
    </function>
    <function id="37" name="GetPixelDamage" retID="195">
     <parameter id="194" />
    </function>
    <function id="38" name="GetMatrix" retID="192">
     <parameter id="189" />
     <parameter id="190" />
     <parameter id="191" />
    </function>
    <function id="39" name="CalcPostProcessFog" retID="151">
     <parameter id="149" />
     <parameter id="150" />
    </function>
    <function id="40" name="CalcFogColour" retID="148">
     <parameter id="146" />
     <parameter id="147" />
    </function>
    <function id="41" name="CalcVertexFog" retID="139">
     <parameter id="138" />
    </function>
    <function id="42" name="DoShadowCar" retID="134">
     <parameter id="131" />
     <parameter id="132" />
     <parameter id="133" />
     <parameter id="0" />
    </function>
    <function id="43" name="DoShadowOptimized" retID="126">
     <parameter id="122" />
     <parameter id="123" />
     <parameter id="124" />
     <parameter id="125" />
     <parameter id="0" />
    </function>
    <function id="44" name="DoShadow" retID="115">
     <parameter id="112" />
     <parameter id="113" />
     <parameter id="114" />
     <parameter id="0" />
    </function>
    <function id="45" name="DoShadowPCFDepth" retID="106">
     <parameter id="102" />
     <parameter id="103" />
     <parameter id="104" />
     <parameter id="105" />
    </function>
    <function id="46" name="Tex2DOffset" retID="98">
     <parameter id="95" />
     <parameter id="96" />
     <parameter id="97" />
    </function>
    <function id="47" name="GetShadowMapTexCoord" retID="93">
     <parameter id="92" />
    </function>
    <function id="48" name="VertexShadowPosView" retID="91">
     <parameter id="90" />
    </function>
    <function id="49" name="VertexShadowTexOptimized" retID="87">
     <parameter id="84" />
     <parameter id="85" />
     <parameter id="86" />
    </function>
    <function id="50" name="VertexShadowTex" retID="83">
     <parameter id="82" />
    </function>
    <function id="51" name="GetCombinedBrightness" retID="33">
     <parameter id="32" />
    </function>
    <function id="52" name="GetAdaptedLuminanceFromSampler" retID="30">
     <parameter id="29" />
    </function>
    <function id="53" name="DecodeRGBE8" retID="24">
     <parameter id="23" />
    </function>
    <function id="54" name="EncodeRGBE8" retID="19">
     <parameter id="18" />
    </function>
    <function id="55" name="DeCompressColourSpace" retID="17">
     <parameter id="16" />
    </function>
    <function id="56" name="CompressColourSpace" retID="15">
     <parameter id="14" />
    </function>
    <function id="57" name="ScaleHeadLightIntensity" retID="12">
     <parameter id="11" />
    </function>
    <function id="58" name="CalcVertexColour" retID="9">
     <parameter id="8" />
    </function>
    <function id="59" name="screen_position" retID="7">
     <parameter id="6" />
    </function>
    <function id="60" name="world_position" retID="4">
     <parameter id="3" />
    </function>
   </funcInfo>
   <funcEntryExitInfo>
   </funcEntryExitInfo>
   <VfetchInfo>
    <vfetch Address="3" Register="1" DestSwizzle="xyz1" Semantic="0x00" End="false" />
    <vfetch Address="4" Register="0" DestSwizzle="z___" Semantic="0xa0" End="true" />
   </VfetchInfo>
   <InterpolatorInfo>
   </InterpolatorInfo>
   <LiteralFloats>
    <Float Register="252" value0="0" value1="0" value2="0" value3="0" />
    <Float Register="253" value0="0" value1="0" value2="0" value3="0" />
    <Float Register="254" value0="0" value1="0" value2="0" value3="0" />
    <Float Register="255" value0="1" value1="15.1" value2="4" value3="0" />
   </LiteralFloats>
   <LiteralInts>
   </LiteralInts>
   <LiteralBools>
   </LiteralBools>
  </shader>
  <shader entrypoint="VertexShaderLiSPSM" target="vs_3_0" FxlTechniqueName="RenderLiSPSMMatrixPalette" FxlTechnique="4" FxlPassName="p0" FxlPass="0" ZPass="0" pdbHint="4e4a0009-08362a8e-aef0f5b7">
   <constanttable>
    <constant register="c24" count="4">
     <type name="cmWorldViewProj" class="matrix_columns" type="float" rows="4" columns="4" />
    </constant>
   </constanttable>
   <sourcemap>
    <statement pc="3" file="10" line="34" scope="-1" lastinstruction="0" />
    <statement pc="0.1" file="10" line="34" scope="-1" lastinstruction="0" />
    <statement pc="4" file="10" line="56" scope="-1" lastinstruction="0" />
    <statement pc="5" file="10" line="56" scope="-1" lastinstruction="0" />
    <statement pc="6" file="10" line="56" scope="-1" lastinstruction="0" />
    <statement pc="7" file="10" line="56" scope="-1" lastinstruction="0" />
    <statement pc="1.1" file="10" line="56" scope="-1" lastinstruction="0" />
    <statement pc="2.0" file="10" line="60" scope="-1" lastinstruction="0" />
   </sourcemap>
   <variables>
   </variables>
   <variableDebugInfo>
   </variableDebugInfo>
   <scopes>
   </scopes>
   <funcInfo>
    <function id="0" name="PixelShaderTSMAlpha" retID="519">
     <parameter id="518" />
    </function>
    <function id="1" name="PixelShaderTSM" retID="516">
     <parameter id="515" />
    </function>
    <function id="2" name="VertexShaderTSMAlpha" retID="512">
     <parameter id="511" />
    </function>
    <function id="3" name="VertexShaderTSM" retID="507">
     <parameter id="505" />
     <parameter id="506" />
    </function>
    <function id="4" name="PixelShaderLiSPSMAlpha" retID="499">
     <parameter id="498" />
    </function>
    <function id="5" name="PixelShaderLiSPSM" retID="496">
     <parameter id="495" />
    </function>
    <function id="6" name="VertexShaderLiSPSMAlpha" retID="492">
     <parameter id="491" />
    </function>
    <function id="7" name="VertexShaderLiSPSM" retID="486">
     <parameter id="484" />
     <parameter id="485" />
    </function>
    <function id="8" name="CalcShadowBias" retID="479">
     <parameter id="478" />
    </function>
    <function id="9" name="PixelShaderVertexColour" retID="476">
     <parameter id="475" />
    </function>
    <function id="10" name="VertexShaderVertexColour" retID="473">
     <parameter id="471" />
     <parameter id="472" />
    </function>
    <function id="11" name="ZPassVertexShader" retID="465">
     <parameter id="464" />
    </function>
    <function id="12" name="PS_LowLOD" retID="459">
     <parameter id="458" />
    </function>
    <function id="13" name="PS_HighLOD" retID="457">
     <parameter id="456" />
    </function>
    <function id="14" name="PS_CarHighLOD_PS3" retID="433">
     <parameter id="431" />
     <parameter id="432" />
     <parameter id="0" />
    </function>
    <function id="15" name="PS_CarLowLOD_PS3" retID="420">
     <parameter id="419" />
    </function>
    <function id="16" name="PS_CarLowLOD_360" retID="408">
     <parameter id="407" />
    </function>
    <function id="17" name="PS_CarHighLOD" retID="387">
     <parameter id="385" />
     <parameter id="386" />
     <parameter id="0" />
    </function>
    <function id="18" name="GetNoiseNormal" retID="382">
     <parameter id="380" />
     <parameter id="381" />
    </function>
    <function id="19" name="VS_CarNormalMapHighLOD_PC" retID="369">
     <parameter id="366" />
     <parameter id="367" />
     <parameter id="368" />
    </function>
    <function id="20" name="VS_CarNormalMapLowLOD" retID="355">
     <parameter id="352" />
     <parameter id="353" />
     <parameter id="354" />
    </function>
    <function id="21" name="VS_CarNormalMapHighLOD" retID="341">
     <parameter id="338" />
     <parameter id="339" />
     <parameter id="340" />
    </function>
    <function id="22" name="VS_CarLowLOD_PS3" retID="326">
     <parameter id="324" />
     <parameter id="325" />
    </function>
    <function id="23" name="VS_CarLowLOD" retID="312">
     <parameter id="310" />
     <parameter id="311" />
    </function>
    <function id="24" name="VS_CarLowLOD_PS3" retID="297">
     <parameter id="294" />
     <parameter id="295" />
     <parameter id="296" />
    </function>
    <function id="25" name="VS_CarLowLOD_360" retID="281">
     <parameter id="278" />
     <parameter id="279" />
     <parameter id="280" />
    </function>
    <function id="26" name="VS_CarHighLOD_PS3" retID="265">
     <parameter id="262" />
     <parameter id="263" />
     <parameter id="264" />
    </function>
    <function id="27" name="VS_CarHighLOD" retID="249">
     <parameter id="246" />
     <parameter id="247" />
     <parameter id="248" />
    </function>
    <function id="28" name="CalculateShaperRigDiffuse" retID="230">
     <parameter id="226" />
     <parameter id="227" />
     <parameter id="228" />
     <parameter id="229" />
     <parameter id="0" />
    </function>
    <function id="29" name="ReadPositionNormalTangent" retID="224">
     <parameter id="218" />
     <parameter id="219" />
     <parameter id="220" />
     <parameter id="221" />
     <parameter id="222" />
     <parameter id="223" />
    </function>
    <function id="30" name="GetLocalBinormal" retID="214">
     <parameter id="213" />
    </function>
    <function id="31" name="GetLocalTangent" retID="211">
     <parameter id="209" />
     <parameter id="210" />
    </function>
    <function id="32" name="GetLocalTangent" retID="207">
     <parameter id="206" />
    </function>
    <function id="33" name="GetLocalNormal" retID="205">
     <parameter id="203" />
     <parameter id="204" />
    </function>
    <function id="34" name="GetLocalNormal" retID="202">
     <parameter id="201" />
    </function>
    <function id="35" name="GetLocalPosition" retID="200">
     <parameter id="198" />
     <parameter id="199" />
    </function>
    <function id="36" name="GetLocalPosition" retID="197">
     <parameter id="196" />
    </function>
    <function id="37" name="GetPixelDamage" retID="195">
     <parameter id="194" />
    </function>
    <function id="38" name="GetMatrix" retID="192">
     <parameter id="189" />
     <parameter id="190" />
     <parameter id="191" />
    </function>
    <function id="39" name="CalcPostProcessFog" retID="151">
     <parameter id="149" />
     <parameter id="150" />
    </function>
    <function id="40" name="CalcFogColour" retID="148">
     <parameter id="146" />
     <parameter id="147" />
    </function>
    <function id="41" name="CalcVertexFog" retID="139">
     <parameter id="138" />
    </function>
    <function id="42" name="DoShadowCar" retID="134">
     <parameter id="131" />
     <parameter id="132" />
     <parameter id="133" />
     <parameter id="0" />
    </function>
    <function id="43" name="DoShadowOptimized" retID="126">
     <parameter id="122" />
     <parameter id="123" />
     <parameter id="124" />
     <parameter id="125" />
     <parameter id="0" />
    </function>
    <function id="44" name="DoShadow" retID="115">
     <parameter id="112" />
     <parameter id="113" />
     <parameter id="114" />
     <parameter id="0" />
    </function>
    <function id="45" name="DoShadowPCFDepth" retID="106">
     <parameter id="102" />
     <parameter id="103" />
     <parameter id="104" />
     <parameter id="105" />
    </function>
    <function id="46" name="Tex2DOffset" retID="98">
     <parameter id="95" />
     <parameter id="96" />
     <parameter id="97" />
    </function>
    <function id="47" name="GetShadowMapTexCoord" retID="93">
     <parameter id="92" />
    </function>
    <function id="48" name="VertexShadowPosView" retID="91">
     <parameter id="90" />
    </function>
    <function id="49" name="VertexShadowTexOptimized" retID="87">
     <parameter id="84" />
     <parameter id="85" />
     <parameter id="86" />
    </function>
    <function id="50" name="VertexShadowTex" retID="83">
     <parameter id="82" />
    </function>
    <function id="51" name="GetCombinedBrightness" retID="33">
     <parameter id="32" />
    </function>
    <function id="52" name="GetAdaptedLuminanceFromSampler" retID="30">
     <parameter id="29" />
    </function>
    <function id="53" name="DecodeRGBE8" retID="24">
     <parameter id="23" />
    </function>
    <function id="54" name="EncodeRGBE8" retID="19">
     <parameter id="18" />
    </function>
    <function id="55" name="DeCompressColourSpace" retID="17">
     <parameter id="16" />
    </function>
    <function id="56" name="CompressColourSpace" retID="15">
     <parameter id="14" />
    </function>
    <function id="57" name="ScaleHeadLightIntensity" retID="12">
     <parameter id="11" />
    </function>
    <function id="58" name="CalcVertexColour" retID="9">
     <parameter id="8" />
    </function>
    <function id="59" name="screen_position" retID="7">
     <parameter id="6" />
    </function>
    <function id="60" name="world_position" retID="4">
     <parameter id="3" />
    </function>
   </funcInfo>
   <funcEntryExitInfo>
   </funcEntryExitInfo>
   <VfetchInfo>
    <vfetch Address="3" Register="0" DestSwizzle="xyz1" Semantic="0x00" End="false" />
   </VfetchInfo>
   <InterpolatorInfo>
   </InterpolatorInfo>
   <LiteralFloats>
   </LiteralFloats>
   <LiteralInts>
   </LiteralInts>
   <LiteralBools>
   </LiteralBools>
  </shader>
  <shader entrypoint="PixelShaderVertexColour" target="ps_3_0" FxlTechniqueName="RenderLiSPSMAlphaTex" FxlTechnique="3" FxlPassName="p0" FxlPass="0" ZPass="0" pdbHint="4e4a000a-08362a8e-aef0f5b7">
   <constanttable>
   </constanttable>
   <sourcemap>
    <statement pc="1" file="9" line="46" scope="-1" lastinstruction="0" />
   </sourcemap>
   <variables>
   </variables>
   <variableDebugInfo>
   </variableDebugInfo>
   <scopes>
   </scopes>
   <funcInfo>
    <function id="0" name="PixelShaderTSMAlpha" retID="519">
     <parameter id="518" />
    </function>
    <function id="1" name="PixelShaderTSM" retID="516">
     <parameter id="515" />
    </function>
    <function id="2" name="VertexShaderTSMAlpha" retID="512">
     <parameter id="511" />
    </function>
    <function id="3" name="VertexShaderTSM" retID="507">
     <parameter id="505" />
     <parameter id="506" />
    </function>
    <function id="4" name="PixelShaderLiSPSMAlpha" retID="499">
     <parameter id="498" />
    </function>
    <function id="5" name="PixelShaderLiSPSM" retID="496">
     <parameter id="495" />
    </function>
    <function id="6" name="VertexShaderLiSPSMAlpha" retID="492">
     <parameter id="491" />
    </function>
    <function id="7" name="VertexShaderLiSPSM" retID="486">
     <parameter id="484" />
     <parameter id="485" />
    </function>
    <function id="8" name="CalcShadowBias" retID="479">
     <parameter id="478" />
    </function>
    <function id="9" name="PixelShaderVertexColour" retID="476">
     <parameter id="475" />
    </function>
    <function id="10" name="VertexShaderVertexColour" retID="473">
     <parameter id="471" />
     <parameter id="472" />
    </function>
    <function id="11" name="ZPassVertexShader" retID="465">
     <parameter id="464" />
    </function>
    <function id="12" name="PS_LowLOD" retID="459">
     <parameter id="458" />
    </function>
    <function id="13" name="PS_HighLOD" retID="457">
     <parameter id="456" />
    </function>
    <function id="14" name="PS_CarHighLOD_PS3" retID="433">
     <parameter id="431" />
     <parameter id="432" />
     <parameter id="0" />
    </function>
    <function id="15" name="PS_CarLowLOD_PS3" retID="420">
     <parameter id="419" />
    </function>
    <function id="16" name="PS_CarLowLOD_360" retID="408">
     <parameter id="407" />
    </function>
    <function id="17" name="PS_CarHighLOD" retID="387">
     <parameter id="385" />
     <parameter id="386" />
     <parameter id="0" />
    </function>
    <function id="18" name="GetNoiseNormal" retID="382">
     <parameter id="380" />
     <parameter id="381" />
    </function>
    <function id="19" name="VS_CarNormalMapHighLOD_PC" retID="369">
     <parameter id="366" />
     <parameter id="367" />
     <parameter id="368" />
    </function>
    <function id="20" name="VS_CarNormalMapLowLOD" retID="355">
     <parameter id="352" />
     <parameter id="353" />
     <parameter id="354" />
    </function>
    <function id="21" name="VS_CarNormalMapHighLOD" retID="341">
     <parameter id="338" />
     <parameter id="339" />
     <parameter id="340" />
    </function>
    <function id="22" name="VS_CarLowLOD_PS3" retID="326">
     <parameter id="324" />
     <parameter id="325" />
    </function>
    <function id="23" name="VS_CarLowLOD" retID="312">
     <parameter id="310" />
     <parameter id="311" />
    </function>
    <function id="24" name="VS_CarLowLOD_PS3" retID="297">
     <parameter id="294" />
     <parameter id="295" />
     <parameter id="296" />
    </function>
    <function id="25" name="VS_CarLowLOD_360" retID="281">
     <parameter id="278" />
     <parameter id="279" />
     <parameter id="280" />
    </function>
    <function id="26" name="VS_CarHighLOD_PS3" retID="265">
     <parameter id="262" />
     <parameter id="263" />
     <parameter id="264" />
    </function>
    <function id="27" name="VS_CarHighLOD" retID="249">
     <parameter id="246" />
     <parameter id="247" />
     <parameter id="248" />
    </function>
    <function id="28" name="CalculateShaperRigDiffuse" retID="230">
     <parameter id="226" />
     <parameter id="227" />
     <parameter id="228" />
     <parameter id="229" />
     <parameter id="0" />
    </function>
    <function id="29" name="ReadPositionNormalTangent" retID="224">
     <parameter id="218" />
     <parameter id="219" />
     <parameter id="220" />
     <parameter id="221" />
     <parameter id="222" />
     <parameter id="223" />
    </function>
    <function id="30" name="GetLocalBinormal" retID="214">
     <parameter id="213" />
    </function>
    <function id="31" name="GetLocalTangent" retID="211">
     <parameter id="209" />
     <parameter id="210" />
    </function>
    <function id="32" name="GetLocalTangent" retID="207">
     <parameter id="206" />
    </function>
    <function id="33" name="GetLocalNormal" retID="205">
     <parameter id="203" />
     <parameter id="204" />
    </function>
    <function id="34" name="GetLocalNormal" retID="202">
     <parameter id="201" />
    </function>
    <function id="35" name="GetLocalPosition" retID="200">
     <parameter id="198" />
     <parameter id="199" />
    </function>
    <function id="36" name="GetLocalPosition" retID="197">
     <parameter id="196" />
    </function>
    <function id="37" name="GetPixelDamage" retID="195">
     <parameter id="194" />
    </function>
    <function id="38" name="GetMatrix" retID="192">
     <parameter id="189" />
     <parameter id="190" />
     <parameter id="191" />
    </function>
    <function id="39" name="CalcPostProcessFog" retID="151">
     <parameter id="149" />
     <parameter id="150" />
    </function>
    <function id="40" name="CalcFogColour" retID="148">
     <parameter id="146" />
     <parameter id="147" />
    </function>
    <function id="41" name="CalcVertexFog" retID="139">
     <parameter id="138" />
    </function>
    <function id="42" name="DoShadowCar" retID="134">
     <parameter id="131" />
     <parameter id="132" />
     <parameter id="133" />
     <parameter id="0" />
    </function>
    <function id="43" name="DoShadowOptimized" retID="126">
     <parameter id="122" />
     <parameter id="123" />
     <parameter id="124" />
     <parameter id="125" />
     <parameter id="0" />
    </function>
    <function id="44" name="DoShadow" retID="115">
     <parameter id="112" />
     <parameter id="113" />
     <parameter id="114" />
     <parameter id="0" />
    </function>
    <function id="45" name="DoShadowPCFDepth" retID="106">
     <parameter id="102" />
     <parameter id="103" />
     <parameter id="104" />
     <parameter id="105" />
    </function>
    <function id="46" name="Tex2DOffset" retID="98">
     <parameter id="95" />
     <parameter id="96" />
     <parameter id="97" />
    </function>
    <function id="47" name="GetShadowMapTexCoord" retID="93">
     <parameter id="92" />
    </function>
    <function id="48" name="VertexShadowPosView" retID="91">
     <parameter id="90" />
    </function>
    <function id="49" name="VertexShadowTexOptimized" retID="87">
     <parameter id="84" />
     <parameter id="85" />
     <parameter id="86" />
    </function>
    <function id="50" name="VertexShadowTex" retID="83">
     <parameter id="82" />
    </function>
    <function id="51" name="GetCombinedBrightness" retID="33">
     <parameter id="32" />
    </function>
    <function id="52" name="GetAdaptedLuminanceFromSampler" retID="30">
     <parameter id="29" />
    </function>
    <function id="53" name="DecodeRGBE8" retID="24">
     <parameter id="23" />
    </function>
    <function id="54" name="EncodeRGBE8" retID="19">
     <parameter id="18" />
    </function>
    <function id="55" name="DeCompressColourSpace" retID="17">
     <parameter id="16" />
    </function>
    <function id="56" name="CompressColourSpace" retID="15">
     <parameter id="14" />
    </function>
    <function id="57" name="ScaleHeadLightIntensity" retID="12">
     <parameter id="11" />
    </function>
    <function id="58" name="CalcVertexColour" retID="9">
     <parameter id="8" />
    </function>
    <function id="59" name="screen_position" retID="7">
     <parameter id="6" />
    </function>
    <function id="60" name="world_position" retID="4">
     <parameter id="3" />
    </function>
   </funcInfo>
   <funcEntryExitInfo>
   </funcEntryExitInfo>
   <VfetchInfo>
   </VfetchInfo>
   <InterpolatorInfo>
    <Interpolator Register="0" Semantic="0xa0" Mask="xyzw" />
   </InterpolatorInfo>
   <LiteralFloats>
   </LiteralFloats>
   <LiteralInts>
   </LiteralInts>
   <LiteralBools>
   </LiteralBools>
  </shader>
  <shader entrypoint="VertexShaderVertexColour" target="vs_3_0" FxlTechniqueName="RenderLiSPSMAlphaTex" FxlTechnique="3" FxlPassName="p0" FxlPass="0" ZPass="0" pdbHint="4e4a000b-08362a8e-aef0f5b7">
   <constanttable>
    <constant register="c24" count="4">
     <type name="cmWorldViewProj" class="matrix_columns" type="float" rows="4" columns="4" />
    </constant>
   </constanttable>
   <sourcemap>
    <statement pc="3" file="9" line="33" scope="-1" lastinstruction="0" />
    <statement pc="4" file="9" line="33" scope="-1" lastinstruction="0" />
    <statement pc="0.1" file="9" line="33" scope="-1" lastinstruction="0" />
    <statement pc="5" file="9" line="38" scope="-1" lastinstruction="0" />
    <statement pc="6" file="9" line="38" scope="-1" lastinstruction="0" />
    <statement pc="7" file="9" line="38" scope="-1" lastinstruction="0" />
    <statement pc="8" file="9" line="38" scope="-1" lastinstruction="0" />
    <statement pc="1.1" file="9" line="38" scope="-1" lastinstruction="0" />
    <statement pc="9" file="9" line="41" scope="-1" lastinstruction="0" />
   </sourcemap>
   <variables>
   </variables>
   <variableDebugInfo>
   </variableDebugInfo>
   <scopes>
   </scopes>
   <funcInfo>
    <function id="0" name="PixelShaderTSMAlpha" retID="519">
     <parameter id="518" />
    </function>
    <function id="1" name="PixelShaderTSM" retID="516">
     <parameter id="515" />
    </function>
    <function id="2" name="VertexShaderTSMAlpha" retID="512">
     <parameter id="511" />
    </function>
    <function id="3" name="VertexShaderTSM" retID="507">
     <parameter id="505" />
     <parameter id="506" />
    </function>
    <function id="4" name="PixelShaderLiSPSMAlpha" retID="499">
     <parameter id="498" />
    </function>
    <function id="5" name="PixelShaderLiSPSM" retID="496">
     <parameter id="495" />
    </function>
    <function id="6" name="VertexShaderLiSPSMAlpha" retID="492">
     <parameter id="491" />
    </function>
    <function id="7" name="VertexShaderLiSPSM" retID="486">
     <parameter id="484" />
     <parameter id="485" />
    </function>
    <function id="8" name="CalcShadowBias" retID="479">
     <parameter id="478" />
    </function>
    <function id="9" name="PixelShaderVertexColour" retID="476">
     <parameter id="475" />
    </function>
    <function id="10" name="VertexShaderVertexColour" retID="473">
     <parameter id="471" />
     <parameter id="472" />
    </function>
    <function id="11" name="ZPassVertexShader" retID="465">
     <parameter id="464" />
    </function>
    <function id="12" name="PS_LowLOD" retID="459">
     <parameter id="458" />
    </function>
    <function id="13" name="PS_HighLOD" retID="457">
     <parameter id="456" />
    </function>
    <function id="14" name="PS_CarHighLOD_PS3" retID="433">
     <parameter id="431" />
     <parameter id="432" />
     <parameter id="0" />
    </function>
    <function id="15" name="PS_CarLowLOD_PS3" retID="420">
     <parameter id="419" />
    </function>
    <function id="16" name="PS_CarLowLOD_360" retID="408">
     <parameter id="407" />
    </function>
    <function id="17" name="PS_CarHighLOD" retID="387">
     <parameter id="385" />
     <parameter id="386" />
     <parameter id="0" />
    </function>
    <function id="18" name="GetNoiseNormal" retID="382">
     <parameter id="380" />
     <parameter id="381" />
    </function>
    <function id="19" name="VS_CarNormalMapHighLOD_PC" retID="369">
     <parameter id="366" />
     <parameter id="367" />
     <parameter id="368" />
    </function>
    <function id="20" name="VS_CarNormalMapLowLOD" retID="355">
     <parameter id="352" />
     <parameter id="353" />
     <parameter id="354" />
    </function>
    <function id="21" name="VS_CarNormalMapHighLOD" retID="341">
     <parameter id="338" />
     <parameter id="339" />
     <parameter id="340" />
    </function>
    <function id="22" name="VS_CarLowLOD_PS3" retID="326">
     <parameter id="324" />
     <parameter id="325" />
    </function>
    <function id="23" name="VS_CarLowLOD" retID="312">
     <parameter id="310" />
     <parameter id="311" />
    </function>
    <function id="24" name="VS_CarLowLOD_PS3" retID="297">
     <parameter id="294" />
     <parameter id="295" />
     <parameter id="296" />
    </function>
    <function id="25" name="VS_CarLowLOD_360" retID="281">
     <parameter id="278" />
     <parameter id="279" />
     <parameter id="280" />
    </function>
    <function id="26" name="VS_CarHighLOD_PS3" retID="265">
     <parameter id="262" />
     <parameter id="263" />
     <parameter id="264" />
    </function>
    <function id="27" name="VS_CarHighLOD" retID="249">
     <parameter id="246" />
     <parameter id="247" />
     <parameter id="248" />
    </function>
    <function id="28" name="CalculateShaperRigDiffuse" retID="230">
     <parameter id="226" />
     <parameter id="227" />
     <parameter id="228" />
     <parameter id="229" />
     <parameter id="0" />
    </function>
    <function id="29" name="ReadPositionNormalTangent" retID="224">
     <parameter id="218" />
     <parameter id="219" />
     <parameter id="220" />
     <parameter id="221" />
     <parameter id="222" />
     <parameter id="223" />
    </function>
    <function id="30" name="GetLocalBinormal" retID="214">
     <parameter id="213" />
    </function>
    <function id="31" name="GetLocalTangent" retID="211">
     <parameter id="209" />
     <parameter id="210" />
    </function>
    <function id="32" name="GetLocalTangent" retID="207">
     <parameter id="206" />
    </function>
    <function id="33" name="GetLocalNormal" retID="205">
     <parameter id="203" />
     <parameter id="204" />
    </function>
    <function id="34" name="GetLocalNormal" retID="202">
     <parameter id="201" />
    </function>
    <function id="35" name="GetLocalPosition" retID="200">
     <parameter id="198" />
     <parameter id="199" />
    </function>
    <function id="36" name="GetLocalPosition" retID="197">
     <parameter id="196" />
    </function>
    <function id="37" name="GetPixelDamage" retID="195">
     <parameter id="194" />
    </function>
    <function id="38" name="GetMatrix" retID="192">
     <parameter id="189" />
     <parameter id="190" />
     <parameter id="191" />
    </function>
    <function id="39" name="CalcPostProcessFog" retID="151">
     <parameter id="149" />
     <parameter id="150" />
    </function>
    <function id="40" name="CalcFogColour" retID="148">
     <parameter id="146" />
     <parameter id="147" />
    </function>
    <function id="41" name="CalcVertexFog" retID="139">
     <parameter id="138" />
    </function>
    <function id="42" name="DoShadowCar" retID="134">
     <parameter id="131" />
     <parameter id="132" />
     <parameter id="133" />
     <parameter id="0" />
    </function>
    <function id="43" name="DoShadowOptimized" retID="126">
     <parameter id="122" />
     <parameter id="123" />
     <parameter id="124" />
     <parameter id="125" />
     <parameter id="0" />
    </function>
    <function id="44" name="DoShadow" retID="115">
     <parameter id="112" />
     <parameter id="113" />
     <parameter id="114" />
     <parameter id="0" />
    </function>
    <function id="45" name="DoShadowPCFDepth" retID="106">
     <parameter id="102" />
     <parameter id="103" />
     <parameter id="104" />
     <parameter id="105" />
    </function>
    <function id="46" name="Tex2DOffset" retID="98">
     <parameter id="95" />
     <parameter id="96" />
     <parameter id="97" />
    </function>
    <function id="47" name="GetShadowMapTexCoord" retID="93">
     <parameter id="92" />
    </function>
    <function id="48" name="VertexShadowPosView" retID="91">
     <parameter id="90" />
    </function>
    <function id="49" name="VertexShadowTexOptimized" retID="87">
     <parameter id="84" />
     <parameter id="85" />
     <parameter id="86" />
    </function>
    <function id="50" name="VertexShadowTex" retID="83">
     <parameter id="82" />
    </function>
    <function id="51" name="GetCombinedBrightness" retID="33">
     <parameter id="32" />
    </function>
    <function id="52" name="GetAdaptedLuminanceFromSampler" retID="30">
     <parameter id="29" />
    </function>
    <function id="53" name="DecodeRGBE8" retID="24">
     <parameter id="23" />
    </function>
    <function id="54" name="EncodeRGBE8" retID="19">
     <parameter id="18" />
    </function>
    <function id="55" name="DeCompressColourSpace" retID="17">
     <parameter id="16" />
    </function>
    <function id="56" name="CompressColourSpace" retID="15">
     <parameter id="14" />
    </function>
    <function id="57" name="ScaleHeadLightIntensity" retID="12">
     <parameter id="11" />
    </function>
    <function id="58" name="CalcVertexColour" retID="9">
     <parameter id="8" />
    </function>
    <function id="59" name="screen_position" retID="7">
     <parameter id="6" />
    </function>
    <function id="60" name="world_position" retID="4">
     <parameter id="3" />
    </function>
   </funcInfo>
   <funcEntryExitInfo>
   </funcEntryExitInfo>
   <VfetchInfo>
    <vfetch Address="3" Register="1" DestSwizzle="xyzw" Semantic="0x00" End="false" />
    <vfetch Address="4" Register="0" DestSwizzle="xyzw" Semantic="0xa0" End="true" />
   </VfetchInfo>
   <InterpolatorInfo>
    <Interpolator Register="0" Semantic="0xa0" Mask="xyzw" />
   </InterpolatorInfo>
   <LiteralFloats>
   </LiteralFloats>
   <LiteralInts>
   </LiteralInts>
   <LiteralBools>
   </LiteralBools>
  </shader>
  <shader entrypoint="ZPassVertexShader" target="vs_3_0" FxlTechniqueName="RenderTSM" FxlTechnique="2" FxlPassName="p0" FxlPass="0" ZPass="0" pdbHint="4e4a000c-08362a8e-aef0f5b7">
   <constanttable>
    <constant register="c24" count="4">
     <type name="cmWorldViewProj" class="matrix_columns" type="float" rows="4" columns="4" />
    </constant>
   </constanttable>
   <sourcemap>
    <statement pc="3" file="9" line="8" scope="-1" lastinstruction="0" />
    <statement pc="0.1" file="9" line="8" scope="-1" lastinstruction="0" />
    <statement pc="4" file="9" line="12" scope="-1" lastinstruction="0" />
    <statement pc="5" file="9" line="12" scope="-1" lastinstruction="0" />
    <statement pc="6" file="9" line="12" scope="-1" lastinstruction="0" />
    <statement pc="7" file="9" line="12" scope="-1" lastinstruction="0" />
    <statement pc="1.1" file="9" line="12" scope="-1" lastinstruction="0" />
    <statement pc="2.0" file="9" line="14" scope="-1" lastinstruction="0" />
   </sourcemap>
   <variables>
   </variables>
   <variableDebugInfo>
   </variableDebugInfo>
   <scopes>
   </scopes>
   <funcInfo>
    <function id="0" name="PixelShaderTSMAlpha" retID="519">
     <parameter id="518" />
    </function>
    <function id="1" name="PixelShaderTSM" retID="516">
     <parameter id="515" />
    </function>
    <function id="2" name="VertexShaderTSMAlpha" retID="512">
     <parameter id="511" />
    </function>
    <function id="3" name="VertexShaderTSM" retID="507">
     <parameter id="505" />
     <parameter id="506" />
    </function>
    <function id="4" name="PixelShaderLiSPSMAlpha" retID="499">
     <parameter id="498" />
    </function>
    <function id="5" name="PixelShaderLiSPSM" retID="496">
     <parameter id="495" />
    </function>
    <function id="6" name="VertexShaderLiSPSMAlpha" retID="492">
     <parameter id="491" />
    </function>
    <function id="7" name="VertexShaderLiSPSM" retID="486">
     <parameter id="484" />
     <parameter id="485" />
    </function>
    <function id="8" name="CalcShadowBias" retID="479">
     <parameter id="478" />
    </function>
    <function id="9" name="PixelShaderVertexColour" retID="476">
     <parameter id="475" />
    </function>
    <function id="10" name="VertexShaderVertexColour" retID="473">
     <parameter id="471" />
     <parameter id="472" />
    </function>
    <function id="11" name="ZPassVertexShader" retID="465">
     <parameter id="464" />
    </function>
    <function id="12" name="PS_LowLOD" retID="459">
     <parameter id="458" />
    </function>
    <function id="13" name="PS_HighLOD" retID="457">
     <parameter id="456" />
    </function>
    <function id="14" name="PS_CarHighLOD_PS3" retID="433">
     <parameter id="431" />
     <parameter id="432" />
     <parameter id="0" />
    </function>
    <function id="15" name="PS_CarLowLOD_PS3" retID="420">
     <parameter id="419" />
    </function>
    <function id="16" name="PS_CarLowLOD_360" retID="408">
     <parameter id="407" />
    </function>
    <function id="17" name="PS_CarHighLOD" retID="387">
     <parameter id="385" />
     <parameter id="386" />
     <parameter id="0" />
    </function>
    <function id="18" name="GetNoiseNormal" retID="382">
     <parameter id="380" />
     <parameter id="381" />
    </function>
    <function id="19" name="VS_CarNormalMapHighLOD_PC" retID="369">
     <parameter id="366" />
     <parameter id="367" />
     <parameter id="368" />
    </function>
    <function id="20" name="VS_CarNormalMapLowLOD" retID="355">
     <parameter id="352" />
     <parameter id="353" />
     <parameter id="354" />
    </function>
    <function id="21" name="VS_CarNormalMapHighLOD" retID="341">
     <parameter id="338" />
     <parameter id="339" />
     <parameter id="340" />
    </function>
    <function id="22" name="VS_CarLowLOD_PS3" retID="326">
     <parameter id="324" />
     <parameter id="325" />
    </function>
    <function id="23" name="VS_CarLowLOD" retID="312">
     <parameter id="310" />
     <parameter id="311" />
    </function>
    <function id="24" name="VS_CarLowLOD_PS3" retID="297">
     <parameter id="294" />
     <parameter id="295" />
     <parameter id="296" />
    </function>
    <function id="25" name="VS_CarLowLOD_360" retID="281">
     <parameter id="278" />
     <parameter id="279" />
     <parameter id="280" />
    </function>
    <function id="26" name="VS_CarHighLOD_PS3" retID="265">
     <parameter id="262" />
     <parameter id="263" />
     <parameter id="264" />
    </function>
    <function id="27" name="VS_CarHighLOD" retID="249">
     <parameter id="246" />
     <parameter id="247" />
     <parameter id="248" />
    </function>
    <function id="28" name="CalculateShaperRigDiffuse" retID="230">
     <parameter id="226" />
     <parameter id="227" />
     <parameter id="228" />
     <parameter id="229" />
     <parameter id="0" />
    </function>
    <function id="29" name="ReadPositionNormalTangent" retID="224">
     <parameter id="218" />
     <parameter id="219" />
     <parameter id="220" />
     <parameter id="221" />
     <parameter id="222" />
     <parameter id="223" />
    </function>
    <function id="30" name="GetLocalBinormal" retID="214">
     <parameter id="213" />
    </function>
    <function id="31" name="GetLocalTangent" retID="211">
     <parameter id="209" />
     <parameter id="210" />
    </function>
    <function id="32" name="GetLocalTangent" retID="207">
     <parameter id="206" />
    </function>
    <function id="33" name="GetLocalNormal" retID="205">
     <parameter id="203" />
     <parameter id="204" />
    </function>
    <function id="34" name="GetLocalNormal" retID="202">
     <parameter id="201" />
    </function>
    <function id="35" name="GetLocalPosition" retID="200">
     <parameter id="198" />
     <parameter id="199" />
    </function>
    <function id="36" name="GetLocalPosition" retID="197">
     <parameter id="196" />
    </function>
    <function id="37" name="GetPixelDamage" retID="195">
     <parameter id="194" />
    </function>
    <function id="38" name="GetMatrix" retID="192">
     <parameter id="189" />
     <parameter id="190" />
     <parameter id="191" />
    </function>
    <function id="39" name="CalcPostProcessFog" retID="151">
     <parameter id="149" />
     <parameter id="150" />
    </function>
    <function id="40" name="CalcFogColour" retID="148">
     <parameter id="146" />
     <parameter id="147" />
    </function>
    <function id="41" name="CalcVertexFog" retID="139">
     <parameter id="138" />
    </function>
    <function id="42" name="DoShadowCar" retID="134">
     <parameter id="131" />
     <parameter id="132" />
     <parameter id="133" />
     <parameter id="0" />
    </function>
    <function id="43" name="DoShadowOptimized" retID="126">
     <parameter id="122" />
     <parameter id="123" />
     <parameter id="124" />
     <parameter id="125" />
     <parameter id="0" />
    </function>
    <function id="44" name="DoShadow" retID="115">
     <parameter id="112" />
     <parameter id="113" />
     <parameter id="114" />
     <parameter id="0" />
    </function>
    <function id="45" name="DoShadowPCFDepth" retID="106">
     <parameter id="102" />
     <parameter id="103" />
     <parameter id="104" />
     <parameter id="105" />
    </function>
    <function id="46" name="Tex2DOffset" retID="98">
     <parameter id="95" />
     <parameter id="96" />
     <parameter id="97" />
    </function>
    <function id="47" name="GetShadowMapTexCoord" retID="93">
     <parameter id="92" />
    </function>
    <function id="48" name="VertexShadowPosView" retID="91">
     <parameter id="90" />
    </function>
    <function id="49" name="VertexShadowTexOptimized" retID="87">
     <parameter id="84" />
     <parameter id="85" />
     <parameter id="86" />
    </function>
    <function id="50" name="VertexShadowTex" retID="83">
     <parameter id="82" />
    </function>
    <function id="51" name="GetCombinedBrightness" retID="33">
     <parameter id="32" />
    </function>
    <function id="52" name="GetAdaptedLuminanceFromSampler" retID="30">
     <parameter id="29" />
    </function>
    <function id="53" name="DecodeRGBE8" retID="24">
     <parameter id="23" />
    </function>
    <function id="54" name="EncodeRGBE8" retID="19">
     <parameter id="18" />
    </function>
    <function id="55" name="DeCompressColourSpace" retID="17">
     <parameter id="16" />
    </function>
    <function id="56" name="CompressColourSpace" retID="15">
     <parameter id="14" />
    </function>
    <function id="57" name="ScaleHeadLightIntensity" retID="12">
     <parameter id="11" />
    </function>
    <function id="58" name="CalcVertexColour" retID="9">
     <parameter id="8" />
    </function>
    <function id="59" name="screen_position" retID="7">
     <parameter id="6" />
    </function>
    <function id="60" name="world_position" retID="4">
     <parameter id="3" />
    </function>
   </funcInfo>
   <funcEntryExitInfo>
   </funcEntryExitInfo>
   <VfetchInfo>
    <vfetch Address="3" Register="0" DestSwizzle="xyzw" Semantic="0x00" End="false" />
   </VfetchInfo>
   <InterpolatorInfo>
   </InterpolatorInfo>
   <LiteralFloats>
   </LiteralFloats>
   <LiteralInts>
   </LiteralInts>
   <LiteralBools>
   </LiteralBools>
  </shader>
  <shader entrypoint="PS_HighLOD" target="ps_3_0" FxlTechniqueName="RenderTSMMatrixPalette" FxlTechnique="1" FxlPassName="p0" FxlPass="0" ZPass="0" pdbHint="4e4a000d-08362a8e-aef0f5b7">
   <constanttable>
    <constant register="s0">
     <type name="DIFFUSE_SAMPLER" class="object" type="sampler2D" />
    </constant>
    <constant register="s2">
     <type name="ENVIROMAP_SAMPLER" class="object" type="samplerCUBE" />
    </constant>
    <constant register="s3">
     <type name="SHADOWMAP_SAMPLER" class="object" type="sampler2D" />
    </constant>
    <constant register="s1">
     <type name="VOLUMEMAP_SAMPLER" class="object" type="sampler3D" />
    </constant>
    <constant register="c213">
     <type name="cfShadowMapEnabled" class="scalar" type="float" />
    </constant>
    <constant register="c36">
     <type name="cmLocalColourMatrix" class="vector" type="float" columns="4" elements="4" />
    </constant>
    <constant register="c40">
     <type name="cmLocalDirectionMatrix" class="vector" type="float" columns="4" elements="4" />
    </constant>
    <constant register="c4" count="3">
     <type name="cmWorldMat" class="matrix_columns" type="float" rows="4" columns="4" />
    </constant>
    <constant register="c238">
     <type name="cvFlakes" class="vector" type="float" columns="4" />
    </constant>
    <constant register="c207">
     <type name="cvFogColour" class="vector" type="float" columns="4" />
    </constant>
    <constant register="c236">
     <type name="cvPowers" class="vector" type="float" columns="4" />
    </constant>
    <constant register="c145">
     <type name="cvShadowParams1" class="vector" type="float" columns="4" />
    </constant>
    <constant register="c232">
     <type name="cvSpecularMin" class="vector" type="float" columns="4" />
    </constant>
    <constant register="c233">
     <type name="cvSpecularRange" class="vector" type="float" columns="4" />
    </constant>
    <constant register="c239">
     <type name="cvVinylScales" class="vector" type="float" columns="4" />
    </constant>
   </constanttable>
   <sourcemap>
    <statement pc="9" file="8" line="785" scope="-1" lastinstruction="0" />
    <statement pc="10" file="8" line="785" scope="-1" lastinstruction="0" />
    <statement pc="11" file="8" line="782" scope="-1" lastinstruction="0" />
    <statement pc="12" file="8" line="726" scope="-1" lastinstruction="0" />
    <statement pc="13" file="8" line="781" scope="-1" lastinstruction="0" />
    <statement pc="14" file="8" line="726" scope="-1" lastinstruction="0" />
    <statement pc="15" file="8" line="781" scope="-1" lastinstruction="0" />
    <statement pc="16" file="8" line="782" scope="-1" lastinstruction="0" />
    <statement pc="17" file="8" line="735" scope="-1" lastinstruction="0" />
    <statement pc="18" file="8" line="734" scope="-1" lastinstruction="0" />
    <statement pc="19" file="8" line="736" scope="-1" lastinstruction="0" />
    <statement pc="20" file="8" line="736" scope="-1" lastinstruction="0" />
    <statement pc="21" file="8" line="736" scope="-1" lastinstruction="0" />
    <statement pc="22" file="8" line="742" scope="-1" lastinstruction="0" />
    <statement pc="23" file="8" line="742" scope="-1" lastinstruction="0" />
    <statement pc="24" file="8" line="742" scope="-1" lastinstruction="0" />
    <statement pc="25" file="8" line="742" scope="-1" lastinstruction="0" />
    <statement pc="27" file="8" line="791" scope="-1" lastinstruction="0" />
    <statement pc="28" file="8" line="789" scope="-1" lastinstruction="0" />
    <statement pc="29" file="4" line="146" scope="-1" lastinstruction="0" />
    <statement pc="30" file="8" line="794" scope="-1" lastinstruction="0" />
    <statement pc="31" file="4" line="146" scope="-1" lastinstruction="0" />
    <statement pc="32" file="8" line="791" scope="-1" lastinstruction="0" />
    <statement pc="33" file="8" line="791" scope="-1" lastinstruction="0" />
    <statement pc="34" file="8" line="792" scope="-1" lastinstruction="0" />
    <statement pc="35" file="8" line="792" scope="-1" lastinstruction="0" />
    <statement pc="36" file="8" line="792" scope="-1" lastinstruction="0" />
    <statement pc="37" file="8" line="811" scope="-1" lastinstruction="0" />
    <statement pc="38" file="8" line="811" scope="-1" lastinstruction="0" />
    <statement pc="39" file="8" line="811" scope="-1" lastinstruction="0" />
    <statement pc="40" file="8" line="811" scope="-1" lastinstruction="0" />
    <statement pc="41" file="4" line="162" scope="-1" lastinstruction="0" />
    <statement pc="42" file="4" line="162" scope="-1" lastinstruction="0" />
    <statement pc="43" file="4" line="162" scope="-1" lastinstruction="0" />
    <statement pc="44" file="4" line="162" scope="-1" lastinstruction="0" />
    <statement pc="45" file="4" line="162" scope="-1" lastinstruction="0" />
    <statement pc="46" file="4" line="162" scope="-1" lastinstruction="0" />
    <statement pc="47" file="4" line="162" scope="-1" lastinstruction="0" />
    <statement pc="48" file="4" line="162" scope="-1" lastinstruction="0" />
    <statement pc="49" file="4" line="162" scope="-1" lastinstruction="0" />
    <statement pc="50" file="8" line="811" scope="-1" lastinstruction="0" />
    <statement pc="4.1" file="8" line="811" scope="-1" lastinstruction="0" />
    <statement pc="51" file="8" line="802" scope="-1" lastinstruction="0" />
    <statement pc="52" file="8" line="803" scope="-1" lastinstruction="0" />
    <statement pc="53" file="4" line="215" scope="-1" lastinstruction="0" />
    <statement pc="54" file="8" line="806" scope="-1" lastinstruction="0" />
    <statement pc="55" file="8" line="806" scope="-1" lastinstruction="0" />
    <statement pc="56" file="8" line="789" scope="-1" lastinstruction="0" />
    <statement pc="57" file="4" line="215" scope="-1" lastinstruction="0" />
    <statement pc="58" file="4" line="197" scope="-1" lastinstruction="0" />
    <statement pc="59" file="4" line="197" scope="-1" lastinstruction="0" />
    <statement pc="60" file="8" line="822" scope="-1" lastinstruction="0" />
    <statement pc="61" file="4" line="196" scope="-1" lastinstruction="0" />
    <statement pc="62" file="4" line="200" scope="-1" lastinstruction="0" />
    <statement pc="63" file="4" line="200" scope="-1" lastinstruction="0" />
    <statement pc="64" file="4" line="200" scope="-1" lastinstruction="0" />
    <statement pc="65" file="4" line="200" scope="-1" lastinstruction="0" />
    <statement pc="66" file="8" line="806" scope="-1" lastinstruction="0" />
    <statement pc="67" file="4" line="200" scope="-1" lastinstruction="0" />
    <statement pc="68" file="4" line="199" scope="-1" lastinstruction="0" />
    <statement pc="69" file="8" line="824" scope="-1" lastinstruction="0" />
    <statement pc="70" file="8" line="824" scope="-1" lastinstruction="0" />
    <statement pc="71" file="4" line="216" scope="-1" lastinstruction="0" />
    <statement pc="72" file="8" line="806" scope="-1" lastinstruction="0" />
    <statement pc="73" file="4" line="201" scope="-1" lastinstruction="0" />
    <statement pc="74" file="8" line="825" scope="-1" lastinstruction="0" />
    <statement pc="75" file="8" line="807" scope="-1" lastinstruction="0" />
    <statement pc="76" file="8" line="825" scope="-1" lastinstruction="0" />
    <statement pc="77" file="1" line="59" scope="-1" lastinstruction="0" />
    <statement pc="78" file="8" line="813" scope="-1" lastinstruction="0" />
    <statement pc="79" file="8" line="835" scope="-1" lastinstruction="0" />
    <statement pc="80" file="8" line="813" scope="-1" lastinstruction="0" />
    <statement pc="81" file="8" line="837" scope="-1" lastinstruction="0" />
    <statement pc="82" file="8" line="835" scope="-1" lastinstruction="0" />
    <statement pc="83" file="8" line="835" scope="-1" lastinstruction="0" />
    <statement pc="84" file="8" line="835" scope="-1" lastinstruction="0" />
    <statement pc="85" file="7" line="56" scope="-1" lastinstruction="0" />
    <statement pc="86" file="1" line="54" scope="-1" lastinstruction="0" />
    <statement pc="87" file="1" line="54" scope="-1" lastinstruction="0" />
    <statement pc="88" file="1" line="54" scope="-1" lastinstruction="0" />
    <statement pc="89" file="1" line="54" scope="-1" lastinstruction="0" />
    <statement pc="90" file="1" line="54" scope="-1" lastinstruction="0" />
    <statement pc="91" file="0" line="66" scope="-1" lastinstruction="0" />
   </sourcemap>
   <variables>
   </variables>
   <variableDebugInfo>
   </variableDebugInfo>
   <scopes>
   </scopes>
   <funcInfo>
    <function id="0" name="PixelShaderTSMAlpha" retID="519">
     <parameter id="518" />
    </function>
    <function id="1" name="PixelShaderTSM" retID="516">
     <parameter id="515" />
    </function>
    <function id="2" name="VertexShaderTSMAlpha" retID="512">
     <parameter id="511" />
    </function>
    <function id="3" name="VertexShaderTSM" retID="507">
     <parameter id="505" />
     <parameter id="506" />
    </function>
    <function id="4" name="PixelShaderLiSPSMAlpha" retID="499">
     <parameter id="498" />
    </function>
    <function id="5" name="PixelShaderLiSPSM" retID="496">
     <parameter id="495" />
    </function>
    <function id="6" name="VertexShaderLiSPSMAlpha" retID="492">
     <parameter id="491" />
    </function>
    <function id="7" name="VertexShaderLiSPSM" retID="486">
     <parameter id="484" />
     <parameter id="485" />
    </function>
    <function id="8" name="CalcShadowBias" retID="479">
     <parameter id="478" />
    </function>
    <function id="9" name="PixelShaderVertexColour" retID="476">
     <parameter id="475" />
    </function>
    <function id="10" name="VertexShaderVertexColour" retID="473">
     <parameter id="471" />
     <parameter id="472" />
    </function>
    <function id="11" name="ZPassVertexShader" retID="465">
     <parameter id="464" />
    </function>
    <function id="12" name="PS_LowLOD" retID="459">
     <parameter id="458" />
    </function>
    <function id="13" name="PS_HighLOD" retID="457">
     <parameter id="456" />
    </function>
    <function id="14" name="PS_CarHighLOD_PS3" retID="433">
     <parameter id="431" />
     <parameter id="432" />
     <parameter id="0" />
    </function>
    <function id="15" name="PS_CarLowLOD_PS3" retID="420">
     <parameter id="419" />
    </function>
    <function id="16" name="PS_CarLowLOD_360" retID="408">
     <parameter id="407" />
    </function>
    <function id="17" name="PS_CarHighLOD" retID="387">
     <parameter id="385" />
     <parameter id="386" />
     <parameter id="0" />
    </function>
    <function id="18" name="GetNoiseNormal" retID="382">
     <parameter id="380" />
     <parameter id="381" />
    </function>
    <function id="19" name="VS_CarNormalMapHighLOD_PC" retID="369">
     <parameter id="366" />
     <parameter id="367" />
     <parameter id="368" />
    </function>
    <function id="20" name="VS_CarNormalMapLowLOD" retID="355">
     <parameter id="352" />
     <parameter id="353" />
     <parameter id="354" />
    </function>
    <function id="21" name="VS_CarNormalMapHighLOD" retID="341">
     <parameter id="338" />
     <parameter id="339" />
     <parameter id="340" />
    </function>
    <function id="22" name="VS_CarLowLOD_PS3" retID="326">
     <parameter id="324" />
     <parameter id="325" />
    </function>
    <function id="23" name="VS_CarLowLOD" retID="312">
     <parameter id="310" />
     <parameter id="311" />
    </function>
    <function id="24" name="VS_CarLowLOD_PS3" retID="297">
     <parameter id="294" />
     <parameter id="295" />
     <parameter id="296" />
    </function>
    <function id="25" name="VS_CarLowLOD_360" retID="281">
     <parameter id="278" />
     <parameter id="279" />
     <parameter id="280" />
    </function>
    <function id="26" name="VS_CarHighLOD_PS3" retID="265">
     <parameter id="262" />
     <parameter id="263" />
     <parameter id="264" />
    </function>
    <function id="27" name="VS_CarHighLOD" retID="249">
     <parameter id="246" />
     <parameter id="247" />
     <parameter id="248" />
    </function>
    <function id="28" name="CalculateShaperRigDiffuse" retID="230">
     <parameter id="226" />
     <parameter id="227" />
     <parameter id="228" />
     <parameter id="229" />
     <parameter id="0" />
    </function>
    <function id="29" name="ReadPositionNormalTangent" retID="224">
     <parameter id="218" />
     <parameter id="219" />
     <parameter id="220" />
     <parameter id="221" />
     <parameter id="222" />
     <parameter id="223" />
    </function>
    <function id="30" name="GetLocalBinormal" retID="214">
     <parameter id="213" />
    </function>
    <function id="31" name="GetLocalTangent" retID="211">
     <parameter id="209" />
     <parameter id="210" />
    </function>
    <function id="32" name="GetLocalTangent" retID="207">
     <parameter id="206" />
    </function>
    <function id="33" name="GetLocalNormal" retID="205">
     <parameter id="203" />
     <parameter id="204" />
    </function>
    <function id="34" name="GetLocalNormal" retID="202">
     <parameter id="201" />
    </function>
    <function id="35" name="GetLocalPosition" retID="200">
     <parameter id="198" />
     <parameter id="199" />
    </function>
    <function id="36" name="GetLocalPosition" retID="197">
     <parameter id="196" />
    </function>
    <function id="37" name="GetPixelDamage" retID="195">
     <parameter id="194" />
    </function>
    <function id="38" name="GetMatrix" retID="192">
     <parameter id="189" />
     <parameter id="190" />
     <parameter id="191" />
    </function>
    <function id="39" name="CalcPostProcessFog" retID="151">
     <parameter id="149" />
     <parameter id="150" />
    </function>
    <function id="40" name="CalcFogColour" retID="148">
     <parameter id="146" />
     <parameter id="147" />
    </function>
    <function id="41" name="CalcVertexFog" retID="139">
     <parameter id="138" />
    </function>
    <function id="42" name="DoShadowCar" retID="134">
     <parameter id="131" />
     <parameter id="132" />
     <parameter id="133" />
     <parameter id="0" />
    </function>
    <function id="43" name="DoShadowOptimized" retID="126">
     <parameter id="122" />
     <parameter id="123" />
     <parameter id="124" />
     <parameter id="125" />
     <parameter id="0" />
    </function>
    <function id="44" name="DoShadow" retID="115">
     <parameter id="112" />
     <parameter id="113" />
     <parameter id="114" />
     <parameter id="0" />
    </function>
    <function id="45" name="DoShadowPCFDepth" retID="106">
     <parameter id="102" />
     <parameter id="103" />
     <parameter id="104" />
     <parameter id="105" />
    </function>
    <function id="46" name="Tex2DOffset" retID="98">
     <parameter id="95" />
     <parameter id="96" />
     <parameter id="97" />
    </function>
    <function id="47" name="GetShadowMapTexCoord" retID="93">
     <parameter id="92" />
    </function>
    <function id="48" name="VertexShadowPosView" retID="91">
     <parameter id="90" />
    </function>
    <function id="49" name="VertexShadowTexOptimized" retID="87">
     <parameter id="84" />
     <parameter id="85" />
     <parameter id="86" />
    </function>
    <function id="50" name="VertexShadowTex" retID="83">
     <parameter id="82" />
    </function>
    <function id="51" name="GetCombinedBrightness" retID="33">
     <parameter id="32" />
    </function>
    <function id="52" name="GetAdaptedLuminanceFromSampler" retID="30">
     <parameter id="29" />
    </function>
    <function id="53" name="DecodeRGBE8" retID="24">
     <parameter id="23" />
    </function>
    <function id="54" name="EncodeRGBE8" retID="19">
     <parameter id="18" />
    </function>
    <function id="55" name="DeCompressColourSpace" retID="17">
     <parameter id="16" />
    </function>
    <function id="56" name="CompressColourSpace" retID="15">
     <parameter id="14" />
    </function>
    <function id="57" name="ScaleHeadLightIntensity" retID="12">
     <parameter id="11" />
    </function>
    <function id="58" name="CalcVertexColour" retID="9">
     <parameter id="8" />
    </function>
    <function id="59" name="screen_position" retID="7">
     <parameter id="6" />
    </function>
    <function id="60" name="world_position" retID="4">
     <parameter id="3" />
    </function>
   </funcInfo>
   <funcEntryExitInfo>
   </funcEntryExitInfo>
   <VfetchInfo>
   </VfetchInfo>
   <InterpolatorInfo>
    <Interpolator Register="0" Semantic="0xa0" Mask="xyzw" />
    <Interpolator Register="1" Semantic="0xa1" Mask="xyzw" />
    <Interpolator Register="2" Semantic="0x50" Mask="xyzw" />
    <Interpolator Register="3" Semantic="0x51" Mask="xyzw" />
    <Interpolator Register="4" Semantic="0x52" Mask="xyzw" />
    <Interpolator Register="5" Semantic="0x54" Mask="xyzw" />
    <Interpolator Register="6" Semantic="0x55" Mask="xyzw" />
    <Interpolator Register="7" Semantic="0xb0" Mask="x" />
   </InterpolatorInfo>
   <LiteralFloats>
    <Float Register="252" value0="0" value1="0" value2="0" value3="0" />
    <Float Register="253" value0="3.0999999" value1="0.333" value2="0" value3="0" />
    <Float Register="254" value0="0.5" value1="0.11111111" value2="1" value3="10" />
    <Float Register="255" value0="1.5" value1="-0.1" value2="0.1" value3="0.001" />
   </LiteralFloats>
   <LiteralInts>
   </LiteralInts>
   <LiteralBools>
   </LiteralBools>
  </shader>
  <shader entrypoint="VS_CarHighLOD" target="vs_3_0" FxlTechniqueName="RenderTSMMatrixPalette" FxlTechnique="1" FxlPassName="p0" FxlPass="0" ZPass="0" pdbHint="4e4a000e-08362a8e-aef0f5b7">
   <constanttable>
    <constant register="c52" count="64">
     <type name="camBlendMatrices" class="matrix_columns" type="float" rows="4" columns="4" elements="16" />
    </constant>
    <constant register="c240">
     <type name="cfFogEnable" class="scalar" type="float" />
    </constant>
    <constant register="c36" count="3">
     <type name="cmLocalColourMatrix" class="vector" type="float" columns="4" elements="4" />
    </constant>
    <constant register="c40" count="3">
     <type name="cmLocalDirectionMatrix" class="vector" type="float" columns="4" elements="4" />
    </constant>
    <constant register="c16" count="4">
     <type name="cmShadowMapWVP" class="matrix_columns" type="float" rows="4" columns="4" />
    </constant>
    <constant register="c24" count="4">
     <type name="cmWorldViewProj" class="matrix_columns" type="float" rows="4" columns="4" />
    </constant>
    <constant register="c237">
     <type name="cvClampAndScales" class="vector" type="float" columns="4" />
    </constant>
    <constant register="c228">
     <type name="cvDiffuseMin" class="vector" type="float" columns="4" />
    </constant>
    <constant register="c229">
     <type name="cvDiffuseRange" class="vector" type="float" columns="4" />
    </constant>
    <constant register="c230">
     <type name="cvEnvmapMin" class="vector" type="float" columns="4" />
    </constant>
    <constant register="c231">
     <type name="cvEnvmapRange" class="vector" type="float" columns="4" />
    </constant>
    <constant register="c238">
     <type name="cvFlakes" class="vector" type="float" columns="4" />
    </constant>
    <constant register="c206">
     <type name="cvFogValue" class="vector" type="float" columns="4" />
    </constant>
    <constant register="c32">
     <type name="cvLocalEyePos" class="vector" type="float" columns="3" />
    </constant>
    <constant register="c236">
     <type name="cvPowers" class="vector" type="float" columns="4" />
    </constant>
    <constant register="c137">
     <type name="cvScreenOffset" class="vector" type="float" columns="4" />
    </constant>
    <constant register="c161">
     <type name="cvTextureOffset" class="vector" type="float" columns="4" />
    </constant>
   </constanttable>
   <sourcemap>
    <statement pc="7" file="8" line="92" scope="-1" lastinstruction="0" />
    <statement pc="8" file="8" line="92" scope="-1" lastinstruction="0" />
    <statement pc="9" file="8" line="92" scope="-1" lastinstruction="0" />
    <statement pc="10" file="8" line="92" scope="-1" lastinstruction="0" />
    <statement pc="0.1" file="8" line="92" scope="-1" lastinstruction="0" />
    <statement pc="11" file="6" line="83" scope="-1" lastinstruction="0" />
    <statement pc="12" file="6" line="83" scope="-1" lastinstruction="0" />
    <statement pc="13" file="6" line="85" scope="-1" lastinstruction="0" />
    <statement pc="14" file="7" line="30" scope="-1" lastinstruction="0" />
    <statement pc="15" file="6" line="107" scope="-1" lastinstruction="0" />
    <statement pc="16" file="6" line="107" scope="-1" lastinstruction="0" />
    <statement pc="17" file="6" line="107" scope="-1" lastinstruction="0" />
    <statement pc="18" file="6" line="107" scope="-1" lastinstruction="0" />
    <statement pc="19" file="7" line="29" scope="-1" lastinstruction="0" />
    <statement pc="20" file="1" line="20" scope="-1" lastinstruction="0" />
    <statement pc="21" file="1" line="21" scope="-1" lastinstruction="0" />
    <statement pc="22" file="1" line="21" scope="-1" lastinstruction="0" />
    <statement pc="23" file="1" line="21" scope="-1" lastinstruction="0" />
    <statement pc="24" file="1" line="21" scope="-1" lastinstruction="0" />
    <statement pc="2.1" file="1" line="21" scope="-1" lastinstruction="0" />
    <statement pc="25" file="6" line="85" scope="-1" lastinstruction="0" />
    <statement pc="26" file="6" line="117" scope="-1" lastinstruction="0" />
    <statement pc="27" file="6" line="117" scope="-1" lastinstruction="0" />
    <statement pc="28" file="6" line="117" scope="-1" lastinstruction="0" />
    <statement pc="29" file="6" line="194" scope="-1" lastinstruction="0" />
    <statement pc="30" file="6" line="177" scope="-1" lastinstruction="0" />
    <statement pc="31" file="6" line="191" scope="-1" lastinstruction="0" />
    <statement pc="32" file="8" line="132" scope="-1" lastinstruction="0" />
    <statement pc="33" file="8" line="133" scope="-1" lastinstruction="0" />
    <statement pc="34" file="7" line="29" scope="-1" lastinstruction="0" />
    <statement pc="35" file="6" line="192" scope="-1" lastinstruction="0" />
    <statement pc="36" file="6" line="188" scope="-1" lastinstruction="0" />
    <statement pc="37" file="6" line="195" scope="-1" lastinstruction="0" />
    <statement pc="38" file="7" line="30" scope="-1" lastinstruction="0" />
    <statement pc="39" file="8" line="142" scope="-1" lastinstruction="0" />
    <statement pc="40" file="8" line="143" scope="-1" lastinstruction="0" />
    <statement pc="41" file="7" line="30" scope="-1" lastinstruction="0" />
    <statement pc="42" file="7" line="30" scope="-1" lastinstruction="0" />
    <statement pc="43" file="8" line="105" scope="-1" lastinstruction="0" />
    <statement pc="44" file="8" line="114" scope="-1" lastinstruction="0" />
    <statement pc="45" file="4" line="105" scope="-1" lastinstruction="0" />
    <statement pc="46" file="4" line="105" scope="-1" lastinstruction="0" />
    <statement pc="47" file="4" line="105" scope="-1" lastinstruction="0" />
    <statement pc="48" file="4" line="105" scope="-1" lastinstruction="0" />
    <statement pc="49" file="7" line="30" scope="-1" lastinstruction="0" />
    <statement pc="50" file="8" line="135" scope="-1" lastinstruction="0" />
    <statement pc="51" file="8" line="135" scope="-1" lastinstruction="0" />
    <statement pc="52" file="8" line="135" scope="-1" lastinstruction="0" />
    <statement pc="53" file="7" line="39" scope="-1" lastinstruction="0" />
    <statement pc="54" file="8" line="148" scope="-1" lastinstruction="0" />
    <statement pc="55" file="8" line="137" scope="-1" lastinstruction="0" />
    <statement pc="56" file="8" line="154" scope="-1" lastinstruction="0" />
    <statement pc="57" file="8" line="154" scope="-1" lastinstruction="0" />
    <statement pc="58" file="8" line="167" scope="-1" lastinstruction="0" />
    <statement pc="59" file="8" line="158" scope="-1" lastinstruction="0" />
    <statement pc="60" file="8" line="159" scope="-1" lastinstruction="0" />
    <statement pc="61" file="8" line="170" scope="-1" lastinstruction="0" />
    <statement pc="62" file="8" line="159" scope="-1" lastinstruction="0" />
    <statement pc="63" file="8" line="159" scope="-1" lastinstruction="0" />
    <statement pc="64" file="8" line="170" scope="-1" lastinstruction="0" />
    <statement pc="65" file="8" line="161" scope="-1" lastinstruction="0" />
    <statement pc="66" file="8" line="170" scope="-1" lastinstruction="0" />
    <statement pc="67" file="8" line="161" scope="-1" lastinstruction="0" />
    <statement pc="68" file="8" line="162" scope="-1" lastinstruction="0" />
    <statement pc="69" file="8" line="169" scope="-1" lastinstruction="0" />
   </sourcemap>
   <variables>
   </variables>
   <variableDebugInfo>
   </variableDebugInfo>
   <scopes>
   </scopes>
   <funcInfo>
    <function id="0" name="PixelShaderTSMAlpha" retID="519">
     <parameter id="518" />
    </function>
    <function id="1" name="PixelShaderTSM" retID="516">
     <parameter id="515" />
    </function>
    <function id="2" name="VertexShaderTSMAlpha" retID="512">
     <parameter id="511" />
    </function>
    <function id="3" name="VertexShaderTSM" retID="507">
     <parameter id="505" />
     <parameter id="506" />
    </function>
    <function id="4" name="PixelShaderLiSPSMAlpha" retID="499">
     <parameter id="498" />
    </function>
    <function id="5" name="PixelShaderLiSPSM" retID="496">
     <parameter id="495" />
    </function>
    <function id="6" name="VertexShaderLiSPSMAlpha" retID="492">
     <parameter id="491" />
    </function>
    <function id="7" name="VertexShaderLiSPSM" retID="486">
     <parameter id="484" />
     <parameter id="485" />
    </function>
    <function id="8" name="CalcShadowBias" retID="479">
     <parameter id="478" />
    </function>
    <function id="9" name="PixelShaderVertexColour" retID="476">
     <parameter id="475" />
    </function>
    <function id="10" name="VertexShaderVertexColour" retID="473">
     <parameter id="471" />
     <parameter id="472" />
    </function>
    <function id="11" name="ZPassVertexShader" retID="465">
     <parameter id="464" />
    </function>
    <function id="12" name="PS_LowLOD" retID="459">
     <parameter id="458" />
    </function>
    <function id="13" name="PS_HighLOD" retID="457">
     <parameter id="456" />
    </function>
    <function id="14" name="PS_CarHighLOD_PS3" retID="433">
     <parameter id="431" />
     <parameter id="432" />
     <parameter id="0" />
    </function>
    <function id="15" name="PS_CarLowLOD_PS3" retID="420">
     <parameter id="419" />
    </function>
    <function id="16" name="PS_CarLowLOD_360" retID="408">
     <parameter id="407" />
    </function>
    <function id="17" name="PS_CarHighLOD" retID="387">
     <parameter id="385" />
     <parameter id="386" />
     <parameter id="0" />
    </function>
    <function id="18" name="GetNoiseNormal" retID="382">
     <parameter id="380" />
     <parameter id="381" />
    </function>
    <function id="19" name="VS_CarNormalMapHighLOD_PC" retID="369">
     <parameter id="366" />
     <parameter id="367" />
     <parameter id="368" />
    </function>
    <function id="20" name="VS_CarNormalMapLowLOD" retID="355">
     <parameter id="352" />
     <parameter id="353" />
     <parameter id="354" />
    </function>
    <function id="21" name="VS_CarNormalMapHighLOD" retID="341">
     <parameter id="338" />
     <parameter id="339" />
     <parameter id="340" />
    </function>
    <function id="22" name="VS_CarLowLOD_PS3" retID="326">
     <parameter id="324" />
     <parameter id="325" />
    </function>
    <function id="23" name="VS_CarLowLOD" retID="312">
     <parameter id="310" />
     <parameter id="311" />
    </function>
    <function id="24" name="VS_CarLowLOD_PS3" retID="297">
     <parameter id="294" />
     <parameter id="295" />
     <parameter id="296" />
    </function>
    <function id="25" name="VS_CarLowLOD_360" retID="281">
     <parameter id="278" />
     <parameter id="279" />
     <parameter id="280" />
    </function>
    <function id="26" name="VS_CarHighLOD_PS3" retID="265">
     <parameter id="262" />
     <parameter id="263" />
     <parameter id="264" />
    </function>
    <function id="27" name="VS_CarHighLOD" retID="249">
     <parameter id="246" />
     <parameter id="247" />
     <parameter id="248" />
    </function>
    <function id="28" name="CalculateShaperRigDiffuse" retID="230">
     <parameter id="226" />
     <parameter id="227" />
     <parameter id="228" />
     <parameter id="229" />
     <parameter id="0" />
    </function>
    <function id="29" name="ReadPositionNormalTangent" retID="224">
     <parameter id="218" />
     <parameter id="219" />
     <parameter id="220" />
     <parameter id="221" />
     <parameter id="222" />
     <parameter id="223" />
    </function>
    <function id="30" name="GetLocalBinormal" retID="214">
     <parameter id="213" />
    </function>
    <function id="31" name="GetLocalTangent" retID="211">
     <parameter id="209" />
     <parameter id="210" />
    </function>
    <function id="32" name="GetLocalTangent" retID="207">
     <parameter id="206" />
    </function>
    <function id="33" name="GetLocalNormal" retID="205">
     <parameter id="203" />
     <parameter id="204" />
    </function>
    <function id="34" name="GetLocalNormal" retID="202">
     <parameter id="201" />
    </function>
    <function id="35" name="GetLocalPosition" retID="200">
     <parameter id="198" />
     <parameter id="199" />
    </function>
    <function id="36" name="GetLocalPosition" retID="197">
     <parameter id="196" />
    </function>
    <function id="37" name="GetPixelDamage" retID="195">
     <parameter id="194" />
    </function>
    <function id="38" name="GetMatrix" retID="192">
     <parameter id="189" />
     <parameter id="190" />
     <parameter id="191" />
    </function>
    <function id="39" name="CalcPostProcessFog" retID="151">
     <parameter id="149" />
     <parameter id="150" />
    </function>
    <function id="40" name="CalcFogColour" retID="148">
     <parameter id="146" />
     <parameter id="147" />
    </function>
    <function id="41" name="CalcVertexFog" retID="139">
     <parameter id="138" />
    </function>
    <function id="42" name="DoShadowCar" retID="134">
     <parameter id="131" />
     <parameter id="132" />
     <parameter id="133" />
     <parameter id="0" />
    </function>
    <function id="43" name="DoShadowOptimized" retID="126">
     <parameter id="122" />
     <parameter id="123" />
     <parameter id="124" />
     <parameter id="125" />
     <parameter id="0" />
    </function>
    <function id="44" name="DoShadow" retID="115">
     <parameter id="112" />
     <parameter id="113" />
     <parameter id="114" />
     <parameter id="0" />
    </function>
    <function id="45" name="DoShadowPCFDepth" retID="106">
     <parameter id="102" />
     <parameter id="103" />
     <parameter id="104" />
     <parameter id="105" />
    </function>
    <function id="46" name="Tex2DOffset" retID="98">
     <parameter id="95" />
     <parameter id="96" />
     <parameter id="97" />
    </function>
    <function id="47" name="GetShadowMapTexCoord" retID="93">
     <parameter id="92" />
    </function>
    <function id="48" name="VertexShadowPosView" retID="91">
     <parameter id="90" />
    </function>
    <function id="49" name="VertexShadowTexOptimized" retID="87">
     <parameter id="84" />
     <parameter id="85" />
     <parameter id="86" />
    </function>
    <function id="50" name="VertexShadowTex" retID="83">
     <parameter id="82" />
    </function>
    <function id="51" name="GetCombinedBrightness" retID="33">
     <parameter id="32" />
    </function>
    <function id="52" name="GetAdaptedLuminanceFromSampler" retID="30">
     <parameter id="29" />
    </function>
    <function id="53" name="DecodeRGBE8" retID="24">
     <parameter id="23" />
    </function>
    <function id="54" name="EncodeRGBE8" retID="19">
     <parameter id="18" />
    </function>
    <function id="55" name="DeCompressColourSpace" retID="17">
     <parameter id="16" />
    </function>
    <function id="56" name="CompressColourSpace" retID="15">
     <parameter id="14" />
    </function>
    <function id="57" name="ScaleHeadLightIntensity" retID="12">
     <parameter id="11" />
    </function>
    <function id="58" name="CalcVertexColour" retID="9">
     <parameter id="8" />
    </function>
    <function id="59" name="screen_position" retID="7">
     <parameter id="6" />
    </function>
    <function id="60" name="world_position" retID="4">
     <parameter id="3" />
    </function>
   </funcInfo>
   <funcEntryExitInfo>
   </funcEntryExitInfo>
   <VfetchInfo>
    <vfetch Address="7" Register="3" DestSwizzle="xyz1" Semantic="0x00" End="false" />
    <vfetch Address="8" Register="2" DestSwizzle="xyz_" Semantic="0x30" End="false" />
    <vfetch Address="9" Register="1" DestSwizzle="z__x" Semantic="0xa0" End="false" />
    <vfetch Address="10" Register="0" DestSwizzle="_xy_" Semantic="0x50" End="true" />
   </VfetchInfo>
   <InterpolatorInfo>
    <Interpolator Register="0" Semantic="0xa0" Mask="xyzw" />
    <Interpolator Register="1" Semantic="0xa1" Mask="xyzw" />
    <Interpolator Register="2" Semantic="0x50" Mask="xyzw" />
    <Interpolator Register="3" Semantic="0x51" Mask="xyzw" />
    <Interpolator Register="4" Semantic="0x52" Mask="xyzw" />
    <Interpolator Register="5" Semantic="0x54" Mask="xyzw" />
    <Interpolator Register="6" Semantic="0x55" Mask="xyzw" />
    <Interpolator Register="7" Semantic="0xb0" Mask="x" />
   </InterpolatorInfo>
   <LiteralFloats>
    <Float Register="252" value0="8.3299999" value1="1.2" value2="0" value3="0" />
    <Float Register="253" value0="0.10000002" value1="1" value2="0.25" value3="0.039999999" />
    <Float Register="254" value0="9.9999997e-005" value1="-0.60000002" value2="-0.25" value3="4" />
    <Float Register="255" value0="0.072099999" value1="0.21250001" value2="0.71539998" value3="15.1" />
   </LiteralFloats>
   <LiteralInts>
   </LiteralInts>
   <LiteralBools>
   </LiteralBools>
  </shader>
  <shader entrypoint="PS_HighLOD" target="ps_3_0" FxlTechniqueName="RenderTSMAlphaTex" FxlTechnique="0" FxlPassName="p0" FxlPass="0" ZPass="0" pdbHint="4e4a000f-08362a8e-aef0f5b7">
   <constanttable>
    <constant register="s0">
     <type name="DIFFUSE_SAMPLER" class="object" type="sampler2D" />
    </constant>
    <constant register="s2">
     <type name="ENVIROMAP_SAMPLER" class="object" type="samplerCUBE" />
    </constant>
    <constant register="s3">
     <type name="SHADOWMAP_SAMPLER" class="object" type="sampler2D" />
    </constant>
    <constant register="s1">
     <type name="VOLUMEMAP_SAMPLER" class="object" type="sampler3D" />
    </constant>
    <constant register="c213">
     <type name="cfShadowMapEnabled" class="scalar" type="float" />
    </constant>
    <constant register="c36">
     <type name="cmLocalColourMatrix" class="vector" type="float" columns="4" elements="4" />
    </constant>
    <constant register="c40">
     <type name="cmLocalDirectionMatrix" class="vector" type="float" columns="4" elements="4" />
    </constant>
    <constant register="c4" count="3">
     <type name="cmWorldMat" class="matrix_columns" type="float" rows="4" columns="4" />
    </constant>
    <constant register="c238">
     <type name="cvFlakes" class="vector" type="float" columns="4" />
    </constant>
    <constant register="c207">
     <type name="cvFogColour" class="vector" type="float" columns="4" />
    </constant>
    <constant register="c236">
     <type name="cvPowers" class="vector" type="float" columns="4" />
    </constant>
    <constant register="c145">
     <type name="cvShadowParams1" class="vector" type="float" columns="4" />
    </constant>
    <constant register="c232">
     <type name="cvSpecularMin" class="vector" type="float" columns="4" />
    </constant>
    <constant register="c233">
     <type name="cvSpecularRange" class="vector" type="float" columns="4" />
    </constant>
    <constant register="c239">
     <type name="cvVinylScales" class="vector" type="float" columns="4" />
    </constant>
   </constanttable>
   <sourcemap>
    <statement pc="9" file="8" line="785" scope="-1" lastinstruction="0" />
    <statement pc="10" file="8" line="785" scope="-1" lastinstruction="0" />
    <statement pc="11" file="8" line="782" scope="-1" lastinstruction="0" />
    <statement pc="12" file="8" line="726" scope="-1" lastinstruction="0" />
    <statement pc="13" file="8" line="781" scope="-1" lastinstruction="0" />
    <statement pc="14" file="8" line="726" scope="-1" lastinstruction="0" />
    <statement pc="15" file="8" line="781" scope="-1" lastinstruction="0" />
    <statement pc="16" file="8" line="782" scope="-1" lastinstruction="0" />
    <statement pc="17" file="8" line="735" scope="-1" lastinstruction="0" />
    <statement pc="18" file="8" line="734" scope="-1" lastinstruction="0" />
    <statement pc="19" file="8" line="736" scope="-1" lastinstruction="0" />
    <statement pc="20" file="8" line="736" scope="-1" lastinstruction="0" />
    <statement pc="21" file="8" line="736" scope="-1" lastinstruction="0" />
    <statement pc="22" file="8" line="742" scope="-1" lastinstruction="0" />
    <statement pc="23" file="8" line="742" scope="-1" lastinstruction="0" />
    <statement pc="24" file="8" line="742" scope="-1" lastinstruction="0" />
    <statement pc="25" file="8" line="742" scope="-1" lastinstruction="0" />
    <statement pc="27" file="8" line="791" scope="-1" lastinstruction="0" />
    <statement pc="28" file="8" line="789" scope="-1" lastinstruction="0" />
    <statement pc="29" file="4" line="146" scope="-1" lastinstruction="0" />
    <statement pc="30" file="8" line="794" scope="-1" lastinstruction="0" />
    <statement pc="31" file="4" line="146" scope="-1" lastinstruction="0" />
    <statement pc="32" file="8" line="791" scope="-1" lastinstruction="0" />
    <statement pc="33" file="8" line="791" scope="-1" lastinstruction="0" />
    <statement pc="34" file="8" line="792" scope="-1" lastinstruction="0" />
    <statement pc="35" file="8" line="792" scope="-1" lastinstruction="0" />
    <statement pc="36" file="8" line="792" scope="-1" lastinstruction="0" />
    <statement pc="37" file="8" line="811" scope="-1" lastinstruction="0" />
    <statement pc="38" file="8" line="811" scope="-1" lastinstruction="0" />
    <statement pc="39" file="8" line="811" scope="-1" lastinstruction="0" />
    <statement pc="40" file="8" line="811" scope="-1" lastinstruction="0" />
    <statement pc="41" file="4" line="162" scope="-1" lastinstruction="0" />
    <statement pc="42" file="4" line="162" scope="-1" lastinstruction="0" />
    <statement pc="43" file="4" line="162" scope="-1" lastinstruction="0" />
    <statement pc="44" file="4" line="162" scope="-1" lastinstruction="0" />
    <statement pc="45" file="4" line="162" scope="-1" lastinstruction="0" />
    <statement pc="46" file="4" line="162" scope="-1" lastinstruction="0" />
    <statement pc="47" file="4" line="162" scope="-1" lastinstruction="0" />
    <statement pc="48" file="4" line="162" scope="-1" lastinstruction="0" />
    <statement pc="49" file="4" line="162" scope="-1" lastinstruction="0" />
    <statement pc="50" file="8" line="811" scope="-1" lastinstruction="0" />
    <statement pc="4.1" file="8" line="811" scope="-1" lastinstruction="0" />
    <statement pc="51" file="8" line="802" scope="-1" lastinstruction="0" />
    <statement pc="52" file="8" line="803" scope="-1" lastinstruction="0" />
    <statement pc="53" file="4" line="215" scope="-1" lastinstruction="0" />
    <statement pc="54" file="8" line="806" scope="-1" lastinstruction="0" />
    <statement pc="55" file="8" line="806" scope="-1" lastinstruction="0" />
    <statement pc="56" file="8" line="789" scope="-1" lastinstruction="0" />
    <statement pc="57" file="4" line="215" scope="-1" lastinstruction="0" />
    <statement pc="58" file="4" line="197" scope="-1" lastinstruction="0" />
    <statement pc="59" file="4" line="197" scope="-1" lastinstruction="0" />
    <statement pc="60" file="8" line="822" scope="-1" lastinstruction="0" />
    <statement pc="61" file="4" line="196" scope="-1" lastinstruction="0" />
    <statement pc="62" file="4" line="200" scope="-1" lastinstruction="0" />
    <statement pc="63" file="4" line="200" scope="-1" lastinstruction="0" />
    <statement pc="64" file="4" line="200" scope="-1" lastinstruction="0" />
    <statement pc="65" file="4" line="200" scope="-1" lastinstruction="0" />
    <statement pc="66" file="8" line="806" scope="-1" lastinstruction="0" />
    <statement pc="67" file="4" line="200" scope="-1" lastinstruction="0" />
    <statement pc="68" file="4" line="199" scope="-1" lastinstruction="0" />
    <statement pc="69" file="8" line="824" scope="-1" lastinstruction="0" />
    <statement pc="70" file="8" line="824" scope="-1" lastinstruction="0" />
    <statement pc="71" file="4" line="216" scope="-1" lastinstruction="0" />
    <statement pc="72" file="8" line="806" scope="-1" lastinstruction="0" />
    <statement pc="73" file="4" line="201" scope="-1" lastinstruction="0" />
    <statement pc="74" file="8" line="825" scope="-1" lastinstruction="0" />
    <statement pc="75" file="8" line="807" scope="-1" lastinstruction="0" />
    <statement pc="76" file="8" line="825" scope="-1" lastinstruction="0" />
    <statement pc="77" file="1" line="59" scope="-1" lastinstruction="0" />
    <statement pc="78" file="8" line="813" scope="-1" lastinstruction="0" />
    <statement pc="79" file="8" line="835" scope="-1" lastinstruction="0" />
    <statement pc="80" file="8" line="813" scope="-1" lastinstruction="0" />
    <statement pc="81" file="8" line="837" scope="-1" lastinstruction="0" />
    <statement pc="82" file="8" line="835" scope="-1" lastinstruction="0" />
    <statement pc="83" file="8" line="835" scope="-1" lastinstruction="0" />
    <statement pc="84" file="8" line="835" scope="-1" lastinstruction="0" />
    <statement pc="85" file="7" line="56" scope="-1" lastinstruction="0" />
    <statement pc="86" file="1" line="54" scope="-1" lastinstruction="0" />
    <statement pc="87" file="1" line="54" scope="-1" lastinstruction="0" />
    <statement pc="88" file="1" line="54" scope="-1" lastinstruction="0" />
    <statement pc="89" file="1" line="54" scope="-1" lastinstruction="0" />
    <statement pc="90" file="1" line="54" scope="-1" lastinstruction="0" />
    <statement pc="91" file="0" line="66" scope="-1" lastinstruction="0" />
   </sourcemap>
   <variables>
   </variables>
   <variableDebugInfo>
   </variableDebugInfo>
   <scopes>
   </scopes>
   <funcInfo>
    <function id="0" name="PixelShaderTSMAlpha" retID="519">
     <parameter id="518" />
    </function>
    <function id="1" name="PixelShaderTSM" retID="516">
     <parameter id="515" />
    </function>
    <function id="2" name="VertexShaderTSMAlpha" retID="512">
     <parameter id="511" />
    </function>
    <function id="3" name="VertexShaderTSM" retID="507">
     <parameter id="505" />
     <parameter id="506" />
    </function>
    <function id="4" name="PixelShaderLiSPSMAlpha" retID="499">
     <parameter id="498" />
    </function>
    <function id="5" name="PixelShaderLiSPSM" retID="496">
     <parameter id="495" />
    </function>
    <function id="6" name="VertexShaderLiSPSMAlpha" retID="492">
     <parameter id="491" />
    </function>
    <function id="7" name="VertexShaderLiSPSM" retID="486">
     <parameter id="484" />
     <parameter id="485" />
    </function>
    <function id="8" name="CalcShadowBias" retID="479">
     <parameter id="478" />
    </function>
    <function id="9" name="PixelShaderVertexColour" retID="476">
     <parameter id="475" />
    </function>
    <function id="10" name="VertexShaderVertexColour" retID="473">
     <parameter id="471" />
     <parameter id="472" />
    </function>
    <function id="11" name="ZPassVertexShader" retID="465">
     <parameter id="464" />
    </function>
    <function id="12" name="PS_LowLOD" retID="459">
     <parameter id="458" />
    </function>
    <function id="13" name="PS_HighLOD" retID="457">
     <parameter id="456" />
    </function>
    <function id="14" name="PS_CarHighLOD_PS3" retID="433">
     <parameter id="431" />
     <parameter id="432" />
     <parameter id="0" />
    </function>
    <function id="15" name="PS_CarLowLOD_PS3" retID="420">
     <parameter id="419" />
    </function>
    <function id="16" name="PS_CarLowLOD_360" retID="408">
     <parameter id="407" />
    </function>
    <function id="17" name="PS_CarHighLOD" retID="387">
     <parameter id="385" />
     <parameter id="386" />
     <parameter id="0" />
    </function>
    <function id="18" name="GetNoiseNormal" retID="382">
     <parameter id="380" />
     <parameter id="381" />
    </function>
    <function id="19" name="VS_CarNormalMapHighLOD_PC" retID="369">
     <parameter id="366" />
     <parameter id="367" />
     <parameter id="368" />
    </function>
    <function id="20" name="VS_CarNormalMapLowLOD" retID="355">
     <parameter id="352" />
     <parameter id="353" />
     <parameter id="354" />
    </function>
    <function id="21" name="VS_CarNormalMapHighLOD" retID="341">
     <parameter id="338" />
     <parameter id="339" />
     <parameter id="340" />
    </function>
    <function id="22" name="VS_CarLowLOD_PS3" retID="326">
     <parameter id="324" />
     <parameter id="325" />
    </function>
    <function id="23" name="VS_CarLowLOD" retID="312">
     <parameter id="310" />
     <parameter id="311" />
    </function>
    <function id="24" name="VS_CarLowLOD_PS3" retID="297">
     <parameter id="294" />
     <parameter id="295" />
     <parameter id="296" />
    </function>
    <function id="25" name="VS_CarLowLOD_360" retID="281">
     <parameter id="278" />
     <parameter id="279" />
     <parameter id="280" />
    </function>
    <function id="26" name="VS_CarHighLOD_PS3" retID="265">
     <parameter id="262" />
     <parameter id="263" />
     <parameter id="264" />
    </function>
    <function id="27" name="VS_CarHighLOD" retID="249">
     <parameter id="246" />
     <parameter id="247" />
     <parameter id="248" />
    </function>
    <function id="28" name="CalculateShaperRigDiffuse" retID="230">
     <parameter id="226" />
     <parameter id="227" />
     <parameter id="228" />
     <parameter id="229" />
     <parameter id="0" />
    </function>
    <function id="29" name="ReadPositionNormalTangent" retID="224">
     <parameter id="218" />
     <parameter id="219" />
     <parameter id="220" />
     <parameter id="221" />
     <parameter id="222" />
     <parameter id="223" />
    </function>
    <function id="30" name="GetLocalBinormal" retID="214">
     <parameter id="213" />
    </function>
    <function id="31" name="GetLocalTangent" retID="211">
     <parameter id="209" />
     <parameter id="210" />
    </function>
    <function id="32" name="GetLocalTangent" retID="207">
     <parameter id="206" />
    </function>
    <function id="33" name="GetLocalNormal" retID="205">
     <parameter id="203" />
     <parameter id="204" />
    </function>
    <function id="34" name="GetLocalNormal" retID="202">
     <parameter id="201" />
    </function>
    <function id="35" name="GetLocalPosition" retID="200">
     <parameter id="198" />
     <parameter id="199" />
    </function>
    <function id="36" name="GetLocalPosition" retID="197">
     <parameter id="196" />
    </function>
    <function id="37" name="GetPixelDamage" retID="195">
     <parameter id="194" />
    </function>
    <function id="38" name="GetMatrix" retID="192">
     <parameter id="189" />
     <parameter id="190" />
     <parameter id="191" />
    </function>
    <function id="39" name="CalcPostProcessFog" retID="151">
     <parameter id="149" />
     <parameter id="150" />
    </function>
    <function id="40" name="CalcFogColour" retID="148">
     <parameter id="146" />
     <parameter id="147" />
    </function>
    <function id="41" name="CalcVertexFog" retID="139">
     <parameter id="138" />
    </function>
    <function id="42" name="DoShadowCar" retID="134">
     <parameter id="131" />
     <parameter id="132" />
     <parameter id="133" />
     <parameter id="0" />
    </function>
    <function id="43" name="DoShadowOptimized" retID="126">
     <parameter id="122" />
     <parameter id="123" />
     <parameter id="124" />
     <parameter id="125" />
     <parameter id="0" />
    </function>
    <function id="44" name="DoShadow" retID="115">
     <parameter id="112" />
     <parameter id="113" />
     <parameter id="114" />
     <parameter id="0" />
    </function>
    <function id="45" name="DoShadowPCFDepth" retID="106">
     <parameter id="102" />
     <parameter id="103" />
     <parameter id="104" />
     <parameter id="105" />
    </function>
    <function id="46" name="Tex2DOffset" retID="98">
     <parameter id="95" />
     <parameter id="96" />
     <parameter id="97" />
    </function>
    <function id="47" name="GetShadowMapTexCoord" retID="93">
     <parameter id="92" />
    </function>
    <function id="48" name="VertexShadowPosView" retID="91">
     <parameter id="90" />
    </function>
    <function id="49" name="VertexShadowTexOptimized" retID="87">
     <parameter id="84" />
     <parameter id="85" />
     <parameter id="86" />
    </function>
    <function id="50" name="VertexShadowTex" retID="83">
     <parameter id="82" />
    </function>
    <function id="51" name="GetCombinedBrightness" retID="33">
     <parameter id="32" />
    </function>
    <function id="52" name="GetAdaptedLuminanceFromSampler" retID="30">
     <parameter id="29" />
    </function>
    <function id="53" name="DecodeRGBE8" retID="24">
     <parameter id="23" />
    </function>
    <function id="54" name="EncodeRGBE8" retID="19">
     <parameter id="18" />
    </function>
    <function id="55" name="DeCompressColourSpace" retID="17">
     <parameter id="16" />
    </function>
    <function id="56" name="CompressColourSpace" retID="15">
     <parameter id="14" />
    </function>
    <function id="57" name="ScaleHeadLightIntensity" retID="12">
     <parameter id="11" />
    </function>
    <function id="58" name="CalcVertexColour" retID="9">
     <parameter id="8" />
    </function>
    <function id="59" name="screen_position" retID="7">
     <parameter id="6" />
    </function>
    <function id="60" name="world_position" retID="4">
     <parameter id="3" />
    </function>
   </funcInfo>
   <funcEntryExitInfo>
   </funcEntryExitInfo>
   <VfetchInfo>
   </VfetchInfo>
   <InterpolatorInfo>
    <Interpolator Register="0" Semantic="0xa0" Mask="xyzw" />
    <Interpolator Register="1" Semantic="0xa1" Mask="xyzw" />
    <Interpolator Register="2" Semantic="0x50" Mask="xyzw" />
    <Interpolator Register="3" Semantic="0x51" Mask="xyzw" />
    <Interpolator Register="4" Semantic="0x52" Mask="xyzw" />
    <Interpolator Register="5" Semantic="0x54" Mask="xyzw" />
    <Interpolator Register="6" Semantic="0x55" Mask="xyzw" />
    <Interpolator Register="7" Semantic="0xb0" Mask="x" />
   </InterpolatorInfo>
   <LiteralFloats>
    <Float Register="252" value0="0" value1="0" value2="0" value3="0" />
    <Float Register="253" value0="3.0999999" value1="0.333" value2="0" value3="0" />
    <Float Register="254" value0="0.5" value1="0.11111111" value2="1" value3="10" />
    <Float Register="255" value0="1.5" value1="-0.1" value2="0.1" value3="0.001" />
   </LiteralFloats>
   <LiteralInts>
   </LiteralInts>
   <LiteralBools>
   </LiteralBools>
  </shader>
  <shader entrypoint="VS_CarHighLOD" target="vs_3_0" FxlTechniqueName="RenderTSMAlphaTex" FxlTechnique="0" FxlPassName="p0" FxlPass="0" ZPass="0" pdbHint="4e4a0010-08362a8e-aef0f5b7">
   <constanttable>
    <constant register="c240">
     <type name="cfFogEnable" class="scalar" type="float" />
    </constant>
    <constant register="c244">
     <type name="cfScaleUVs" class="scalar" type="float" />
    </constant>
    <constant register="c36" count="3">
     <type name="cmLocalColourMatrix" class="vector" type="float" columns="4" elements="4" />
    </constant>
    <constant register="c40" count="3">
     <type name="cmLocalDirectionMatrix" class="vector" type="float" columns="4" elements="4" />
    </constant>
    <constant register="c16" count="4">
     <type name="cmShadowMapWVP" class="matrix_columns" type="float" rows="4" columns="4" />
    </constant>
    <constant register="c24" count="4">
     <type name="cmWorldViewProj" class="matrix_columns" type="float" rows="4" columns="4" />
    </constant>
    <constant register="c237">
     <type name="cvClampAndScales" class="vector" type="float" columns="4" />
    </constant>
    <constant register="c228">
     <type name="cvDiffuseMin" class="vector" type="float" columns="4" />
    </constant>
    <constant register="c229">
     <type name="cvDiffuseRange" class="vector" type="float" columns="4" />
    </constant>
    <constant register="c230">
     <type name="cvEnvmapMin" class="vector" type="float" columns="4" />
    </constant>
    <constant register="c231">
     <type name="cvEnvmapRange" class="vector" type="float" columns="4" />
    </constant>
    <constant register="c238">
     <type name="cvFlakes" class="vector" type="float" columns="4" />
    </constant>
    <constant register="c206">
     <type name="cvFogValue" class="vector" type="float" columns="4" />
    </constant>
    <constant register="c32">
     <type name="cvLocalEyePos" class="vector" type="float" columns="3" />
    </constant>
    <constant register="c236">
     <type name="cvPowers" class="vector" type="float" columns="4" />
    </constant>
    <constant register="c137">
     <type name="cvScreenOffset" class="vector" type="float" columns="4" />
    </constant>
    <constant register="c161">
     <type name="cvTextureOffset" class="vector" type="float" columns="4" />
    </constant>
   </constanttable>
   <sourcemap>
    <statement pc="6" file="8" line="92" scope="-1" lastinstruction="0" />
    <statement pc="7" file="8" line="92" scope="-1" lastinstruction="0" />
    <statement pc="8" file="8" line="92" scope="-1" lastinstruction="0" />
    <statement pc="9" file="8" line="92" scope="-1" lastinstruction="0" />
    <statement pc="0.1" file="8" line="92" scope="-1" lastinstruction="0" />
    <statement pc="10" file="1" line="20" scope="-1" lastinstruction="0" />
    <statement pc="11" file="1" line="20" scope="-1" lastinstruction="0" />
    <statement pc="12" file="1" line="20" scope="-1" lastinstruction="0" />
    <statement pc="13" file="1" line="20" scope="-1" lastinstruction="0" />
    <statement pc="14" file="1" line="21" scope="-1" lastinstruction="0" />
    <statement pc="15" file="1" line="21" scope="-1" lastinstruction="0" />
    <statement pc="1.1" file="1" line="21" scope="-1" lastinstruction="0" />
    <statement pc="16" file="6" line="194" scope="-1" lastinstruction="0" />
    <statement pc="17" file="6" line="177" scope="-1" lastinstruction="0" />
    <statement pc="18" file="6" line="191" scope="-1" lastinstruction="0" />
    <statement pc="19" file="8" line="132" scope="-1" lastinstruction="0" />
    <statement pc="20" file="8" line="133" scope="-1" lastinstruction="0" />
    <statement pc="21" file="7" line="29" scope="-1" lastinstruction="0" />
    <statement pc="22" file="6" line="192" scope="-1" lastinstruction="0" />
    <statement pc="23" file="6" line="188" scope="-1" lastinstruction="0" />
    <statement pc="24" file="6" line="195" scope="-1" lastinstruction="0" />
    <statement pc="25" file="7" line="30" scope="-1" lastinstruction="0" />
    <statement pc="26" file="8" line="142" scope="-1" lastinstruction="0" />
    <statement pc="27" file="8" line="143" scope="-1" lastinstruction="0" />
    <statement pc="28" file="8" line="118" scope="-1" lastinstruction="0" />
    <statement pc="29" file="8" line="105" scope="-1" lastinstruction="0" />
    <statement pc="30" file="4" line="105" scope="-1" lastinstruction="0" />
    <statement pc="31" file="4" line="105" scope="-1" lastinstruction="0" />
    <statement pc="32" file="4" line="105" scope="-1" lastinstruction="0" />
    <statement pc="33" file="4" line="105" scope="-1" lastinstruction="0" />
    <statement pc="34" file="7" line="30" scope="-1" lastinstruction="0" />
    <statement pc="35" file="8" line="135" scope="-1" lastinstruction="0" />
    <statement pc="36" file="8" line="135" scope="-1" lastinstruction="0" />
    <statement pc="37" file="8" line="135" scope="-1" lastinstruction="0" />
    <statement pc="38" file="7" line="39" scope="-1" lastinstruction="0" />
    <statement pc="39" file="8" line="148" scope="-1" lastinstruction="0" />
    <statement pc="40" file="8" line="137" scope="-1" lastinstruction="0" />
    <statement pc="41" file="8" line="154" scope="-1" lastinstruction="0" />
    <statement pc="42" file="8" line="154" scope="-1" lastinstruction="0" />
    <statement pc="43" file="8" line="167" scope="-1" lastinstruction="0" />
    <statement pc="44" file="8" line="158" scope="-1" lastinstruction="0" />
    <statement pc="45" file="8" line="158" scope="-1" lastinstruction="0" />
    <statement pc="46" file="8" line="159" scope="-1" lastinstruction="0" />
    <statement pc="47" file="8" line="170" scope="-1" lastinstruction="0" />
    <statement pc="48" file="8" line="159" scope="-1" lastinstruction="0" />
    <statement pc="49" file="8" line="159" scope="-1" lastinstruction="0" />
    <statement pc="50" file="8" line="170" scope="-1" lastinstruction="0" />
    <statement pc="51" file="8" line="161" scope="-1" lastinstruction="0" />
    <statement pc="52" file="8" line="170" scope="-1" lastinstruction="0" />
    <statement pc="53" file="8" line="161" scope="-1" lastinstruction="0" />
    <statement pc="54" file="8" line="162" scope="-1" lastinstruction="0" />
    <statement pc="55" file="8" line="169" scope="-1" lastinstruction="0" />
   </sourcemap>
   <variables>
   </variables>
   <variableDebugInfo>
   </variableDebugInfo>
   <scopes>
   </scopes>
   <funcInfo>
    <function id="0" name="PixelShaderTSMAlpha" retID="519">
     <parameter id="518" />
    </function>
    <function id="1" name="PixelShaderTSM" retID="516">
     <parameter id="515" />
    </function>
    <function id="2" name="VertexShaderTSMAlpha" retID="512">
     <parameter id="511" />
    </function>
    <function id="3" name="VertexShaderTSM" retID="507">
     <parameter id="505" />
     <parameter id="506" />
    </function>
    <function id="4" name="PixelShaderLiSPSMAlpha" retID="499">
     <parameter id="498" />
    </function>
    <function id="5" name="PixelShaderLiSPSM" retID="496">
     <parameter id="495" />
    </function>
    <function id="6" name="VertexShaderLiSPSMAlpha" retID="492">
     <parameter id="491" />
    </function>
    <function id="7" name="VertexShaderLiSPSM" retID="486">
     <parameter id="484" />
     <parameter id="485" />
    </function>
    <function id="8" name="CalcShadowBias" retID="479">
     <parameter id="478" />
    </function>
    <function id="9" name="PixelShaderVertexColour" retID="476">
     <parameter id="475" />
    </function>
    <function id="10" name="VertexShaderVertexColour" retID="473">
     <parameter id="471" />
     <parameter id="472" />
    </function>
    <function id="11" name="ZPassVertexShader" retID="465">
     <parameter id="464" />
    </function>
    <function id="12" name="PS_LowLOD" retID="459">
     <parameter id="458" />
    </function>
    <function id="13" name="PS_HighLOD" retID="457">
     <parameter id="456" />
    </function>
    <function id="14" name="PS_CarHighLOD_PS3" retID="433">
     <parameter id="431" />
     <parameter id="432" />
     <parameter id="0" />
    </function>
    <function id="15" name="PS_CarLowLOD_PS3" retID="420">
     <parameter id="419" />
    </function>
    <function id="16" name="PS_CarLowLOD_360" retID="408">
     <parameter id="407" />
    </function>
    <function id="17" name="PS_CarHighLOD" retID="387">
     <parameter id="385" />
     <parameter id="386" />
     <parameter id="0" />
    </function>
    <function id="18" name="GetNoiseNormal" retID="382">
     <parameter id="380" />
     <parameter id="381" />
    </function>
    <function id="19" name="VS_CarNormalMapHighLOD_PC" retID="369">
     <parameter id="366" />
     <parameter id="367" />
     <parameter id="368" />
    </function>
    <function id="20" name="VS_CarNormalMapLowLOD" retID="355">
     <parameter id="352" />
     <parameter id="353" />
     <parameter id="354" />
    </function>
    <function id="21" name="VS_CarNormalMapHighLOD" retID="341">
     <parameter id="338" />
     <parameter id="339" />
     <parameter id="340" />
    </function>
    <function id="22" name="VS_CarLowLOD_PS3" retID="326">
     <parameter id="324" />
     <parameter id="325" />
    </function>
    <function id="23" name="VS_CarLowLOD" retID="312">
     <parameter id="310" />
     <parameter id="311" />
    </function>
    <function id="24" name="VS_CarLowLOD_PS3" retID="297">
     <parameter id="294" />
     <parameter id="295" />
     <parameter id="296" />
    </function>
    <function id="25" name="VS_CarLowLOD_360" retID="281">
     <parameter id="278" />
     <parameter id="279" />
     <parameter id="280" />
    </function>
    <function id="26" name="VS_CarHighLOD_PS3" retID="265">
     <parameter id="262" />
     <parameter id="263" />
     <parameter id="264" />
    </function>
    <function id="27" name="VS_CarHighLOD" retID="249">
     <parameter id="246" />
     <parameter id="247" />
     <parameter id="248" />
    </function>
    <function id="28" name="CalculateShaperRigDiffuse" retID="230">
     <parameter id="226" />
     <parameter id="227" />
     <parameter id="228" />
     <parameter id="229" />
     <parameter id="0" />
    </function>
    <function id="29" name="ReadPositionNormalTangent" retID="224">
     <parameter id="218" />
     <parameter id="219" />
     <parameter id="220" />
     <parameter id="221" />
     <parameter id="222" />
     <parameter id="223" />
    </function>
    <function id="30" name="GetLocalBinormal" retID="214">
     <parameter id="213" />
    </function>
    <function id="31" name="GetLocalTangent" retID="211">
     <parameter id="209" />
     <parameter id="210" />
    </function>
    <function id="32" name="GetLocalTangent" retID="207">
     <parameter id="206" />
    </function>
    <function id="33" name="GetLocalNormal" retID="205">
     <parameter id="203" />
     <parameter id="204" />
    </function>
    <function id="34" name="GetLocalNormal" retID="202">
     <parameter id="201" />
    </function>
    <function id="35" name="GetLocalPosition" retID="200">
     <parameter id="198" />
     <parameter id="199" />
    </function>
    <function id="36" name="GetLocalPosition" retID="197">
     <parameter id="196" />
    </function>
    <function id="37" name="GetPixelDamage" retID="195">
     <parameter id="194" />
    </function>
    <function id="38" name="GetMatrix" retID="192">
     <parameter id="189" />
     <parameter id="190" />
     <parameter id="191" />
    </function>
    <function id="39" name="CalcPostProcessFog" retID="151">
     <parameter id="149" />
     <parameter id="150" />
    </function>
    <function id="40" name="CalcFogColour" retID="148">
     <parameter id="146" />
     <parameter id="147" />
    </function>
    <function id="41" name="CalcVertexFog" retID="139">
     <parameter id="138" />
    </function>
    <function id="42" name="DoShadowCar" retID="134">
     <parameter id="131" />
     <parameter id="132" />
     <parameter id="133" />
     <parameter id="0" />
    </function>
    <function id="43" name="DoShadowOptimized" retID="126">
     <parameter id="122" />
     <parameter id="123" />
     <parameter id="124" />
     <parameter id="125" />
     <parameter id="0" />
    </function>
    <function id="44" name="DoShadow" retID="115">
     <parameter id="112" />
     <parameter id="113" />
     <parameter id="114" />
     <parameter id="0" />
    </function>
    <function id="45" name="DoShadowPCFDepth" retID="106">
     <parameter id="102" />
     <parameter id="103" />
     <parameter id="104" />
     <parameter id="105" />
    </function>
    <function id="46" name="Tex2DOffset" retID="98">
     <parameter id="95" />
     <parameter id="96" />
     <parameter id="97" />
    </function>
    <function id="47" name="GetShadowMapTexCoord" retID="93">
     <parameter id="92" />
    </function>
    <function id="48" name="VertexShadowPosView" retID="91">
     <parameter id="90" />
    </function>
    <function id="49" name="VertexShadowTexOptimized" retID="87">
     <parameter id="84" />
     <parameter id="85" />
     <parameter id="86" />
    </function>
    <function id="50" name="VertexShadowTex" retID="83">
     <parameter id="82" />
    </function>
    <function id="51" name="GetCombinedBrightness" retID="33">
     <parameter id="32" />
    </function>
    <function id="52" name="GetAdaptedLuminanceFromSampler" retID="30">
     <parameter id="29" />
    </function>
    <function id="53" name="DecodeRGBE8" retID="24">
     <parameter id="23" />
    </function>
    <function id="54" name="EncodeRGBE8" retID="19">
     <parameter id="18" />
    </function>
    <function id="55" name="DeCompressColourSpace" retID="17">
     <parameter id="16" />
    </function>
    <function id="56" name="CompressColourSpace" retID="15">
     <parameter id="14" />
    </function>
    <function id="57" name="ScaleHeadLightIntensity" retID="12">
     <parameter id="11" />
    </function>
    <function id="58" name="CalcVertexColour" retID="9">
     <parameter id="8" />
    </function>
    <function id="59" name="screen_position" retID="7">
     <parameter id="6" />
    </function>
    <function id="60" name="world_position" retID="4">
     <parameter id="3" />
    </function>
   </funcInfo>
   <funcEntryExitInfo>
   </funcEntryExitInfo>
   <VfetchInfo>
    <vfetch Address="6" Register="5" DestSwizzle="xyz1" Semantic="0x00" End="false" />
    <vfetch Address="7" Register="3" DestSwizzle="xyz_" Semantic="0x30" End="false" />
    <vfetch Address="8" Register="1" DestSwizzle="x___" Semantic="0xa0" End="false" />
    <vfetch Address="9" Register="0" DestSwizzle="yx__" Semantic="0x50" End="true" />
   </VfetchInfo>
   <InterpolatorInfo>
    <Interpolator Register="0" Semantic="0xa0" Mask="xyzw" />
    <Interpolator Register="1" Semantic="0xa1" Mask="xyzw" />
    <Interpolator Register="2" Semantic="0x50" Mask="xyzw" />
    <Interpolator Register="3" Semantic="0x51" Mask="xyzw" />
    <Interpolator Register="4" Semantic="0x52" Mask="xyzw" />
    <Interpolator Register="5" Semantic="0x54" Mask="xyzw" />
    <Interpolator Register="6" Semantic="0x55" Mask="xyzw" />
    <Interpolator Register="7" Semantic="0xb0" Mask="x" />
   </InterpolatorInfo>
   <LiteralFloats>
    <Float Register="252" value0="0" value1="0" value2="0" value3="0" />
    <Float Register="253" value0="0.10000002" value1="0.25" value2="8.3299999" value3="1.2" />
    <Float Register="254" value0="9.9999997e-005" value1="-0.60000002" value2="-0.25" value3="1" />
    <Float Register="255" value0="0.072099999" value1="0.21250001" value2="0.71539998" value3="0.039999999" />
   </LiteralFloats>
   <LiteralInts>
   </LiteralInts>
   <LiteralBools>
   </LiteralBools>
  </shader>
 </shaders>
</shader-pdb>
