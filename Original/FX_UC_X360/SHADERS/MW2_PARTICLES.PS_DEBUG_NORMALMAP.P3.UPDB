<?xml version="1.0" encoding="utf-8"?>
<shader-pdb pdbHint="4e4a0000-4010c8b3-95ad38c5" version="6995">
 <files>
  <file id="0" path="C:\D1017315-LeigpzigDemo\MW2\Branches\LeipzigDemo\Speed\Indep\Src\Render\effects\mw2_particles.bbfx" time="01c8fd60-db5ccfe6">#include "global.h"

shared float4	cvLightPosition		: REG_cvLightPosition;

static const float magnitude_debug = 1.0;
float4 cvAmbientColour				: REG_cvAmbientColour;
shared float4 cvBaseAlphaRef		: REG_cvBaseAlphaRef; 
  
 
static const float MaxParticleSize = 0.75f;

#ifdef PLAT_XENON
static const float FuzzWidth = 0.15f;		//0.05f;//changed from 0.05 to 0.15 by Lee Rosenbaum Aug 23, 2006;
#elif defined( PLAT_PC )
static const float FuzzWidth = 0.15f;		//0.05f;//changed from 0.05 to 0.15 by Lee Rosenbaum Aug 23, 2006;
#elif defined( PLAT_PS3 )
static const float FuzzWidth = 0.05;
#endif


float3x3 BuildRotate(float angle, float3 rotAxis)
{
	float3x3 m;
	// float fSin = sin(angle);
	// float fCos = cos(angle);
	float2 sc;
	sincos(angle,sc.x,sc.y);
	float3 axis = normalize(rotAxis);

	float3 cosAxis = (1.0f - sc.y) * axis;
	float3 sinAxis = sc.x * axis;
	m[0] = cosAxis.x * axis; 
	m[1] = cosAxis.y * axis; 
	m[2] = cosAxis.z * axis; 
	m[0][0] += sc.y;
	m[0][1] += sinAxis.z;
	m[0][2] -= sinAxis.y;
	m[1][0] -= sinAxis.z;
	m[1][1] += sc.y;
	m[1][2] += sinAxis.x;
	m[2][0] += sinAxis.y;
	m[2][1] -= sinAxis.x;
	m[2][2] += sc.y;

	return m;
}

sampler2D DIFFUSE_SAMPLER
&lt;
	string TextureType = "DIFFUSE_SAMPLER";				// as specified in texture semantic
	string TextureSamplerState = "DIFFUSE_SAMPLER";		// as specified in attribulator
&gt;;

sampler2D NORMALMAP_SAMPLER
&lt;
	string TextureType = "NORMALMAP_SAMPLER";
	string TextureSamplerState = "NORMALMAP_SAMPLER";
&gt;;

sampler2D DEPTHBUFFER_SAMPLER
&lt;
	string TextureSamplerState = "DIFFUSE_SAMPLER";
&gt;;

struct VS_INPUT
{
	float4 position : POSITION0;
	float3 normal	: NORMAL0;
	float4 color    : COLOR;
	float2 tex		: TEXCOORD;
	float4 size		: TEXCOORD1;
};

struct VtoP_FLARES
{
	float4 position  : POSITION;
	float4 color     : COLOR0;
	float2 tex       : TEXCOORD0;
	//float4 tex1      : TEXCOORD1;
};

struct VS_INPUT_FLARES
{
	float4 position : POSITION;
	float3 normal	: NORMAL0;
	float4 color    : COLOR;
	float2 tex		: TEXCOORD;
	float4 size		: TEXCOORD1;
};

struct VtoP_NormalMapped
{
	float4 position			: POSITION;
	float4 color			: COLOR0;
	float2 tex				: TEXCOORD0;
	float4 tex1				: TEXCOORD1;
	// vector from the vertex to the light, in tangent space
	float4 to_light_tan		: TEXCOORD2;
	float4 position2		: TEXCOORD3;
};

struct VtoP_WaterSplash
{
	float4 position			: POSITION;
	float4 color			: COLOR0;
	float2 tex				: TEXCOORD0;
	//float4 tex1				: TEXCOORD1;
	// vector from the vertex to the light, in tangent space
	//float4 to_light_tan		: TEXCOORD2;
	//float4 position2		: TEXCOORD3;
	//float3 half_angle		: TEXCOORD4;
};


struct PS_OUTPUT
{
	float4 color		: COLOR;
};


#include "mw2_sparks.h"


#ifdef PLAT_XENON

// A fairly expensive, but accurate fuzzz calculator, since it does everything in world space
// returns 0 if the particle will intersect with the world, &gt; 0 as the particle moves away from nearby objects
float ComputeFuzzz(const VtoP_NormalMapped IN)
{
	float depth = tex2D(DEPTHBUFFER_SAMPLER, IN.tex1.xy).x;

	// NOTE! we are assuming that near is 0.5 and far is 10000!!!!
	
	const float zFar = 10000;
	const float zNear = 0.5;

	float Q = zFar / (zFar - zNear);
	float zDist = (-Q * zNear / (depth - Q));	

	float depthBufferDistToParticle = IN.position2.z / IN.position2.w;
	float distanceToParticle = (-Q * zNear / (depthBufferDistToParticle - Q));

	float distanceBetweenParticleAndGround = abs(zDist - distanceToParticle);
	float fuzzz = saturate(distanceBetweenParticleAndGround  * 1);
	return fuzzz;
}

#elif defined( PLAT_PC )

float ComputeFuzzz(const VtoP_NormalMapped IN)
{
	return 1.0;
}

#else

// PS3


float ComputeFuzzz(const VtoP_NormalMapped IN)
{
	return 1.0;
} 


#endif

VtoP_NormalMapped vs_particles(const VS_INPUT IN)
{
	VtoP_NormalMapped OUT;
	
	OUT.position = world_position(false, IN.position);

	float3 right	= cmWorldView._m00_m10_m20;
	float3 up		= cmWorldView._m01_m11_m21;
	float3 facing	= cmWorldView._m02_m12_m22;

	// Rotate the up and right around the facing
	float angle = IN.size.z;
	if( angle &gt; 0 )
	{
		float3x3 rotation = BuildRotate(angle, facing);
		right = mul(right, rotation);
		up	  = mul(up, rotation);
	}

	// Add offset from particle midpoint to the outside vertices
	float4 pv = IN.position;
	float3 offset = right * IN.size.x + up * IN.size.y;
	pv.xyz += offset;

	// Cap the screen size of any particle
	float4 worldCornerPos = pv;
	pv = world_position(false, pv);

	float3 pvn = pv.xyz/pv.w;
	float4 pc = world_position(false, IN.position);
	float3 pcn = pc.xyz/pc.w;
	float size = distance(pvn.xy,pcn.xy);
	float new_size = min(size, MaxParticleSize);
	float scale = new_size/size;
	pv = lerp(pc,pv,scale);

	// Each particle is affected by one light in the light array
	// Read which one it is:
	float3 lightPos = cvLightPosition.xyz;

	float3 worldPos = mul(IN.position, cmWorldMat).xyz;
	float3 toLightSource = normalize(lightPos - worldPos);

	// Create the matrix which transforms from world space to tangent space
	float3 tangent = right;
	float3 binormal = up;
	float3 normal = -facing;
	float3x3 matTSpace = transpose(float3x3( tangent, binormal, normal  ));

	OUT.to_light_tan.xyz = mul(toLightSource, matTSpace);
	OUT.to_light_tan.w = saturate(1.0 - IN.size.w);

	OUT.position = OUT.position2 = pv;
	OUT.color = saturate(IN.color * 2);

	OUT.tex = IN.tex;// (MKR - this seems pointless, we already put the tex coordins in there manually per sprite) + cvTextureOffset;

	// Convert from screen space (-1 to 1) to texture coordinate space (0.0 to 1.0)
	float distance = pv.z / pv.w;
	OUT.tex1.x = (0.5 * pv.x / pv.w) + 0.5;
	OUT.tex1.y = (-0.5 * pv.y / pv.w) + 0.5;
	//OUT.tex1.y *= cfSplitScreenUVScale[1];	// Split screen adjustment
	//OUT.tex1.y += cfSplitScreenUVScale[0];	// Split screen adjustment

	// Distance to the pixel in the depth buffer
	OUT.tex1.z = distance;

	// We cannot use FuzzWidth directly because we are performing these operations in the depth buffer.
	// FuzzWidth is the amount of play that the sprites have with opaque objects. If a sprite is within FuzzWidth of an Opaque object
	// the sprite will get blurred, fading it in nicely with the opaque object and smoothing the harsh edges out

	// Since Ztesting is off, it also controls whether or not we see the sprite if an opaque object is behind it

	// We need to scale FuzzWidth down if the sprite is near the back of the depth buffer. For instance, FuzzWidth could correspond to 1 cm
	// at the start of the depth buffer, but it could be 100 meters at the end of it

	// Calculate the distance from the particle to the camera in world coordinates
	OUT.tex1.w = 0;//length(cvLocalEyePos - IN.position.xyz) ;


	return OUT;
}

VtoP_WaterSplash vs_watersplash(const VS_INPUT IN)
{
	VtoP_WaterSplash OUT;
	OUT.position = world_position(false, IN.position);

	float3 right	= cmWorldView._m00_m10_m20;
	float3 up		= cmWorldView._m01_m11_m21;
	float3 facing	= cmWorldView._m02_m12_m22;

	// Rotate the up and right around the facing
	float angle = IN.size.z;
	if( angle &gt; 0 )
	{
		float3x3 rotation = BuildRotate(angle, facing);
		right = mul(right, rotation);
		up	  = mul(up, rotation);
	}

	// Add offset from particle midpoint to the outside vertices
	float4 pv = IN.position;
	float3 offset = right * IN.size.x + up * IN.size.y;
	pv.xyz += offset;

	// Cap the screen size of any particle
	float4 worldCornerPos = pv;
	pv = world_position(false, pv);

	float3 pvn = pv.xyz/pv.w;
	float4 pc = world_position(false, IN.position);
	float3 pcn = pc.xyz/pc.w;
	float size = distance(pvn.xy,pcn.xy);
	float new_size = min(size, MaxParticleSize);
	float scale = new_size/size;
	pv = lerp(pc,pv,scale);

	float3 lightPos = cvLightPosition.xyz;
	float3 worldPos = mul(IN.position, cmWorldMat).xyz;
	float3 toLightSource = normalize(lightPos - worldPos);



	// Create the matrix which transforms from world space to tangent space
	float3 tangent = right;
	float3 binormal = up;
	float3 normal = -facing;
	float3x3 matTSpace = transpose(float3x3( tangent, binormal, normal  ));

	//OUT.to_light_tan.xyz = mul(toLightSource, matTSpace);
	//OUT.to_light_tan.w = saturate(1.0 - IN.size.w);

	//OUT.position = OUT.position2 = pv;
	OUT.position = pv;
	OUT.color = saturate(IN.color * 2);

	// convert to view space
	

 
	// midway between light and viewvector

	//OUT.half_angle = normalize(toLightSource + float3(0,0,1));

	
	OUT.tex = IN.tex;
	 

	// get vector from particle to eyeposition
	float3 toEye = normalize(IN.position.xyz - cvLocalEyePos.xyz);
	// remember that the particles are doublesided
	// we modulate the alpha for the watersplash, reason? a sprite, viewed edge on with additive looks like a bright line, so we fade it down
	float d = abs(dot(toEye, IN.normal));
	float alphaMod = (1.0/0.7)*d;
	//OUT.color.a = 1;//saturate(alphaMod);	
	
	// Convert from screen space (-1 to 1) to texture coordinate space (0.0 to 1.0)
	float distance = pv.z / pv.w;
	//OUT.tex1.x = (0.5 * pv.x / pv.w) + 0.5;
	//OUT.tex1.y = (-0.5 * pv.y / pv.w) + 0.5;

	// Distance to the pixel in the depth buffer
	//OUT.tex1.z = distance;

	// We cannot use FuzzWidth directly because we are performing these operations in the depth buffer.
	// FuzzWidth is the amount of play that the sprites have with opaque objects. If a sprite is within FuzzWidth of an Opaque object
	// the sprite will get blurred, fading it in nicely with the opaque object and smoothing the harsh edges out

	// Since Ztesting is off, it also controls whether or not we see the sprite if an opaque object is behind it

	// We need to scale FuzzWidth down if the sprite is near the back of the depth buffer. For instance, FuzzWidth could correspond to 1 cm
	// at the start of the depth buffer, but it could be 100 meters at the end of it

	// Calculate the distance from the particle to the camera in world coordinates
	//OUT.tex1.w = 0;//length(cvLocalEyePos - IN.position.xyz) ; 

 
	return OUT;
}

PS_OUTPUT ps_watersplash(const VtoP_WaterSplash IN)
{
	PS_OUTPUT OUT;
	float4 baseColour = tex2D(DIFFUSE_SAMPLER, IN.tex.xy) * IN.color;
	OUT.color = baseColour;
	OUT.color *= 2.0;	 
	OUT.color.rgb = CompressColourSpace(OUT.color.rgb);
	return OUT;
}

PS_OUTPUT pixel_shader_particles_implementation(const VtoP_NormalMapped IN, float fuzzz)
{
	PS_OUTPUT OUT;
	float  shadow = 1;//DoShadow( IN.shadowTex, 1 ) * 0.5 + 0.5;

	float4 baseColour = tex2D(DIFFUSE_SAMPLER, IN.tex.xy) * IN.color;

	// calculate the normal map
	float3 normal = tex2D(NORMALMAP_SAMPLER, IN.tex.xy).xyz * 2 - 1;

	normal = normal * magnitude_debug ;

	// Apply diffuse lighting 
	float3 toLight = normalize(IN.to_light_tan.xyz);
	float nDotL = saturate(dot(normal, toLight));

	float3 diffuseColour = nDotL;

	float3 lightColour = diffuseColour + cvAmbientColour.rgb;

	// if the light influence is 0.0, then we make the light colour pure white
	float invLightInfluence = IN.to_light_tan.w;

	lightColour = saturate(lightColour + float3(invLightInfluence, invLightInfluence, invLightInfluence));


	OUT.color.rgb = fuzzz * shadow * baseColour.xyz * lightColour;
	OUT.color.a = baseColour.a * shadow * fuzzz;


			 
	OUT.color.rgb = CompressColourSpace(OUT.color.rgb);



	return OUT;	
}



VtoP_FLARES vertex_shader_flares(const VS_INPUT_FLARES IN, COMPILETIME_BOOL enableParaboloidBasis)
{
	VtoP_FLARES OUT;
	// Offset the vertex by the particle size		
	float3 right	= cmWorldView._m00_m10_m20;
	float3 up		= cmWorldView._m01_m11_m21;
	float3 facing	= cmWorldView._m02_m12_m22;

	float  angle    = IN.size.z;
	// Rotate the up and right around the facing
	if( angle &gt; 0 )
	{
		float3x3 rotation = BuildRotate(angle, facing);
		right = mul(right, rotation);
		up	  = mul(up, rotation);
	}
	
	float4 pv = IN.position;
	pv.xyz += right * IN.size.x + up * IN.size.y;

	// Cap the screen size of any particle
	pv = world_position(enableParaboloidBasis, pv);

	OUT.position = pv;
	OUT.color = IN.color;
	OUT.tex = IN.tex;

	// Convert from screen space (-1 to 1) to texture coordinate space (0.0 to 1.0)
	float distance = pv.z / pv.w;
//	OUT.tex1.x = (0.5 * pv.x / pv.w) + 0.5;
//	OUT.tex1.y = (-0.5 * pv.y / pv.w) + 0.5;
//	OUT.tex1.z = distance;		// Distance to the pixel in the depth buffer
//	OUT.tex1.y *= cfSplitScreenUVScale[1];	// Split screen adjustment
//	OUT.tex1.y += cfSplitScreenUVScale[0];	// Split screen adjustment

	// We cannot use FuzzWidth directly because we are performing these operations in the depth buffer.
	// FuzzWidth is the amount of play that the sprites have with opaque objects. If a sprite is within FuzzWidth of an Opaque object
	// the sprite will get blurred, fading it in nicely with the opaque object and smoothing the harsh edges out
	
	// Since Ztesting is off, it also controls whether or not we see the sprite if an opaque object is behind it
	
	// We need to scale FuzzWidth down if the sprite is near the back of the depth buffer. For instance, FuzzWidth could correspond to 1 cm
	// at the start of the depth buffer, but it could be 100 meters at the end of it
//	OUT.tex1.w = saturate(FuzzWidth + distance * (-FuzzWidth));  

		
	return OUT;
}


VtoP_FLARES vs_flares_no_para(const VS_INPUT_FLARES IN)
{
	return vertex_shader_flares(IN, PARABOLOIDBASIS_FALSE);
}

float4 pixel_shader_flares(const VtoP_FLARES IN) : COLOR
{
	float4 diffuse = tex2D(DIFFUSE_SAMPLER, IN.tex);

//	float scaled_fuzz_width = IN.tex1.w;
//	float depth = tex2D(DEPTHBUFFER_SAMPLER,IN.tex1.xy).x;
//	float fuzzz = saturate((scaled_fuzz_width*0.4 - (IN.tex1.z - depth)) / (scaled_fuzz_width));
		
	float4 result;	
	result = diffuse;
	result *= IN.color;
	// Apply a tone mapping to fake a HDR
	result.xyz = result.xyz / (1.5-result.xyz);
//	result.w *= saturate(cvBaseAlphaRef.x + fuzzz);
//	result.w *= saturate(fuzzz);

	
	result.xyz = CompressColourSpace(result.xyz);
	
	
	
	return result;
}





PS_OUTPUT ps_particles(const VtoP_NormalMapped IN)
{
	float fuzzz = ComputeFuzzz(IN);
	return pixel_shader_particles_implementation(IN, fuzzz);
}

PS_OUTPUT ps_debug_normalmap(const VtoP_NormalMapped IN)
{
	PS_OUTPUT OUT;
	
	float4 baseColour = tex2D(DIFFUSE_SAMPLER, IN.tex);
	
	OUT.color.rgb = tex2D(NORMALMAP_SAMPLER, IN.tex).rgb;
	OUT.color.rgb = CompressColourSpace(OUT.color.rgb);
	OUT.color.a = baseColour.a;
	return OUT;
}




//--------------------------------------------------------------------------------------
// Vertex Shader
//--------------------------------------------------------------------------------------
 

 
/*
Usage Information: This is used by the pipe, and by MAX
STARTUSAGE:
materialDescription: This is a simple material. 
isTranslucent: false
texture: TEXCOORD0, MAP1, diffuse, DIFFUSE_SAMPLER, "diffuse map",  "global/art/DEFAULT_DETAIL.tga" 
texture: TEXCOORD0, MAP1, normal, NORMALMAP_SAMPLER, "normal map", "global/art/DEFAULT_DETAIL.tga" 

PLATFORM: XENON
stream0: POSITION0, float3
stream0: NORMAL0, float3
stream0: COLOR0, color
stream0: TEXCOORD0, float2
stream0: TEXCOORD1, float4
PLATFORM: PS3
stream0: POSITION0, float3
stream0: NORMAL0, float3
stream0: COLOR0, color
stream0: TEXCOORD0, float2
stream0: TEXCOORD1, float4
PLATFORM: PC
stream0: POSITION0, float3
stream0: NORMAL0, float3
stream0: COLOR0, color
stream0: TEXCOORD0, float2
stream0: TEXCOORD1, float4
ENDUSAGE
*/

const string MaterialClass = "Default";

technique EmitterShaderTechnique_DEFAULT
&lt;
	string viewtag = "ANY";
	string lostag = "ANY";
&gt;
{
    pass AdditivePass 
	&lt; 
		string depthstencil = "no_zwrite"; 
		string blend = "add"; 
		string rasterizer = "double_sided"; 
	&gt;
    {   
        VertexShader = compile vs_3_0 vs_particles();
        PixelShader  = compile ps_3_0 ps_particles();
    }
    pass BlendPass 
	&lt; 
		string depthstencil = "no_zwrite"; 
		string blend = "blend"; 
		string rasterizer = "double_sided"; 
	&gt;
    {   
        VertexShader = compile vs_3_0 vs_particles();
        PixelShader  = compile ps_3_0 ps_particles();
    }    
    
}

technique EmitterShaderTechnique_WATERSPLASH
&lt;
	string viewtag = "ANY";
	string lostag = "ANY";
&gt;
{
    pass AdditivePass 
	&lt; 
		string depthstencil = "no_zwrite"; 
		string blend = "add"; 
		string rasterizer = "double_sided"; 
	&gt;
    {   
        VertexShader = compile vs_3_0 vs_watersplash();
        PixelShader  = compile ps_3_0 ps_watersplash();
    }
    pass BlendPass 
	&lt; 
		string depthstencil = "no_zwrite"; 
		string blend = "blend"; 
		string rasterizer = "double_sided"; 
	&gt;
    {   
        VertexShader = compile vs_3_0 vs_watersplash();
        PixelShader  = compile ps_3_0 ps_watersplash();
    }
}

technique flares
&lt;
	string viewtag = "ANY";
	string lostag = "ANY";
&gt;
{
	pass P0
	&lt;
		string depthstencil = "no_zwrite";
		string blend = "add";
		string rasterizer = "double_sided";
	&gt;
	{
		VertexShader = compile vs_3_0 vs_flares_no_para();
		PixelShader = compile ps_3_0 pixel_shader_flares();
	}
}


technique sparks
&lt;
	string viewtag = "ANY";
	string lostag = "ANY";
&gt;
{
	pass P0
	&lt;
		string depthstencil = "no_zwrite";
		string blend = "add";
		string rasterizer = "double_sided";
	&gt;
	{
		VertexShader = compile vs_3_0 vs_sparks_no_para();
		PixelShader = compile ps_3_0 pixel_shader_sparks();
	}
}



technique ShowNormalMap
&lt;
	string viewtag = "ANY";
	string lostag = "ANY";
&gt;
{
    pass P0 
	&lt; 
		string depthstencil = "no_zwrite"; 
		string blend = "blend"; 
		string rasterizer = "double_sided"; 
	&gt;
    {   
        VertexShader = compile vs_3_0 vs_particles();
        PixelShader  = compile ps_3_0 ps_debug_normalmap();
    }


}

</file>
  <file id="1" path="C:\D1017315-LeigpzigDemo\MW2\Branches\LeipzigDemo\Speed\Xenon\Src\Render\effects\global.h" time="01c8fd61-408f5ffa">#ifndef GLOBAL_H
#define GLOBAL_H

#include "registermap.h"   
#include "global_common.h"

//#define ENABLE_SCREENSHOTS

// Defined out for the Xbox360 - only needed on the PC
#define DECLARE_TEXTURE(texture)	
#define ASSIGN_TEXTURE(texture)	
#define DECLARE_MINFILTER(default_filter)			 MINFILTER = default_filter;
#define DECLARE_MAGFILTER(default_filter)			 MAGFILTER = default_filter;
#define DECLARE_MIPFILTER(default_filter)			 MIPFILTER = default_filter;

#ifndef SHADERMODEL_3_0
    #define SHADERMODEL_3_0
#endif

/////////////////////////////////////////////////////////////////////////////////////////

//--------------------------------------------------------------------------------------
// Global Parameters - platform specific.
//--------------------------------------------------------------------------------------
float4		cvScreenOffset			: REG_cvScreenOffset;
float4		cvVertexPowerBrightness : REG_cvVertexPowerBrightness;

#include "reflection.h"

float4 world_cartesian_position( float4 screen_pos )
{
 	float4 p = mul(screen_pos, cmWorldViewProj);  

#if defined(PLAT_XENON) &amp;&amp; defined(ENABLE_SCREENSHOTS)
	p.xy += (cvScreenOffset.xy * p.w);
#endif

    return p;
}

float4 world_position(COMPILETIME_BOOL enableParaboloidBasis, float4 modelspace_position)
{
	if (enableParaboloidBasis)
	{
		return world_paraboloid_position(modelspace_position);
	}
	else
	{
		return world_cartesian_position(modelspace_position);
	}
}

float4 world_position(float4 modelspace_position, COMPILETIME_BOOL enableParaboloidBasis, COMPILETIME_BOOL instanceRender)
{
	if(instanceRender)
	{
		// Want to do a compile time assert here as Instance rendering isn't supported on Xenon at the moment.
	}

	if (enableParaboloidBasis)
	{
		return world_paraboloid_position(modelspace_position);
	}
	else
	{
		return world_cartesian_position(modelspace_position);
	}
}

/////////////////////////////////////////////////////////////////////////////////////////
// HDR Colour Space compression
/////////////////////////////////////////////////////////////////////////////////////////

/* 
This function maps input 'c' to a curve. 

It is a really important curve!
It provides the following transformation on the input color:

1. Compresses the dynamic range from 0-2 to 0-1 (which is expressable in 8 bits)
2. Adds a 'filmic' shoulder to the high end that prevents the color from "slamming
into the ceiling", which is a class digital problem with a limited number of bits.

Jim Hejl
07/12/2008
*/
float3 CompressColourSpace(float3 c)
{
    // filmic response, without implicit gamma
    // GammaCompress() is active, and does a sqrt() after this response curve
    return (1-(pow(1-(c*.5),2)));
    /*
    float3 c0, c1;
    c0 = max(c*.75,1);
    c1 = min(1,c*.75);
    c1 = 1-pow(c1,2);

    return (c0-c1)*1.3333; 
    */

    //return (c*.5);//(c*0.5);//saturate((c/(c+0.1812))*1.0906); 
} 

float3 DeCompressColourSpace(float3 c)
{
    // no curve removal at this time
    return (c);
    
    //(c*2);//(c/((1-c)+0.1))*0.2;
}

half2 DeCompressTextCoords(half2 textCoords)
{
	return textCoords;
}

/////////////////////////////////////////////////////////////////////////////////////////
// RGBE8 Encoding/Decoding
// The RGBE8 format stores a mantissa per color channel and a shared exponent 
// stored in alpha. Since the exponent is shared, it's computed based on the
// highest intensity color component. The resulting color is RGB * 2^Alpha,
// which scales the data across a logarithmic scale.
/////////////////////////////////////////////////////////////////////////////////////////

float4 EncodeRGBE8( in float3 rgb )	  
{
	float4 vEncoded;

    // Determine the largest color component
	float maxComponent = max( max(rgb.r, rgb.g), rgb.b );
	
	// Round to the nearest integer exponent
	float fExp = ceil( log2(maxComponent) );

    // Divide the components by the shared exponent
	vEncoded.rgb = rgb / exp2(fExp);
	
	// Store the shared exponent in the alpha channel
	vEncoded.a = (fExp + 128) / 255;

	return vEncoded;
}

/////////////////////////////////////////////////////////////////////////////////////////

float3 DecodeRGBE8( in float4 rgbe )
{
	float3 vDecoded;

    // Retrieve the shared exponent
	float fExp = rgbe.a * 255 - 128;
	
	// Multiply through the color components
	vDecoded = rgbe.rgb * exp2(fExp);
	
	return vDecoded;
}

/////////////////////////////////////////////////////////////////////////////////////////
#endif
</file>
  <file id="2" path="C:\D1017315-LeigpzigDemo\MW2\Branches\LeipzigDemo\Speed\Xenon\Src\Render\effects\registermap.h" time="01c8f9c5-4d521c5e">
// ------------------------------------------------------------------------------------------------------------------------------------------

#define CONSTANT_RESERVED_DO_NOT_USE			(0)		/* 4 vectors [c0,c3] */

// ------------------------------------------------------------------------------------------------------------------------------------------

#define REG_RESERVED_DO_NOT_USE				register(c0)	/* 4 vectors [c0,c3] */

#define REG_cmWorldMat						register(c4)	/* 4 vectors [c0,c3] */
#define REG_cmWorldMatTranspose				register(c8)	/* 4 vectors [c4,c7] */
#define REG_cmWorldView						register(c12)	/* 4 vectors [c8,c11] */
#define REG_cmShadowMapWVP					register(c16)	/* 4 vectors [c12,c15] */
#define REG_cmLightWVP						register(c20)	/* 4 vectors [c16,c19] */
#define REG_cmWorldViewProj					register(c24)	/* 4 vectors [c20,c23] */
#define REG_cmPrevWorldViewProj				register(c28)	/* 4 vectors [c24,c27] */
#define REG_cvLocalEyePos					register(c32)	/* 1 vecotr	 [c32] */
#define REG_cvLocalLightVec					register(c33)	/* 1 vecotr	 [c33] */
#define REG_cfSkyDomeRotation				register(c34)	/* 1 vecotr	 [c34] */

#define REG_cmLocalColourMatrix				register(c36)	/* 4 vectors [c36,c39] */
#define REG_cmLocalDirectionMatrix			register(c40)	/* 4 vectors [c40,c43] */
#define REG_cmLocalPositionMatrix			register(c44)	/* 4 vectors [c44,c47] */
#define REG_cavHarmonicCoeff				register(c48)	/* 10 floats, 3 vectors, 1 pad vector [48,51] */

#define REG_cvWorldSpecularColour			register(c49)
#define REG_cvWorldSunColour				register(c50)
#define REG_cvWorldAmbientColour			register(c51)

#define REG_camBlendMatrices				register(c52)	/* 64 vectors [c52,c115] */
#define REG_cavWorldHeadlightDirection		register(c68)	/* 2 vectors [c68,c69] */
#define REG_cavWorldHeadlightPosition		register(c70)	/* 2 vectors [c70,c71] */
#define REG_cavWorldHeadlightUpDirection	register(c72)	/* 2 vectors [c72,c73] */

#define REG_cvSHColour						register(c51)

// available: [c82,c115] (but would alias cavPcaWeightsR and cavPcaWeightsG)
// PCA/UCap parameters (ucap.fx, water.fx)
#define REG_cafPcaMean					register(c81)	/* 1 vector */
#define REG_cavPcaWeightsR				register(c82)	/* 22 vectors [c82,c103] */
#define REG_cavPcaWeightsG				register(c104)	/* 22 vectors [c104,c125] */
#define REG_cavPcaWeightsB				register(c126)	/* 22 vectors [c126,c147] */
#define REG_cavPcaWeightsX				register(c148)	/* 8 vectors [c148,c155] */
#define REG_cavPcaWeightsY				register(c156)	/* 8 vectors [c156,c163] */
#define REG_cavPcaWeightsZ				register(c164)	/* 8 vectors [c164,c171] */
#define REG_cavPcaWeightsNX				register(c172)	/* 8 vectors [c172,c179] */
#define REG_cavPcaWeightsNY				register(c180)	/* 8 vectors [c180,c187] */
#define REG_cavPcaWeightsNZ				register(c188)	/* 8 vectors [c188,c195] */
#define REG_cavFeatureHeights			register(c196)	/* 1 vector */

// The following parameters alias cavPcaWeightsG:
#define REG_cfMipMapBias				register(c116)
#define REG_cfBrightness				register(c117)
#define REG_cfSurfaceReflection			register(c118)
#define REG_cfRainIntensity				register(c119)
#define REG_cfSpecularPower				register(c120)
#define REG_cfMetallicScale				register(c121)
#define REG_cfEnvmapPullAmount			register(c122)
#define REG_cfEnvmapPower				register(c123)
#define REG_PAD2						register(c125)

// The following parameters alias cavPcaWeightsB:
#define REG_cfCombinedBrightness		register(c126)
#define REG_cvVisualEffectFadeColour	register(c127)	/* also aliases cfSkyAlphaTag */
#define REG_cfSkyAlphaTag				register(c127)	/* also aliases cvVisualEffectFadeColour */
#define REG_cfShadowVolumeOffset		register(c128)
#define REG_cfRVMWorldBrightness		register(c129)
#define REG_cfDesaturation				register(c130)
#define REG_cfSplitScreenUVScale		register(c132)
#define REG_cfColourCubeFilterBlend		register(c133)
#define REG_cfTimeTicker				register(c134)
#define REG_cfMiddleGray				register(c135)
#define REG_cfBrightPassThreshold		register(c136)
#ifndef SMOKE_XENON
#define REG_cvScreenOffset				register(c137)
#else
#define REG_cvScreenOffset				register(c63)
#endif
#define REG_cvFog_Br_Plus_Bm			register(c138)
#define REG_cvFog_One_Over_BrBm			register(c139)
#define REG_cvFog_Const_1				register(c140)
#define REG_cvFog_Const_2				register(c141)
#define REG_cvFog_Const_3				register(c142)
#define REG_cvAmbientColour				register(c143)
#define REG_cvShadowParams0				register(c144)
#define REG_cvShadowParams1				register(c145)

// The following parameters alias cavPcaWeightsX:
#define REG_cvDiffuseColour				register(c148)
#define REG_cvSpecularColour			register(c149)
// available: [c150,c155] (but would alias cavPcaWeightsX)

// The following parameters alias cavPcaWeightsY:
#define REG_cvShadowColour				register(c156)
#define REG_cvTextureOffset				register(c161)
#define REG_cvLocalCenter				register(c162)
#define REG_cvTreeParams				register(c163)

// The following parameters alias cavPcaWeightsZ:
#define REG_cvBaseAlphaRef				register(c164)
#define REG_cvCloudIntensity			register(c165)
#define REG_cvLocalLightPos				register(c166)
#define REG_cvPixelizationScale			register(c167)
#define REG_cvGrassColour				register(c169)

// The following parameters alias cavPcaWeightsNX:
#define REG_cvDepthOfFieldParams		register(c172)	/* aliases cavFeatureHeights */
#define REG_cvBlurParams				register(c173)

// The following parameters alias cavPcaWeightsNX and cavPcaWeightsNY:
#define REG_cavSampleOffsetWeights		register(c174)	// 16 vectors
#define REG_cvSmokeParams				register(c175)
#define REG_cmShadowMapVP				register(c180)	// 4 vectors
#define REG_cmShadowMapBiasMatrix		register(c184)	// 4 vectors
#ifndef SMOKE_XENON
#define REG_cmCSMTransform				register(c188)	// 4 vectors
#else
#define REG_cmCSMTransform				register(c50)	// 4 vectors
#endif
#define REG_cvTint						register(c190)
#define REG_PAD0						register(c191)	/* free space!! */


// bbfx material paramters for world

#define	REG_cfAmbientIntensityW			register(c191)  /* reuse these registers for shaders that need 2 */
#define	REG_cfDiffuseIntensityW			register(c192)  /* reuse these registers for shaders that need 2 */
#define	REG_cfSpecularIntensityW		register(c193)  /* reuse these registers for shaders that need 2 */
#define	REG_cfSpecularPowerW			register(c194)  /* reuse these registers for shaders that need 2 */
#define	REG_cfReflectionIntensityW		register(c195)
#define	REG_cfSpecularBackscatterW		register(c196)  /* reuse these registers for shaders that need 2 */
#define	REG_cfLod_blend_beginW			register(c197) 
#define	REG_cfLod_blend_biasW			register(c198) 
#define	REG_cfIlluminationIntensityW	register(c199) 
#define	REG_cvSpecularColourW			register(c200)
#define	REG_cfReflectionLightingW		register(c201)
#define	REG_cfReflectionLtgPwrW			register(c202)
#define	REG_cfDiffuseIntensity1W		register(c192)
#define	REG_cfSpecularIntensity1W		register(c193)
#define	REG_cfSpecularPower1W			register(c194)
//#define	REG_cfReflectionIntensityW		register(c195)  /* note this is just here to let Andy know I need it in this group */
#define	REG_cfDiffuseIntensity2W		register(c196)
#define	REG_cfSpecularIntensity2W		register(c197)
#define	REG_cfSpecularPower2W			register(c198)
#define REG_cfDirtAmbientIntensityW		register(c191)
#define REG_cfDirtBackscatterW			register(c192)
#define REG_cfDirtSpecularIntensity		register(c193)
#define REG_cfDirtSpecularPowerW		register(c194)
#define REG_cfGrassAmbientIntensityW	register(c195)
#define REG_cfGrassBackscatterW			register(c196)
#define REG_cfGrassSpecularIntensityW	register(c197)
#define REG_cfGrassSpecularPowerW		register(c198)
#define REG_cfRockAmbientIntensityW		register(c199)
#define REG_cfRockSpecularIntensityW	register(c200)
#define REG_cfRockSpecularPowerW		register(c201)
#define	REG_cvDirtSpecularColorW		register(c202)
#define	REG_cvGrassSpecularColorW		register(c203)
#define	REG_cvRockSpecularColorW		register(c204)
#define	REG_cfDebugDiffuseTexW			register(c250)  
#define	REG_cfDebugSpecularTexW			register(c251) 
#define	REG_cfDebugNormalTexW			register(c252) 
#define	REG_cfDebugNormalScaleW			register(c253)
#define REG_cvFogValue					register(c206)
#define REG_cvFogColour					register(c207)
#define REG_cfSkyFogFalloff				register(c208)
#define REG_cfLightMapVertColBlend		register(c209)
#define REG_cvLightColour				register(c210)
#define REG_cvLightPosition				register(c211)
#define REG_cvFrustumVector				register(c212)
#define REG_cvSunHazeColour				register(c213)
#define REG_cfVSMEnabled				register(c214)
#ifndef SMOKE_XENON
#define REG_cvVertexPowerBrightness		register(c216)
#else
#define REG_cvVertexPowerBrightness		register(c62)
#endif
#define REG_cfDrawDepthOfField			register(c230)
#define REG_cfFogEnable					register(c240)
#define REG_CSMTransform				register(c249) /* 4 vectors [c249,c252] */

// Light Material Registers - alias REG_cavLightDirections

#define REG_cvDiffuseMin				register(c228)
#define REG_cvDiffuseRange				register(c229)
#define REG_cvEnvmapMin					register(c230)
#define REG_cvEnvmapRange				register(c231)
#define REG_cvSpecularMin				register(c232)
#define REG_cvSpecularRange				register(c233)
#define REG_cvSpecular1Min				register(c234)
#define REG_cvSpecular1Range			register(c235)
#define REG_cvPowers					register(c236)
#define REG_cvClampAndScales			register(c237)
#define REG_cvFlakes					register(c238)
#define REG_cvVinylScales				register(c239)

#define	REG_cvGradientParams            register(c240)
#define	REG_cvGradientColour            register(c241)
#define	REG_cvGradientColourE           register(c242)
#define	REG_ScreenRez                  	register(c243)
#define REG_cfScaleUVs					register(c244)
#define REG_cvVisualTreatmentParams		register(c245)
#define REG_cvVisualTreatmentParams2	register(c246)
#define REG_cvVisualTreatmentParams3	register(c247)
#define REG_cfCurrentTime				register(c248)


// for the constants heavy shader instancing
// 4 vectors, c4 to c7

#define REG_cvInstanceWorldSunColour		register(c61)
#define REG_cfSmokeLightInfluence			register(c60)
#define REG_cvInstanceWorldSunPosition		register(c59)
#define REG_cvInstanceData					register(c58)	// 4 Vectors
#define REG_cmInstanceVP					register(c54)
#define REG_cvInstanceWorldAmbientColour	register(c11)
#define REG_cvInstancedFogColour			register(c12)
#define REG_cvInstancedFogValue				register(c13)
#define REG_cvInstanceArray					register(c64)


// Aliased With Light Materials ...


</file>
  <file id="3" path="C:\D1017315-LeigpzigDemo\MW2\Branches\LeipzigDemo\Speed\Indep\Src\Render\effects\common\global_common.h" time="01c8f9c0-c76d0f4e">#ifndef __GLOBAL_COMMON_H__
#define __GLOBAL_COMMON_H__

//--------------------------------------------------------------------------------------
// Defines
//--------------------------------------------------------------------------------------
#define COMPILETIME_BOOL		uniform bool
#define PARABOLOIDBASIS_TRUE	true
#define PARABOLOIDBASIS_FALSE	false
#define INSTANCE_RENDER_TRUE	true
#define INSTANCE_RENDER_FALSE	false

//--------------------------------------------------------------------------------------
// Global Parameters
//--------------------------------------------------------------------------------------
float4x4	cmWorldViewProj		: REG_cmWorldViewProj;
float4x4	cmWorldView			: REG_cmWorldView;

float4	cvLocalLightVec			: REG_cvLocalLightVec;  // LOCALLIGHTDIRVECTOR;
float4	cvLocalEyePos			: REG_cvLocalEyePos;    // LOCALEYEPOS;

float4x4 cmWorldMat				: REG_cmWorldMat;				// WORLD
float4x4 cmWorldMatTranspose	: REG_cmWorldMatTranspose;

// Used to pass the world matrix transpose to the Shader when instance rendering.
float4x4	mWorldTransposeInstance;

// Used to pass the world matrix to the Shader when instance rendering.
float4x4	mWorldInstance;

// Used to pass the light and eye vectors to the PixelShader when instance rendering.
float3		vLocalLightDir;
float4		vLocalEyePos;

//--------------------------------------------------------------------------------------
// Functions - Used by instance rendering to deal with model space variables.
//--------------------------------------------------------------------------------------
float3 GetLocalLightDir(COMPILETIME_BOOL instanceRendering)
{
	if(!instanceRendering)
	{
		return cvLocalLightVec.xyz;
	}
	else
	{
		return vLocalLightDir;
	}
}

float3 GetLocalEyePos(COMPILETIME_BOOL instanceRendering)
{
	if(!instanceRendering)
	{
		return cvLocalEyePos.xyz;
	}
	else
	{
		return vLocalEyePos.xyz;
	}
}

//--------------------------------------------------------------------------------------
// Functions - Used by many shaders.
//--------------------------------------------------------------------------------------

inline float3 NormalTransform(float3 n, COMPILETIME_BOOL instanceRendering)
{
    /*
    Handle Mirror

    Object "mirroring" is a negative scale factor in the world matrix
    Mirror can be detected by crossing the RIGHT and OUT basis vectors
    If the UP vector points down (negative), we have a mirror transform.
    This is handled by applying the sign of the UP vector to the normal
    */

    float3 up;

    // Compile time branch
    if(instanceRendering)
    {
        up = cross(mWorldInstance[0].xyz,mWorldInstance[1].xyz );
    }
    else
    {
        up = cross(cmWorldMat[0].xyz,cmWorldMat[1].xyz );
    }
    n.xyz *= sign(up.z);

    return (n);
}

float bias(float b, float x)
{
return pow(x, log(b)/log(0.5));
}

//keep these around in case I need them
/*
float gain(float g, float x)
{
	float retVal	=  x &lt; 0.5 ? bias(1-g, 2*x)/2 : 1 - bias(1-g, 2 - 2*x)/2;
	return retVal;
}

float3 mix( float3 color0, float3 color1, float value )
{
return (1-value)*color0 + value*color1; 
}
*/

float valueOf(float3 colorVal)
{

	float minVal	= min(min(colorVal.r, colorVal.g), colorVal.b);
	float maxVal	= max(max(colorVal.r, colorVal.g), colorVal.b);
	float delta		= maxVal - minVal;

	float value		= maxVal;

	float satVal	= maxVal &gt; 0 ? delta/maxVal: 0;
	return value;
}

/*
float saturationOf(float3 colorVal)
{

	float minVal	= min(min(colorVal.r, colorVal.g), colorVal.b);
	float maxVal	= max(max(colorVal.r, colorVal.g), colorVal.b);
	float delta		= maxVal - minVal;

	float value		= maxVal;

	float satVal	= maxVal &gt; 0 ? delta/maxVal: 0;
	return satVal;
}

float hueOf(float3 colorVal)
{

	float minVal	= min(min(colorVal.r, colorVal.g), colorVal.b);
	float maxVal	= max(max(colorVal.r, colorVal.g), colorVal.b);
	float delta		= maxVal - minVal;

	float value		= maxVal;

	float satVal	= maxVal &gt; 0 ? delta/maxVal: 0;


	float hue		= colorVal.r == maxVal ? ((colorVal.g - colorVal.b)/delta ): 0;  // between yellow and magenta
	hue				= colorVal.g == maxVal ? (2 + (colorVal.b - colorVal.r)/delta) : hue; // between cyan and yellow
	hue				= colorVal.b == maxVal ? (4 + (colorVal.r - colorVal.g)/delta) : hue; // between magenta and cyan
	hue				*= 60;
	hue				= hue &lt; 0 ? hue + 360 : hue;

	return hue;
}
*/ 
#endif //__GLOBAL_COMMON_H__

</file>
  <file id="4" path="C:\D1017315-LeigpzigDemo\MW2\Branches\LeipzigDemo\Speed\Indep\Src\Render\effects\common\reflection.h" time="01c8f9c0-c76f71a8">// Copyright (C) Electronic Arts Canada Inc. 2008. All rights reserved.

#if !defined(_REFLECTION_H_)
#define _REFLECTION_H_

//#define ENVMAP_TESTING

float4x4 cmEnvMapParaboloid0Matrix;
float4x4 cmEnvMapParaboloid1Matrix;
float4x4 cmEnvMapParaboloid2Matrix;
float4x4 cmEnvMapCube0Matrix;
float4x4 cmEnvMapCube1Matrix;
float4x4 cmEnvMapCube2Matrix;
float4x4 cmEnvMapPlane0Matrix;

samplerCUBE ENVMAP_CUBE0_SAMPLER 
&lt;
string TextureSamplerState = "ENVMAP_SAMPLER";
&gt;;

samplerCUBE ENVMAP_CUBE1_SAMPLER 
&lt;
string TextureSamplerState = "ENVMAP_SAMPLER";
&gt;;

samplerCUBE ENVMAP_CUBE2_SAMPLER 
&lt;
string TextureSamplerState = "ENVMAP_SAMPLER";
&gt;;

sampler2D ENVMAP_PARABOLOID0_SAMPLER
&lt;
string TextureSamplerState = "ENVMAP_SAMPLER";
&gt;;

sampler2D ENVMAP_PARABOLOID1_SAMPLER
&lt;
string TextureSamplerState = "ENVMAP_SAMPLER";
&gt;;

sampler2D ENVMAP_PARABOLOID2_SAMPLER
&lt;
string TextureSamplerState = "ENVMAP_SAMPLER";
&gt;;

sampler2D ENVMAP_PLANE0_SAMPLER
&lt;
string TextureSamplerState = "ENVMAP_SAMPLER";
&gt;;

#define PARABOLOID_BASIS_FARPLANE 500.f
#define PARABOLOID_BASIS_NEARPLANE 0.1f

#define EnvironmentMapLookup_Car(xxworldspacereflectionvector, mipmaplevel)		EnvironmentMapLookup_Paraboloid_MipLevel(xxworldspacereflectionvector, ENVMAP_PARABOLOID1_SAMPLER, (float3x3)cmEnvMapParaboloid1Matrix, mipmaplevel)
//#define EnvironmentMapLookup_Car(xxworldspacereflectionvector)				EnvironmentMapLookup_Cube(xxworldspacereflectionvector, ENVMAP_CUBE0_SAMPLER, (float3x3)cmEnvMapCube0Matrix)
#define EnvironmentMapLookup_World(xxworldspacereflectionvector)				EnvironmentMapLookup_Paraboloid(xxworldspacereflectionvector, ENVMAP_PARABOLOID0_SAMPLER, (float3x3)cmEnvMapParaboloid0Matrix)
//#define EnvironmentMapLookup_World(xxworldspacereflectionvector)				EnvironmentMapLookup_Paraboloid_MipLevel(xxworldspacereflectionvector, ENVMAP_PARABOLOID0_SAMPLER, (float3x3)cmEnvMapParaboloid0Matrix, kEnvmipMipLevel)
//#define EnvironmentMapLookup_World(xxworldspacereflectionvector)				EnvironmentMapLookup_Cube(xxworldspacereflectionvector, ENVMAP_CUBE1_SAMPLER, (float3x3)cmEnvMapCube1Matrix)
#define EnvironmentMapLookup_Building(xxworldspacereflectionvector)				EnvironmentMapLookup_Paraboloid(xxworldspacereflectionvector, ENVMAP_PARABOLOID2_SAMPLER, (float3x3)cmEnvMapParaboloid2Matrix)
//#define EnvironmentMapLookup_Building(xxworldspacereflectionvector)			EnvironmentMapLookup_Cube(xxworldspacereflectionvector, ENVMAP_CUBE2_SAMPLER, (float3x3)cmEnvMapCube2Matrix)
#define EnvironmentMapLookup_Character(xxworldspacereflectionvector)			EnvironmentMapLookup_Paraboloid_MipLevel(xxworldspacereflectionvector, ENVMAP_PARABOLOID2_SAMPLER, (float3x3)cmEnvMapParaboloid2Matrix, CharBlurFactor)
//#define EnvironmentMapLookup_Character(xxworldspacereflectionvector)			EnvironmentMapLookup_Cube(xxworldspacereflectionvector, ENVMAP_CUBE2_SAMPLER, (float3x3)cmEnvMapCube2Matrix)
#define EnvironmentMapLookup_CarHeavenFloor(xxworldspacereflectionvector)		EnvironmentMapLookup_Plane(xxworldspacereflectionvector, ENVMAP_PLANE0_SAMPLER, cmEnvMapPlane0Matrix)

// Abstract the position basis for the reflection view so we can swap between
// paraboloid and standard cartesian basis without client code needing to know.
float4 EnvironmentMapLookup_Plane(float4 worldPosition, sampler2D envmapPlane, float4x4 world2envmap)
{
	float4 finalReflect = mul(worldPosition + float4(0, 0, 0.0, 0), world2envmap);
	//finalReflect.xyz *= float3(1, 1, 1);
	finalReflect.y = 1 - (finalReflect.y + 1.09);
	float4 texcoords = float4(((finalReflect.xyz/finalReflect.www) + 1.0f) * 0.5f, 1);
	return tex2Dproj(envmapPlane, texcoords);
}

float4 EnvironmentMapLookup_Cube(float3 reflectionVector, samplerCUBE envmapCube, float3x3 world2envmap)
{
	reflectionVector.y = -reflectionVector.y;
	float4 envMapSample = texCUBE(envmapCube, mul(reflectionVector, world2envmap).xyz);

	return envMapSample;
}

float4 EnvironmentMapLookup_Paraboloid(float3 reflectionVector, samplerCUBE envmapCube, float3x3 world2envmap)
{
	float3 pbmsReflection = mul(reflectionVector, world2envmap);
	
	float scale = 1.4;
	float3 refFront;
	refFront.x = (pbmsReflection.x / (1*(1 + pbmsReflection.z))) + 0.0;
	refFront.y = (-pbmsReflection.y / (1*(1 + pbmsReflection.z))) + 0.0;
	refFront.z = 1 / scale;

	float3 refBack;
	refBack.x = (pbmsReflection.x / (1*(1 - pbmsReflection.z))) + 0.0;
	refBack.y = ((pbmsReflection.y / (1*(1 - pbmsReflection.z))) + 0.0);
	refBack.z = -1 / scale;

	float4	envmap_sampleF = texCUBE(envmapCube, refFront.xyz);
	float4	envmap_sampleB = texCUBE(envmapCube, refBack.xyz);

	float4	envmap_sample = 0; //float4(1, 1, 1, 1);
	
	// Branch is acceptable as this is effectively debugging code
	if (pbmsReflection.z &gt; 0)
	{
		envmap_sample = envmap_sampleF;
	}
	else
	{
		envmap_sample = envmap_sampleB;
	}
	return envmap_sample;
}

float4 EnvironmentMapLookup_ParaboloidUVUV(float3 pbmsReflection)
{
	float2 refFront;
	refFront.x = (pbmsReflection.x / (1*(1 + pbmsReflection.z))) + 0.0;
	refFront.y = (pbmsReflection.y / (1*(1 + pbmsReflection.z))) + 0.0;

	float2 refBack;
	refBack.x = (pbmsReflection.x / (1*(1 - pbmsReflection.z))) + 0.0;
	refBack.y = ((pbmsReflection.y / (1*(1 - pbmsReflection.z))) + 0.0);

	float2	envmap_sampleF = float2(0.5, 0.25) * refFront.xy + float2(0.5, 0.25);
	float2	envmap_sampleB = float2(0.5, 0.25) * refBack.xy + float2(0.5, 0.75);

	envmap_sampleB.x = 1 - envmap_sampleB.x;
	return float4(envmap_sampleF, envmap_sampleB);
}

float4 EnvironmentMapLookup_Paraboloid(float3 reflectionVector, sampler2D envmapParaboloid, float3x3 world2envmap)
{
	float3 pbmsReflection = mul(reflectionVector, world2envmap);

	float4 uvuv = EnvironmentMapLookup_ParaboloidUVUV(reflectionVector);
	float4	envmap_sampleF = tex2D(envmapParaboloid, uvuv.xy);
	float4	envmap_sampleB = tex2D(envmapParaboloid, uvuv.zw);

	float4	envmap_sample = 0;
	if (pbmsReflection.z &gt; 0)
	{
		envmap_sample = envmap_sampleF;
	}
	else
	{
		envmap_sample = envmap_sampleB;
	}
	return envmap_sample;
}

float4 EnvironmentMapLookup_Paraboloid_MipLevel(float3 reflectionVector, sampler2D envmapParaboloid, float3x3 world2envmap, float miplevel)
{
	float3 pbmsReflection = mul(reflectionVector, world2envmap);

	float4 uvuv = EnvironmentMapLookup_ParaboloidUVUV(reflectionVector);

#if defined(SHADERMODEL_3_0)
	float4	envmap_sampleF = tex2Dlod(envmapParaboloid, float4(uvuv.xy, 0.f, miplevel));
	float4	envmap_sampleB = tex2Dlod(envmapParaboloid, float4(uvuv.zw, 0.f, miplevel));
#elif defined(SHADERMODEL_2_0)
	float4	envmap_sampleF = tex2D(envmapParaboloid, uvuv.xy);
	float4	envmap_sampleB = tex2D(envmapParaboloid, uvuv.zw);
#else
#error Unsupported shadermodel
#endif

	float4	envmap_sample = 0;
	if (pbmsReflection.z &gt; 0)
	{
		envmap_sample = envmap_sampleF;
	}
	else
	{
		envmap_sample = envmap_sampleB;
	}
	return envmap_sample;
}

float4 world_paraboloid_position( float4 modelspace_position )
{
 	float4 p = mul(modelspace_position, cmWorldView);
#if defined(ENABLE_SCREENOFFSET)
	p.xy += cvScreenOffset.xy * p.w;
#endif // ENABLE_SCREENOFFSET
	p /= p.w;
	float L = length(p.xyz);
	p /= L;
	p.z += 1;
	p.x = p.x / p.z;
	p.y = -p.y / p.z;
	p.z = (L - PARABOLOID_BASIS_NEARPLANE) / (PARABOLOID_BASIS_FARPLANE - PARABOLOID_BASIS_NEARPLANE);
	p.w = 1;
    return p;
}

#endif	// _REFLECTION_H_
</file>
  <file id="5" path="C:\D1017315-LeigpzigDemo\MW2\Branches\LeipzigDemo\Speed\Indep\Src\Render\effects\common\mw2_sparks.h" time="01c8f9c0-c76f71a8">#ifndef MW2_SPARKS_H
#define MW2_SPARKS_H

struct VS_INPUT_SPARKS
{
	float4 position : POSITION;
	float4 color    : COLOR;
	float2 tex		: TEXCOORD;
};

struct VtoP_SPARKS
{
	float4 position  : POSITION;
	float4 color     : COLOR0;
	float2 tex       : TEXCOORD0;
};

VtoP_SPARKS vertex_shader_sparks(const VS_INPUT_SPARKS IN, COMPILETIME_BOOL enableParaboloidBasis)
{
	VtoP_SPARKS OUT;
	OUT.position = world_position(enableParaboloidBasis, IN.position);
	OUT.color = IN.color;
	OUT.color.xyz *= 2;

	OUT.tex = IN.tex;

	return OUT; 
}

float4 pixel_shader_sparks(const VtoP_SPARKS IN) : COLOR
{
	float4 diffuse = tex2D(DIFFUSE_SAMPLER, IN.tex);
	// using color add blending, so make the sparks colour modulated by diffuse .w
	float4 result = diffuse * IN.color * diffuse.w;

	result.xyz = CompressColourSpace(result.xyz);
	return result;
}

VtoP_SPARKS vs_sparks_no_para(const VS_INPUT_SPARKS IN)
{
	return vertex_shader_sparks(IN, PARABOLOIDBASIS_FALSE);
}


#endif
</file>
 </files>
 <tool name="Compiler">
  <defines>
   <define name="SHADER_DEBUG" value="" />
   <define name="PLAT_XENON" value="" />
   <define name="SHADERMODEL_3_0" value="" />
  </defines>
  <arguments>
   <argument name="/Zi" value="false" />
   <argument name="/Vd" value="false" />
   <argument name="/Xu0_deprecated" value="false" />
   <argument name="/Odu_deprecated" value="false" />
   <argument name="/XOd_" value="false" />
   <argument name="/XOu" value="false" />
   <argument name="/Xmaxtempreg" value="0" />
   <argument name="PsSampBase" value="0" />
   <argument name="PsSampCount" value="0" />
   <argument name="VsSampBase" value="0" />
   <argument name="VsSampCount" value="0" />
   <argument name="VsInstCount" value="0" />
   <argument name="PsInstCount" value="0" />
   <argument name="/Od" value="false" />
   <argument name="/Zpr" value="true" />
   <argument name="/Zpc" value="false" />
   <argument name="/Gpp" value="false" />
   <argument name="/Op" value="false" />
   <argument name="/Gfa" value="false" />
   <argument name="/Gfp" value="true" />
   <argument name="/XZc:zeroInit" value="false" />
   <argument name="/XVe" value="false" />
   <argument name="/Xbe:3-" value="false" />
   <argument name="/Xbe:1-" value="false" />
   <argument name="/XQInomaskedexports" value="false" />
   <argument name="/XOautoz" value="true" />
  </arguments>
 </tool>
 <shaders>
  <shader entrypoint="ps_debug_normalmap" target="ps_3_0" ZPass="0" pdbHint="4e4a0000-4010c8b3-95ad38c5">
   <constanttable>
    <constant register="s0">
     <type name="DIFFUSE_SAMPLER" class="object" type="sampler2D" />
    </constant>
    <constant register="s1">
     <type name="NORMALMAP_SAMPLER" class="object" type="sampler2D" />
    </constant>
   </constanttable>
   <sourcemap>
    <statement pc="1" file="0" line="492" scope="-1" lastinstruction="0" />
    <statement pc="2" file="0" line="494" scope="-1" lastinstruction="0" />
    <statement pc="3" file="1" line="91" scope="-1" lastinstruction="0" />
    <statement pc="4" file="1" line="91" scope="-1" lastinstruction="0" />
    <statement pc="5" file="0" line="497" scope="-1" lastinstruction="0" />
   </sourcemap>
   <variables>
   </variables>
   <variableDebugInfo>
   </variableDebugInfo>
   <scopes>
   </scopes>
   <funcInfo>
    <function id="0" name="ps_debug_normalmap" retID="297">
     <parameter id="296" />
    </function>
    <function id="1" name="ps_particles" retID="294">
     <parameter id="293" />
    </function>
    <function id="2" name="pixel_shader_flares" retID="290">
     <parameter id="289" />
    </function>
    <function id="3" name="vs_flares_no_para" retID="288">
     <parameter id="287" />
    </function>
    <function id="4" name="vertex_shader_flares" retID="278">
     <parameter id="276" />
     <parameter id="277" />
    </function>
    <function id="5" name="pixel_shader_particles_implementation" retID="266">
     <parameter id="264" />
     <parameter id="265" />
    </function>
    <function id="6" name="ps_watersplash" retID="261">
     <parameter id="260" />
    </function>
    <function id="7" name="vs_watersplash" retID="233">
     <parameter id="232" />
    </function>
    <function id="8" name="vs_particles" retID="208">
     <parameter id="207" />
    </function>
    <function id="9" name="ComputeFuzzz" retID="197">
     <parameter id="196" />
    </function>
    <function id="10" name="vs_sparks_no_para" retID="195">
     <parameter id="194" />
    </function>
    <function id="11" name="pixel_shader_sparks" retID="191">
     <parameter id="190" />
    </function>
    <function id="12" name="vertex_shader_sparks" retID="188">
     <parameter id="186" />
     <parameter id="187" />
    </function>
    <function id="13" name="BuildRotate" retID="135">
     <parameter id="133" />
     <parameter id="134" />
    </function>
    <function id="14" name="DecodeRGBE8" retID="124">
     <parameter id="123" />
    </function>
    <function id="15" name="EncodeRGBE8" retID="119">
     <parameter id="118" />
    </function>
    <function id="16" name="DeCompressTextCoords" retID="117">
     <parameter id="116" />
    </function>
    <function id="17" name="DeCompressColourSpace" retID="115">
     <parameter id="114" />
    </function>
    <function id="18" name="CompressColourSpace" retID="113">
     <parameter id="112" />
    </function>
    <function id="19" name="world_position" retID="111">
     <parameter id="108" />
     <parameter id="109" />
     <parameter id="110" />
    </function>
    <function id="20" name="world_position" retID="107">
     <parameter id="105" />
     <parameter id="106" />
    </function>
    <function id="21" name="world_cartesian_position" retID="103">
     <parameter id="102" />
    </function>
    <function id="22" name="world_paraboloid_position" retID="99">
     <parameter id="98" />
    </function>
    <function id="23" name="EnvironmentMapLookup_Paraboloid_MipLevel" retID="92">
     <parameter id="88" />
     <parameter id="89" />
     <parameter id="90" />
     <parameter id="91" />
    </function>
    <function id="24" name="EnvironmentMapLookup_Paraboloid" retID="82">
     <parameter id="79" />
     <parameter id="80" />
     <parameter id="81" />
    </function>
    <function id="25" name="EnvironmentMapLookup_ParaboloidUVUV" retID="74">
     <parameter id="73" />
    </function>
    <function id="26" name="EnvironmentMapLookup_Paraboloid" retID="65">
     <parameter id="62" />
     <parameter id="63" />
     <parameter id="64" />
    </function>
    <function id="27" name="EnvironmentMapLookup_Cube" retID="60">
     <parameter id="57" />
     <parameter id="58" />
     <parameter id="59" />
    </function>
    <function id="28" name="EnvironmentMapLookup_Plane" retID="54">
     <parameter id="51" />
     <parameter id="52" />
     <parameter id="53" />
    </function>
    <function id="29" name="valueOf" retID="22">
     <parameter id="21" />
    </function>
    <function id="30" name="bias" retID="20">
     <parameter id="18" />
     <parameter id="19" />
    </function>
    <function id="31" name="NormalTransform" retID="16">
     <parameter id="14" />
     <parameter id="15" />
    </function>
    <function id="32" name="GetLocalEyePos" retID="13">
     <parameter id="12" />
    </function>
    <function id="33" name="GetLocalLightDir" retID="11">
     <parameter id="10" />
    </function>
   </funcInfo>
   <funcEntryExitInfo>
   </funcEntryExitInfo>
   <VfetchInfo>
   </VfetchInfo>
   <InterpolatorInfo>
    <Interpolator Register="0" Semantic="0x50" Mask="xy" />
   </InterpolatorInfo>
   <LiteralFloats>
    <Float Register="252" value0="0" value1="0" value2="0" value3="0" />
    <Float Register="253" value0="0" value1="0" value2="0" value3="0" />
    <Float Register="254" value0="0" value1="0" value2="0" value3="0" />
    <Float Register="255" value0="1" value1="0.5" value2="0" value3="0" />
   </LiteralFloats>
   <LiteralInts>
   </LiteralInts>
   <LiteralBools>
   </LiteralBools>
  </shader>
 </shaders>
</shader-pdb>
