<?xml version="1.0" encoding="utf-8"?>
<shader-pdb pdbHint="4e4a0000-3a4422fd-9db0f30c" version="6995">
 <files>
  <file id="0" path="C:\D1017315-LeigpzigDemo\MW2\Branches\LeipzigDemo\Speed\Indep\Src\Render\effects\worldbonetransparency.bbfx" time="01c8f9c0-c77698b6">//--------------------------------------------------------------------------------------
// World Bone Effect
//--------------------------------------------------------------------------------------

#include "worldbone.h"

#define SHADOW_SAMPLER DIFFUSE_SAMPLER

/*
Usage Information: This is used by the pipe, and by MAX
STARTUSAGE: 
materialDescription: This is a worldbone material.
isTranslucent: true
texture: TEXCOORD0, MAP1, diffuse, DIFFUSE_SAMPLER, "diffuse map", "Location8/content/maps/DFT/DFT_Diffuse_01_D.tga" 
texture: TEXCOORD0, MAP1, ambient, AMBIENT_SAMPLER, "ambient map", "Location8/content/maps/DFT/DFT_Black_01_S.tga"
texture: TEXCOORD0, MAP1, normal, NORMAL_SAMPLER, "normal map", "Location8/content/maps/DFT/DFT_Normal_01_N.tga"
texture: TEXCOORD0, MAP1, specular, SPECULAR_SAMPLER, "specular map", "Location8/content/maps/DFT/DFT_Gray_01_B.tga"
texture: TEXCOORD0, MAP1, displacement, DISPLACEMENT_SAMPLER, "displacement map", "Location8/content/maps/DFT/DFT_Gray_01_B.tga"
texture: TEXCOORD0, MAP1, reflection, REFLECTION_SAMPLER, "reflection map", "Location8/content/maps/DFT/DFT_Gray_01_B.tga"
PLATFORM: XENON
stream0: POSITION0, half4
stream0: TEXCOORD0, half2
stream0: BLENDWEIGHT0, ubyte4n
stream0: BLENDINDICES0, ubyte4
stream0: NORMAL0, dec4n
stream0: TANGENT0, dec4n
PLATFORM: PS3
stream0: POSITION0, half4
stream0: TEXCOORD0, half2
stream0: BLENDWEIGHT0, half4
stream0: BLENDINDICES0, half4
stream0: NORMAL0, cmp3n
stream0: TANGENT0, cmp3n
PLATFORM: PC
stream0: POSITION0, float4
stream0: TEXCOORD0, short2n_32x
stream0: BLENDWEIGHT0, ubyte4n
stream0: BLENDINDICES0, ubyte4
stream0: NORMAL0, short4n
stream0: TANGENT0, short4n
ENDUSAGE
*/

const string MaterialClass = "WorldBone";

technique WorldBone
&lt;
	string viewtag = "ANY";
	string lostag = "ANY";
&gt;
{
    pass P0 
	&lt; 
		string depthstencil = "default"; 
		string blend = "charalpha";
		string rasterizer = "double_sided"; 
	&gt;
    {   
        VertexShader = compile vs_3_0 VertexMain();
        PixelShader  = compile ps_3_0 NIS_PS();
    }
}

#if defined( PLAT_PS3 ) || defined( PLAT_XENON )
#include "mw2_shadow_skinnedAlpha_csm.h"
#endif

</file>
  <file id="1" path="C:\D1017315-LeigpzigDemo\MW2\Branches\LeipzigDemo\Speed\Indep\Src\Render\effects\common\worldbone.h" time="01c8f9c0-c76f71a8">
#ifndef	WORLDBONE_H
#define WORLDBONE_H

//--------------------------------------------------------------------------------------
// INCLUDES
//--------------------------------------------------------------------------------------

#include "global.h"
#include "gamma.h"

//--------------------------------------------------------------------------------------
// INSTANCE CONSTANTS
//--------------------------------------------------------------------------------------

float4x4 camBlendMatrices[16] : REG_camBlendMatrices;

//--------------------------------------------------------------------------------------
// Global Parameters
//--------------------------------------------------------------------------------------

float4	cvWorldSunColour		: REG_cvWorldSunColour;		
float4	cvWorldAmbientColour	: REG_cvWorldAmbientColour;	
float4	cvWorldSpecularColour	: REG_cvWorldSpecularColour;		

//float	cfCurrentTime;

//--------------------------------------------------------------------------------------
// MATERIAL CONSTANTS
//--------------------------------------------------------------------------------------

float	specular_intensity; //scale applied to spec maps to match maya's view
float4	character_lighting_intensity; //diffuse, hemi, bounce, ??
float4	reflect_mask;
float4	reflection_values;
float4	reflection_mask_u_offset_v;
float4	AO_factors;
float4	fresnel_values;
float4	test_numbers;

#include "shadowmap_fx_def.h"

//--------------------------------------------------------------------------------------
// SAMPLERS
//--------------------------------------------------------------------------------------

sampler2D DIFFUSE_SAMPLER
&lt;
	string TextureSamplerState = "DIFFUSE_SAMPLER";
&gt;;

sampler2D AMBIENT_SAMPLER
&lt;
	string TextureSamplerState = "DIFFUSE_SAMPLER";
&gt;;

sampler2D NORMAL_SAMPLER
&lt;
	string TextureSamplerState = "NORMALMAP_SAMPLER";
&gt;;

sampler2D SPECULAR_SAMPLER
&lt;
	string TextureSamplerState = "SPECULAR_SAMPLER";
&gt;;

sampler2D DISPLACEMENT_SAMPLER
&lt;
	string TextureSamplerState = "DISPLACEMENT_SAMPLER";
&gt;;

sampler2D REFLECTION_SAMPLER
&lt;
	string TextureSamplerState = "DISPLACEMENT_SAMPLER";
&gt;;


//--------------------------------------------------------------------------------------
// STRUCTURES
//--------------------------------------------------------------------------------------

struct VS_INPUT
{
	float3 Position		: POSITION;
	float3 Normal		: NORMAL;
	float2 TexCoord		: TEXCOORD;
	float3 Weight		: BLENDWEIGHT;
	float3 Index		: BLENDINDICES;
	float3 Tangent		: TANGENT;
};

struct VS_OUTPUT
{
	float4 Position		: POSITION;
	float2 TexCoord		: TEXCOORD0;
	float4 Normal		: TEXCOORD1;
	float3 owPos		: TEXCOORD3;
	float4 Tangent		: TEXCOORD4;
	float4 ShadowTex	: TEXCOORD5;
};

struct PS_INPUT
{
	float4 Position		: POSITION;
	float2 TexCoord		: TEXCOORD0;
	float4 Normal		: TEXCOORD1;
	float3 owPos		: TEXCOORD3;
	float4 Tangent		: TEXCOORD4;
	float4 ShadowTex	: TEXCOORD5;
#ifdef PLAT_PS3
	float  Facing		: FACE;
#else 
#if defined(SHADERMODEL_3_0)
	float  Facing		: VFACE;
#endif 
#endif 
};

//--------------------------------------------------------------------------------------
// Vertex Shader
//--------------------------------------------------------------------------------------

VS_OUTPUT NIS_VS( const VS_INPUT IN, COMPILETIME_BOOL enableParaboloidBasis = false )
{
	VS_OUTPUT OUT;
	float4x4 skinMatrix = 
		camBlendMatrices[IN.Index.x] * IN.Weight.x +
		camBlendMatrices[IN.Index.y] * IN.Weight.y +
		camBlendMatrices[IN.Index.z] * IN.Weight.z;

	float4 pos  = mul( float4( IN.Position.xyz, 1 ), skinMatrix );
	float4 normal = mul( float4( IN.Normal.xyz, 0 ), skinMatrix );
	float4 tangent = mul( float4( IN.Tangent.xyz, 0 ), skinMatrix );

	OUT.Position = world_position( enableParaboloidBasis, pos );
	OUT.TexCoord.xy = DeCompressTextCoords(IN.TexCoord.xy);
	OUT.Normal = normal;
	OUT.owPos = pos.xyz;
	OUT.Tangent = tangent;
	OUT.ShadowTex = VertexShadowTex( pos, false );
	return OUT;
}

VS_OUTPUT VertexMain(const VS_INPUT IN)
{
	return NIS_VS(IN);
}

//--------------------------------------------------------------------------------------
// Pixel Shader
//--------------------------------------------------------------------------------------

void Light_Directional(in float3 LightDir, in float3 Normal, in float3 LightColour, in float3 EyeReflect, in float SpecPower, inout float3 Kd, inout float3 Ks)
{
	float nDotL = dot(LightDir,Normal);
	Kd += saturate(nDotL) * LightColour;

	float SpecVal = dot(EyeReflect,LightDir);
	SpecVal = saturate(SpecVal);
	SpecVal = pow(SpecVal, SpecPower);
	Ks += SpecVal * LightColour;
}

float Fresnel_Falloff(float3 Eye, float3 Normal, float fresnelBias, float fresnelPower)
{
	return saturate(fresnelBias + (1 - fresnelBias * pow( 1 - dot(Eye,Normal), fresnelPower)));
}


//===========================================================================

float4 NIS_PS( const PS_INPUT IN /*, int shadowDetail = ShadowShaderDetail_HIGH*/ ) : COLOR0
{
	float4 OUT = float4( 0, 0, 0, 0 );

	
	float4 diffuseMap	= tex2D( DIFFUSE_SAMPLER, IN.TexCoord.xy );	
	diffuseMap.rgb = GammaExpand( diffuseMap.rgb );
	float3 normalMap = tex2D( NORMAL_SAMPLER, IN.TexCoord.xy ).xyz;	
	float3 aspMap = tex2D( SPECULAR_SAMPLER, IN.TexCoord.xy ).xyz;
	float3 aspMapExpand = GammaExpand( aspMap.rgb );
	aspMapExpand.g *= specular_intensity;
	float SpecPow = (aspMap.b + 0.01 ) * 130.0;  // MAYA MATCH	
	
#if defined(SHADERMODEL_3_0)
	float2 refMaskUV = float2(
		((IN.TexCoord.x * reflection_mask_u_offset_v.r) + reflection_mask_u_offset_v.b) ,
		((IN.TexCoord.y * reflection_mask_u_offset_v.g) + reflection_mask_u_offset_v.a));
	// Calculate this based on a material mask (vector)
	float3 reflectionMaskMap = tex2D( AMBIENT_SAMPLER, refMaskUV ).xyz;
	reflectionMaskMap = GammaExpand( reflectionMaskMap.rgb );
	float reflectMask = dot( reflectionMaskMap, reflect_mask.xyz );
	reflectMask += reflection_values.w;


	float3x3 tangentToObject;
	tangentToObject[0] = normalize( IN.Tangent.xyz ).xyz;
	tangentToObject[2] = normalize( IN.Normal.xyz ).xyz;
	tangentToObject[1] = cross(tangentToObject[2], tangentToObject[0]) * IN.Tangent.w;

	// Convert between unsigned and signed normal map data
	float3 normal;
	normal.xy = ( normalMap.xy - 0.5 ) * 2;
	normal.z = sqrt( 1 - dot( normal.xy, normal.xy ) );	

	// Place normal in world space (tangent-&gt;object-&gt;world)
	normal.xyz = mul( normal.xyz, tangentToObject );
	normal.xyz = mul( (float3x3)cmWorldMatTranspose, normal.xyz ).xyz;
	normal.xyz = normalize( normal.xyz );
	normal *= IN.Facing; //reverse the normal on backfaces for proper lighting
#else
	float3 normal = normalize(IN.Normal);
#endif
	
	//eye vector &amp; reflected eye vector (in world space)
	float3 eyeVec = mul( (IN.owPos.xyz - cvLocalEyePos.xyz ), (float3x3)cmWorldMat).xyz;
	eyeVec = normalize(eyeVec);
	float3 eyeReflect = reflect( eyeVec, normal );

	//
	// LIGHTING
	//
	float3 Kd = float3(0.0, 0.0, 0.0);
	float3 Ka = float3(0.0, 0.0, 0.0);
	float3 Ks = float3(0.0, 0.0, 0.0);
	
	//TODO: Geo Occlusion?? (stop norms from bending light around edges)

#if defined(SHADERMODEL_3_0)
	//shadow the sun
	float shadow = DoCSM3Shadow( IN.ShadowTex); //this returns a shadow in the range 0.2 - 1.0 (why 0.2? don't ask me!)

	/*
	shadow = (shadow - 0.2) * 1.25; //make it 0-1 for simplicity
	//shadow re-range
	float newMin = 0.15;
	shadow =  (((shadow - 0.2) / 0.8) * (1.0 - newMin) )+ newMin;
	*/
#endif

	//dir light from sun
	float3 SunColour = cvWorldSunColour.xyz;
	float3 SunDir	= normalize( mul( (float3x3)cmWorldMatTranspose, cvLocalLightVec.xyz ).xyz );

#if defined(SHADERMODEL_3_0)
	Light_Directional (SunDir, normal, (SunColour * character_lighting_intensity.x), eyeReflect, SpecPow, Kd, Ks);
	Kd *= shadow; 
	Ks *= shadow;
#else
	Light_Directional (SunDir, normal, (SunColour * character_lighting_intensity.x), normal, SpecPow, Kd, Ks);
#endif
	//Ks *= 1.0 - ((1.0 - shadow) * 0.5);

	/*
	//TEST: drop the sun a bit, and make it a negative light (this gets rid of some flatness if the sun is behind the viewers back)
	float3 SunNegDir = normalize( lerp( float3( 0.0, 0.0, -1.0 ), SunDir, 0.5 ) );
	float SunNeg = saturate (dot (normal, SunNegDir));
	Kd += test_numbers.x * -1.0 * SunNeg;
	Kd = max(0.0,Kd);
	*/
	
	//add ambient (SH??)
	
	//hemisphere light
	float hemi = saturate ( (normal.z + 1.0) * 0.5) * character_lighting_intensity.y;
	//TODO: add custom tint here (material param)
	Ka +=  hemi * 0.25;
	//TODO: need spec from this too!
	float skyWrap = 0.9;
#if defined(SHADERMODEL_3_0)
	float skySpec = dot(eyeReflect,float3(0,0,1));
	skySpec = (skySpec+skyWrap)/(1.0 + skyWrap);
	Ks += pow(saturate(skySpec),SpecPow) * float3(0.7,0.7,1.0) * 0.2;
	//Ka +=  hemi * cvWorldAmbientColour;

	//fake sunbounce
	float3 SunBounceDir = normalize( lerp( float3( 0.0, 0.0, -1.0 ), -SunDir, 0.6 ) );
	float SunFill =  saturate( ( dot( normal, SunBounceDir ) + 0.5 ) / 1.5 );
	Ka += SunFill * lerp(cvWorldAmbientColour.rgb,SunColour,character_lighting_intensity.w) * character_lighting_intensity.z;
	
	//add any other lights
		//very dim sun in same dir for amb areas?
		//cop car lights?

	//
	// Reflection code
	//
	float3 reflection	= eyeReflect.xyz;
	float CharBlurFactor = reflection_values.z;
	float4 envmap_sample = EnvironmentMapLookup_Character(reflection.xyz);
#endif

	//scale &amp; bias reflections: try to cut off the darks &amp; increase the brights a bit
	//envmap_sample = max(reflection_values.z - ( (reflection_values.z - envmap_sample) * reflection_values.w),0.0);


	//glacing spec?
#if defined(SHADERMODEL_3_0)
	float fresnel =  Fresnel_Falloff(eyeVec, normal, fresnel_values.x, fresnel_values.y);
#else
	float fresnel = 1.0;
#endif

	float AO_diff =lerp(1.0, aspMap.r, AO_factors.x);
	float AO_amb  =lerp(1.0, aspMap.r, AO_factors.y);
	float AO_spec =lerp(1.0, aspMap.r, AO_factors.z);
	float AO_refl =lerp(1.0, aspMap.r, AO_factors.w);
	
	float grey  = dot(diffuseMap.rgb, float3(0.299, 0.587, 0.114));
	diffuseMap = lerp(diffuseMap,grey, test_numbers.y);

	
	OUT.rgb = ( (Kd * AO_diff) +(Ka * AO_amb) ) * diffuseMap.rgb +
									//this is for strengthening glancing specular
				(Ks * AO_spec)  *  (aspMapExpand.g * ((fresnel * fresnel_values.z) + 1) );

#if defined(SHADERMODEL_3_0)
	//TODO: fresnel the reflection  * (1.0+(fresnel*3.7));// + (fresnel * 0.1);
	float3 env = envmap_sample.rgb * reflectMask * (AO_refl) * 2.0;
	OUT.rgb += env; 
#endif
			

	//TEST VIEWS
	//float fresnel2 =  Fresnel_Falloff(eyeVec, normal, fresnel_values.x, fresnel_values.y);
	//float SunAnti = (dot(SunDir, normal) - fresnel_values.z) / (fresnel_values.w - fresnel_values.z));
	//OUT.rgb = saturate(fresnel2 * SunAnti * normal.z);

	//OUT.rgb = ( (Kd * AO_diff) +(Ka * AO_amb) );//cvWorldAmbientColour;
	//OUT.rgb = saturate(fresnel2 * SunAnti * normal.z);
	//OUT.rgb = envmap_sample;
	//OUT.rgb = saturate(dot(normal,SunDir));
	//OUT.rgb = (IN.Facing * 0.5) + 0.5;

	// *********************************************************************************8
	//DEBUG VIEWS
	// *********************************************************************************8

	//Show Colour
	//OUT.rgb = diffuseMap;

	//Show Normal Map (sort of)
	//OUT.rgb = float3(normalMap.x,normalMap.y, normalMap.z+0.5);

	//Show AO
	//OUT.rgb = aspMapExpand.rrr;

	//Show SpecMap
	//OUT.rgb = aspMapExpand.ggg;

	//Show Spec Power
	//OUT.rgb = aspMapExpand.bbb;

	//Show Reflection Map
	//OUT.rgb = reflectMask;

	//Show Full Reflection (chrome)
	//OUT.rgb = envmap_sample;

	//Show Masked Reflection (no falloff)
	//OUT.rgb = envmap_sample * reflectMask;

	//Grey Lit Normals
	//OUT.rgb = saturate ( dot(normal,SunDir)) ;

	//Grey Lit Geometry
	//OUT.rgb = saturate ( dot(IN.Normal.xyz,SunDir)) ;

	//Tangents
	//OUT.rgb = (IN.Tangent.xyz * 0.5) + 0.5;

	//Normals
	//OUT.rgb = (IN.Normal.xyz * 0.5) + 0.5;

	//Show Alpha
	//OUT.rgb = diffuseMap.a;
	
	//Show Lighting
	//OUT.rgb = Kd + Ka;

	//Show Lighting with AO
	//OUT.rgb = ( (Kd * AO_diff) +(Ka * AO_amb) );
	
		//Show Lighting with AO &amp; Spec &amp; Reflection
	//OUT.rgb = ( (Kd * AO_diff) +(Ka * AO_amb) )+ (Ks * AO_spec)  *  (aspMapExpand.g * ((fresnel * fresnel_values.z) + 1) ) + env;

	//Show Spec Lighting Only (overdriven to see it better)
	//OUT.rgb = float3(0.3, 0.3, 0.3) + (4.0 * ((Ks * AO_spec)  *  (aspMapExpand.g * ((fresnel * fresnel_values.z) + 1) )));
	
	//OILY - Hard-coded spec to validate eye vector &amp; normals
	//OUT.rgb=pow(saturate(dot(eyeReflect ,SunDir)),20);
	
	//test eye vec2
	//OUT.rgb = pow(1.0- saturate(dot(-eyeVec, normal)) ,10);

	OUT.rgb = GammaCompress( OUT.rgb );////

#if defined(SHADERMODEL_3_0)
	float envBrightness = dot(env, float3(0.3, 0.4, 0.3));
	//TODO: fresnel the trans
	OUT.a =saturate(diffuseMap.a + (8.0 * envBrightness));// + (fresnel*0.7);
#else
	OUT.a =diffuseMap.a;
#endif

	//FORCE NO ALPHA
	//OUT.a = 1.0;

	

#if defined(ENVMAP_TESTING)
	OUT.xyz = OUT.xyz * 0.00001 + envmap_sample.rgb;
#endif

	OUT.rgb	= CompressColourSpace(OUT.xyz);

	return OUT;
}

#endif
</file>
  <file id="2" path="C:\D1017315-LeigpzigDemo\MW2\Branches\LeipzigDemo\Speed\Xenon\Src\Render\effects\global.h" time="01c8f9c5-4d521c5e">#ifndef GLOBAL_H
#define GLOBAL_H

#include "registermap.h"   
#include "global_common.h"

// Defined out for the Xbox360 - only needed on the PC
#define DECLARE_TEXTURE(texture)	
#define ASSIGN_TEXTURE(texture)	
#define DECLARE_MINFILTER(default_filter)			 MINFILTER = default_filter;
#define DECLARE_MAGFILTER(default_filter)			 MAGFILTER = default_filter;
#define DECLARE_MIPFILTER(default_filter)			 MIPFILTER = default_filter;

#ifndef SHADERMODEL_3_0
    #define SHADERMODEL_3_0
#endif

/////////////////////////////////////////////////////////////////////////////////////////

//--------------------------------------------------------------------------------------
// Global Parameters - platform specific.
//--------------------------------------------------------------------------------------
float4		cvScreenOffset			: REG_cvScreenOffset;
float4		cvVertexPowerBrightness : REG_cvVertexPowerBrightness;

#include "reflection.h"

float4 world_cartesian_position( float4 screen_pos )
{
 	float4 p = mul(screen_pos, cmWorldViewProj);  
    return p;
}

float4 world_position(COMPILETIME_BOOL enableParaboloidBasis, float4 modelspace_position)
{
	if (enableParaboloidBasis)
	{
		return world_paraboloid_position(modelspace_position);
	}
	else
	{
		return world_cartesian_position(modelspace_position);
	}
}

float4 world_position(float4 modelspace_position, COMPILETIME_BOOL enableParaboloidBasis, COMPILETIME_BOOL instanceRender)
{
	if(instanceRender)
	{
		// Want to do a compile time assert here as Instance rendering isn't supported on Xenon at the moment.
	}

	if (enableParaboloidBasis)
	{
		return world_paraboloid_position(modelspace_position);
	}
	else
	{
		return world_cartesian_position(modelspace_position);
	}
}

/////////////////////////////////////////////////////////////////////////////////////////
// HDR Colour Space compression
/////////////////////////////////////////////////////////////////////////////////////////

/* 
This function maps input 'c' to a curve. 

It is a really important curve!
It provides the following transformation on the input color:

1. Compresses the dynamic range from 0-2 to 0-1 (which is expressable in 8 bits)
2. Adds a 'filmic' shoulder to the high end that prevents the color from "slamming
into the ceiling", which is a class digital problem with a limited number of bits.

Jim Hejl
07/12/2008
*/
float3 CompressColourSpace(float3 c)
{
    // filmic response, without implicit gamma
    // GammaCompress() is active, and does a sqrt() after this response curve
    return (1-(pow(1-(c*.5),2)));
    /*
    float3 c0, c1;
    c0 = max(c*.75,1);
    c1 = min(1,c*.75);
    c1 = 1-pow(c1,2);

    return (c0-c1)*1.3333; 
    */

    //return (c*.5);//(c*0.5);//saturate((c/(c+0.1812))*1.0906); 
} 

float3 DeCompressColourSpace(float3 c)
{
    // no curve removal at this time
    return (c);
    
    //(c*2);//(c/((1-c)+0.1))*0.2;
}

half2 DeCompressTextCoords(half2 textCoords)
{
	return textCoords;
}

/////////////////////////////////////////////////////////////////////////////////////////
// RGBE8 Encoding/Decoding
// The RGBE8 format stores a mantissa per color channel and a shared exponent 
// stored in alpha. Since the exponent is shared, it's computed based on the
// highest intensity color component. The resulting color is RGB * 2^Alpha,
// which scales the data across a logarithmic scale.
/////////////////////////////////////////////////////////////////////////////////////////

float4 EncodeRGBE8( in float3 rgb )	  
{
	float4 vEncoded;

    // Determine the largest color component
	float maxComponent = max( max(rgb.r, rgb.g), rgb.b );
	
	// Round to the nearest integer exponent
	float fExp = ceil( log2(maxComponent) );

    // Divide the components by the shared exponent
	vEncoded.rgb = rgb / exp2(fExp);
	
	// Store the shared exponent in the alpha channel
	vEncoded.a = (fExp + 128) / 255;

	return vEncoded;
}

/////////////////////////////////////////////////////////////////////////////////////////

float3 DecodeRGBE8( in float4 rgbe )
{
	float3 vDecoded;

    // Retrieve the shared exponent
	float fExp = rgbe.a * 255 - 128;
	
	// Multiply through the color components
	vDecoded = rgbe.rgb * exp2(fExp);
	
	return vDecoded;
}

/////////////////////////////////////////////////////////////////////////////////////////
#endif
</file>
  <file id="3" path="C:\D1017315-LeigpzigDemo\MW2\Branches\LeipzigDemo\Speed\Xenon\Src\Render\effects\registermap.h" time="01c8f9c5-4d521c5e">
// ------------------------------------------------------------------------------------------------------------------------------------------

#define CONSTANT_RESERVED_DO_NOT_USE			(0)		/* 4 vectors [c0,c3] */

// ------------------------------------------------------------------------------------------------------------------------------------------

#define REG_RESERVED_DO_NOT_USE				register(c0)	/* 4 vectors [c0,c3] */

#define REG_cmWorldMat						register(c4)	/* 4 vectors [c0,c3] */
#define REG_cmWorldMatTranspose				register(c8)	/* 4 vectors [c4,c7] */
#define REG_cmWorldView						register(c12)	/* 4 vectors [c8,c11] */
#define REG_cmShadowMapWVP					register(c16)	/* 4 vectors [c12,c15] */
#define REG_cmLightWVP						register(c20)	/* 4 vectors [c16,c19] */
#define REG_cmWorldViewProj					register(c24)	/* 4 vectors [c20,c23] */
#define REG_cmPrevWorldViewProj				register(c28)	/* 4 vectors [c24,c27] */
#define REG_cvLocalEyePos					register(c32)	/* 1 vecotr	 [c32] */
#define REG_cvLocalLightVec					register(c33)	/* 1 vecotr	 [c33] */
#define REG_cfSkyDomeRotation				register(c34)	/* 1 vecotr	 [c34] */

#define REG_cmLocalColourMatrix				register(c36)	/* 4 vectors [c36,c39] */
#define REG_cmLocalDirectionMatrix			register(c40)	/* 4 vectors [c40,c43] */
#define REG_cmLocalPositionMatrix			register(c44)	/* 4 vectors [c44,c47] */
#define REG_cavHarmonicCoeff				register(c48)	/* 10 floats, 3 vectors, 1 pad vector [48,51] */

#define REG_cvWorldSpecularColour			register(c49)
#define REG_cvWorldSunColour				register(c50)
#define REG_cvWorldAmbientColour			register(c51)

#define REG_camBlendMatrices				register(c52)	/* 64 vectors [c52,c115] */
#define REG_cavWorldHeadlightDirection		register(c68)	/* 2 vectors [c68,c69] */
#define REG_cavWorldHeadlightPosition		register(c70)	/* 2 vectors [c70,c71] */
#define REG_cavWorldHeadlightUpDirection	register(c72)	/* 2 vectors [c72,c73] */

#define REG_cvSHColour						register(c51)

// available: [c82,c115] (but would alias cavPcaWeightsR and cavPcaWeightsG)
// PCA/UCap parameters (ucap.fx, water.fx)
#define REG_cafPcaMean					register(c81)	/* 1 vector */
#define REG_cavPcaWeightsR				register(c82)	/* 22 vectors [c82,c103] */
#define REG_cavPcaWeightsG				register(c104)	/* 22 vectors [c104,c125] */
#define REG_cavPcaWeightsB				register(c126)	/* 22 vectors [c126,c147] */
#define REG_cavPcaWeightsX				register(c148)	/* 8 vectors [c148,c155] */
#define REG_cavPcaWeightsY				register(c156)	/* 8 vectors [c156,c163] */
#define REG_cavPcaWeightsZ				register(c164)	/* 8 vectors [c164,c171] */
#define REG_cavPcaWeightsNX				register(c172)	/* 8 vectors [c172,c179] */
#define REG_cavPcaWeightsNY				register(c180)	/* 8 vectors [c180,c187] */
#define REG_cavPcaWeightsNZ				register(c188)	/* 8 vectors [c188,c195] */
#define REG_cavFeatureHeights			register(c196)	/* 1 vector */

// The following parameters alias cavPcaWeightsG:
#define REG_cfMipMapBias				register(c116)
#define REG_cfBrightness				register(c117)
#define REG_cfSurfaceReflection			register(c118)
#define REG_cfRainIntensity				register(c119)
#define REG_cfSpecularPower				register(c120)
#define REG_cfMetallicScale				register(c121)
#define REG_cfEnvmapPullAmount			register(c122)
#define REG_cfEnvmapPower				register(c123)
#define REG_PAD2						register(c125)

// The following parameters alias cavPcaWeightsB:
#define REG_cfCombinedBrightness		register(c126)
#define REG_cvVisualEffectFadeColour	register(c127)	/* also aliases cfSkyAlphaTag */
#define REG_cfSkyAlphaTag				register(c127)	/* also aliases cvVisualEffectFadeColour */
#define REG_cfShadowVolumeOffset		register(c128)
#define REG_cfRVMWorldBrightness		register(c129)
#define REG_cfDesaturation				register(c130)
#define REG_cfSplitScreenUVScale		register(c132)
#define REG_cfColourCubeFilterBlend		register(c133)
#define REG_cfTimeTicker				register(c134)
#define REG_cfMiddleGray				register(c135)
#define REG_cfBrightPassThreshold		register(c136)
#ifndef SMOKE_XENON
#define REG_cvScreenOffset				register(c137)
#else
#define REG_cvScreenOffset				register(c63)
#endif
#define REG_cvFog_Br_Plus_Bm			register(c138)
#define REG_cvFog_One_Over_BrBm			register(c139)
#define REG_cvFog_Const_1				register(c140)
#define REG_cvFog_Const_2				register(c141)
#define REG_cvFog_Const_3				register(c142)
#define REG_cvAmbientColour				register(c143)
#define REG_cvShadowParams0				register(c144)
#define REG_cvShadowParams1				register(c145)

// The following parameters alias cavPcaWeightsX:
#define REG_cvDiffuseColour				register(c148)
#define REG_cvSpecularColour			register(c149)
// available: [c150,c155] (but would alias cavPcaWeightsX)

// The following parameters alias cavPcaWeightsY:
#define REG_cvShadowColour				register(c156)
#define REG_cvTextureOffset				register(c161)
#define REG_cvLocalCenter				register(c162)
#define REG_cvTreeParams				register(c163)

// The following parameters alias cavPcaWeightsZ:
#define REG_cvBaseAlphaRef				register(c164)
#define REG_cvCloudIntensity			register(c165)
#define REG_cvLocalLightPos				register(c166)
#define REG_cvPixelizationScale			register(c167)
#define REG_cvGrassColour				register(c169)

// The following parameters alias cavPcaWeightsNX:
#define REG_cvDepthOfFieldParams		register(c172)	/* aliases cavFeatureHeights */
#define REG_cvBlurParams				register(c173)

// The following parameters alias cavPcaWeightsNX and cavPcaWeightsNY:
#define REG_cavSampleOffsetWeights		register(c174)	// 16 vectors
#define REG_cvSmokeParams				register(c175)
#define REG_cmShadowMapVP				register(c180)	// 4 vectors
#define REG_cmShadowMapBiasMatrix		register(c184)	// 4 vectors
#ifndef SMOKE_XENON
#define REG_cmCSMTransform				register(c188)	// 4 vectors
#else
#define REG_cmCSMTransform				register(c50)	// 4 vectors
#endif
#define REG_cvTint						register(c190)
#define REG_PAD0						register(c191)	/* free space!! */


// bbfx material paramters for world

#define	REG_cfAmbientIntensityW			register(c191)  /* reuse these registers for shaders that need 2 */
#define	REG_cfDiffuseIntensityW			register(c192)  /* reuse these registers for shaders that need 2 */
#define	REG_cfSpecularIntensityW		register(c193)  /* reuse these registers for shaders that need 2 */
#define	REG_cfSpecularPowerW			register(c194)  /* reuse these registers for shaders that need 2 */
#define	REG_cfReflectionIntensityW		register(c195)
#define	REG_cfSpecularBackscatterW		register(c196)  /* reuse these registers for shaders that need 2 */
#define	REG_cfLod_blend_beginW			register(c197) 
#define	REG_cfLod_blend_biasW			register(c198) 
#define	REG_cfIlluminationIntensityW	register(c199) 
#define	REG_cvSpecularColourW			register(c200)
#define	REG_cfReflectionLightingW		register(c201)
#define	REG_cfReflectionLtgPwrW			register(c202)
#define	REG_cfDiffuseIntensity1W		register(c192)
#define	REG_cfSpecularIntensity1W		register(c193)
#define	REG_cfSpecularPower1W			register(c194)
//#define	REG_cfReflectionIntensityW		register(c195)  /* note this is just here to let Andy know I need it in this group */
#define	REG_cfDiffuseIntensity2W		register(c196)
#define	REG_cfSpecularIntensity2W		register(c197)
#define	REG_cfSpecularPower2W			register(c198)
#define REG_cfDirtAmbientIntensityW		register(c191)
#define REG_cfDirtBackscatterW			register(c192)
#define REG_cfDirtSpecularIntensity		register(c193)
#define REG_cfDirtSpecularPowerW		register(c194)
#define REG_cfGrassAmbientIntensityW	register(c195)
#define REG_cfGrassBackscatterW			register(c196)
#define REG_cfGrassSpecularIntensityW	register(c197)
#define REG_cfGrassSpecularPowerW		register(c198)
#define REG_cfRockAmbientIntensityW		register(c199)
#define REG_cfRockSpecularIntensityW	register(c200)
#define REG_cfRockSpecularPowerW		register(c201)
#define	REG_cvDirtSpecularColorW		register(c202)
#define	REG_cvGrassSpecularColorW		register(c203)
#define	REG_cvRockSpecularColorW		register(c204)
#define	REG_cfDebugDiffuseTexW			register(c250)  
#define	REG_cfDebugSpecularTexW			register(c251) 
#define	REG_cfDebugNormalTexW			register(c252) 
#define	REG_cfDebugNormalScaleW			register(c253)
#define REG_cvFogValue					register(c206)
#define REG_cvFogColour					register(c207)
#define REG_cfSkyFogFalloff				register(c208)
#define REG_cfLightMapVertColBlend		register(c209)
#define REG_cvLightColour				register(c210)
#define REG_cvLightPosition				register(c211)
#define REG_cvFrustumVector				register(c212)
#define REG_cvSunHazeColour				register(c213)
#define REG_cfVSMEnabled				register(c214)
#ifndef SMOKE_XENON
#define REG_cvVertexPowerBrightness		register(c216)
#else
#define REG_cvVertexPowerBrightness		register(c62)
#endif
#define REG_cfDrawDepthOfField			register(c230)
#define REG_cfFogEnable					register(c240)
#define REG_CSMTransform				register(c249) /* 4 vectors [c249,c252] */

// Light Material Registers - alias REG_cavLightDirections

#define REG_cvDiffuseMin				register(c228)
#define REG_cvDiffuseRange				register(c229)
#define REG_cvEnvmapMin					register(c230)
#define REG_cvEnvmapRange				register(c231)
#define REG_cvSpecularMin				register(c232)
#define REG_cvSpecularRange				register(c233)
#define REG_cvSpecular1Min				register(c234)
#define REG_cvSpecular1Range			register(c235)
#define REG_cvPowers					register(c236)
#define REG_cvClampAndScales			register(c237)
#define REG_cvFlakes					register(c238)
#define REG_cvVinylScales				register(c239)

#define	REG_cvGradientParams            register(c240)
#define	REG_cvGradientColour            register(c241)
#define	REG_cvGradientColourE           register(c242)
#define	REG_ScreenRez                  	register(c243)
#define REG_cfScaleUVs					register(c244)
#define REG_cvVisualTreatmentParams		register(c245)
#define REG_cvVisualTreatmentParams2	register(c246)
#define REG_cvVisualTreatmentParams3	register(c247)
#define REG_cfCurrentTime				register(c248)


// for the constants heavy shader instancing
// 4 vectors, c4 to c7

#define REG_cvInstanceWorldSunColour		register(c61)
#define REG_cfSmokeLightInfluence			register(c60)
#define REG_cvInstanceWorldSunPosition		register(c59)
#define REG_cvInstanceData					register(c58)	// 4 Vectors
#define REG_cmInstanceVP					register(c54)
#define REG_cvInstanceWorldAmbientColour	register(c11)
#define REG_cvInstancedFogColour			register(c12)
#define REG_cvInstancedFogValue				register(c13)
#define REG_cvInstanceArray					register(c64)


// Aliased With Light Materials ...


</file>
  <file id="4" path="C:\D1017315-LeigpzigDemo\MW2\Branches\LeipzigDemo\Speed\Indep\Src\Render\effects\common\global_common.h" time="01c8f9c0-c76d0f4e">#ifndef __GLOBAL_COMMON_H__
#define __GLOBAL_COMMON_H__

//--------------------------------------------------------------------------------------
// Defines
//--------------------------------------------------------------------------------------
#define COMPILETIME_BOOL		uniform bool
#define PARABOLOIDBASIS_TRUE	true
#define PARABOLOIDBASIS_FALSE	false
#define INSTANCE_RENDER_TRUE	true
#define INSTANCE_RENDER_FALSE	false

//--------------------------------------------------------------------------------------
// Global Parameters
//--------------------------------------------------------------------------------------
float4x4	cmWorldViewProj		: REG_cmWorldViewProj;
float4x4	cmWorldView			: REG_cmWorldView;

float4	cvLocalLightVec			: REG_cvLocalLightVec;  // LOCALLIGHTDIRVECTOR;
float4	cvLocalEyePos			: REG_cvLocalEyePos;    // LOCALEYEPOS;

float4x4 cmWorldMat				: REG_cmWorldMat;				// WORLD
float4x4 cmWorldMatTranspose	: REG_cmWorldMatTranspose;

// Used to pass the world matrix transpose to the Shader when instance rendering.
float4x4	mWorldTransposeInstance;

// Used to pass the world matrix to the Shader when instance rendering.
float4x4	mWorldInstance;

// Used to pass the light and eye vectors to the PixelShader when instance rendering.
float3		vLocalLightDir;
float4		vLocalEyePos;

//--------------------------------------------------------------------------------------
// Functions - Used by instance rendering to deal with model space variables.
//--------------------------------------------------------------------------------------
float3 GetLocalLightDir(COMPILETIME_BOOL instanceRendering)
{
	if(!instanceRendering)
	{
		return cvLocalLightVec.xyz;
	}
	else
	{
		return vLocalLightDir;
	}
}

float3 GetLocalEyePos(COMPILETIME_BOOL instanceRendering)
{
	if(!instanceRendering)
	{
		return cvLocalEyePos.xyz;
	}
	else
	{
		return vLocalEyePos.xyz;
	}
}

//--------------------------------------------------------------------------------------
// Functions - Used by many shaders.
//--------------------------------------------------------------------------------------

inline float3 NormalTransform(float3 n, COMPILETIME_BOOL instanceRendering)
{
    /*
    Handle Mirror

    Object "mirroring" is a negative scale factor in the world matrix
    Mirror can be detected by crossing the RIGHT and OUT basis vectors
    If the UP vector points down (negative), we have a mirror transform.
    This is handled by applying the sign of the UP vector to the normal
    */

    float3 up;

    // Compile time branch
    if(instanceRendering)
    {
        up = cross(mWorldInstance[0].xyz,mWorldInstance[1].xyz );
    }
    else
    {
        up = cross(cmWorldMat[0].xyz,cmWorldMat[1].xyz );
    }
    n.xyz *= sign(up.z);

    return (n);
}

float bias(float b, float x)
{
return pow(x, log(b)/log(0.5));
}

//keep these around in case I need them
/*
float gain(float g, float x)
{
	float retVal	=  x &lt; 0.5 ? bias(1-g, 2*x)/2 : 1 - bias(1-g, 2 - 2*x)/2;
	return retVal;
}

float3 mix( float3 color0, float3 color1, float value )
{
return (1-value)*color0 + value*color1; 
}
*/

float valueOf(float3 colorVal)
{

	float minVal	= min(min(colorVal.r, colorVal.g), colorVal.b);
	float maxVal	= max(max(colorVal.r, colorVal.g), colorVal.b);
	float delta		= maxVal - minVal;

	float value		= maxVal;

	float satVal	= maxVal &gt; 0 ? delta/maxVal: 0;
	return value;
}

/*
float saturationOf(float3 colorVal)
{

	float minVal	= min(min(colorVal.r, colorVal.g), colorVal.b);
	float maxVal	= max(max(colorVal.r, colorVal.g), colorVal.b);
	float delta		= maxVal - minVal;

	float value		= maxVal;

	float satVal	= maxVal &gt; 0 ? delta/maxVal: 0;
	return satVal;
}

float hueOf(float3 colorVal)
{

	float minVal	= min(min(colorVal.r, colorVal.g), colorVal.b);
	float maxVal	= max(max(colorVal.r, colorVal.g), colorVal.b);
	float delta		= maxVal - minVal;

	float value		= maxVal;

	float satVal	= maxVal &gt; 0 ? delta/maxVal: 0;


	float hue		= colorVal.r == maxVal ? ((colorVal.g - colorVal.b)/delta ): 0;  // between yellow and magenta
	hue				= colorVal.g == maxVal ? (2 + (colorVal.b - colorVal.r)/delta) : hue; // between cyan and yellow
	hue				= colorVal.b == maxVal ? (4 + (colorVal.r - colorVal.g)/delta) : hue; // between magenta and cyan
	hue				*= 60;
	hue				= hue &lt; 0 ? hue + 360 : hue;

	return hue;
}
*/ 
#endif //__GLOBAL_COMMON_H__

</file>
  <file id="5" path="C:\D1017315-LeigpzigDemo\MW2\Branches\LeipzigDemo\Speed\Indep\Src\Render\effects\common\reflection.h" time="01c8f9c0-c76f71a8">// Copyright (C) Electronic Arts Canada Inc. 2008. All rights reserved.

#if !defined(_REFLECTION_H_)
#define _REFLECTION_H_

//#define ENVMAP_TESTING

float4x4 cmEnvMapParaboloid0Matrix;
float4x4 cmEnvMapParaboloid1Matrix;
float4x4 cmEnvMapParaboloid2Matrix;
float4x4 cmEnvMapCube0Matrix;
float4x4 cmEnvMapCube1Matrix;
float4x4 cmEnvMapCube2Matrix;
float4x4 cmEnvMapPlane0Matrix;

samplerCUBE ENVMAP_CUBE0_SAMPLER 
&lt;
string TextureSamplerState = "ENVMAP_SAMPLER";
&gt;;

samplerCUBE ENVMAP_CUBE1_SAMPLER 
&lt;
string TextureSamplerState = "ENVMAP_SAMPLER";
&gt;;

samplerCUBE ENVMAP_CUBE2_SAMPLER 
&lt;
string TextureSamplerState = "ENVMAP_SAMPLER";
&gt;;

sampler2D ENVMAP_PARABOLOID0_SAMPLER
&lt;
string TextureSamplerState = "ENVMAP_SAMPLER";
&gt;;

sampler2D ENVMAP_PARABOLOID1_SAMPLER
&lt;
string TextureSamplerState = "ENVMAP_SAMPLER";
&gt;;

sampler2D ENVMAP_PARABOLOID2_SAMPLER
&lt;
string TextureSamplerState = "ENVMAP_SAMPLER";
&gt;;

sampler2D ENVMAP_PLANE0_SAMPLER
&lt;
string TextureSamplerState = "ENVMAP_SAMPLER";
&gt;;

#define PARABOLOID_BASIS_FARPLANE 500.f
#define PARABOLOID_BASIS_NEARPLANE 0.1f

#define EnvironmentMapLookup_Car(xxworldspacereflectionvector, mipmaplevel)		EnvironmentMapLookup_Paraboloid_MipLevel(xxworldspacereflectionvector, ENVMAP_PARABOLOID1_SAMPLER, (float3x3)cmEnvMapParaboloid1Matrix, mipmaplevel)
//#define EnvironmentMapLookup_Car(xxworldspacereflectionvector)				EnvironmentMapLookup_Cube(xxworldspacereflectionvector, ENVMAP_CUBE0_SAMPLER, (float3x3)cmEnvMapCube0Matrix)
#define EnvironmentMapLookup_World(xxworldspacereflectionvector)				EnvironmentMapLookup_Paraboloid(xxworldspacereflectionvector, ENVMAP_PARABOLOID0_SAMPLER, (float3x3)cmEnvMapParaboloid0Matrix)
//#define EnvironmentMapLookup_World(xxworldspacereflectionvector)				EnvironmentMapLookup_Paraboloid_MipLevel(xxworldspacereflectionvector, ENVMAP_PARABOLOID0_SAMPLER, (float3x3)cmEnvMapParaboloid0Matrix, kEnvmipMipLevel)
//#define EnvironmentMapLookup_World(xxworldspacereflectionvector)				EnvironmentMapLookup_Cube(xxworldspacereflectionvector, ENVMAP_CUBE1_SAMPLER, (float3x3)cmEnvMapCube1Matrix)
#define EnvironmentMapLookup_Building(xxworldspacereflectionvector)				EnvironmentMapLookup_Paraboloid(xxworldspacereflectionvector, ENVMAP_PARABOLOID2_SAMPLER, (float3x3)cmEnvMapParaboloid2Matrix)
//#define EnvironmentMapLookup_Building(xxworldspacereflectionvector)			EnvironmentMapLookup_Cube(xxworldspacereflectionvector, ENVMAP_CUBE2_SAMPLER, (float3x3)cmEnvMapCube2Matrix)
#define EnvironmentMapLookup_Character(xxworldspacereflectionvector)			EnvironmentMapLookup_Paraboloid_MipLevel(xxworldspacereflectionvector, ENVMAP_PARABOLOID2_SAMPLER, (float3x3)cmEnvMapParaboloid2Matrix, CharBlurFactor)
//#define EnvironmentMapLookup_Character(xxworldspacereflectionvector)			EnvironmentMapLookup_Cube(xxworldspacereflectionvector, ENVMAP_CUBE2_SAMPLER, (float3x3)cmEnvMapCube2Matrix)
#define EnvironmentMapLookup_CarHeavenFloor(xxworldspacereflectionvector)		EnvironmentMapLookup_Plane(xxworldspacereflectionvector, ENVMAP_PLANE0_SAMPLER, cmEnvMapPlane0Matrix)

// Abstract the position basis for the reflection view so we can swap between
// paraboloid and standard cartesian basis without client code needing to know.
float4 EnvironmentMapLookup_Plane(float4 worldPosition, sampler2D envmapPlane, float4x4 world2envmap)
{
	float4 finalReflect = mul(worldPosition + float4(0, 0, 0.0, 0), world2envmap);
	//finalReflect.xyz *= float3(1, 1, 1);
	finalReflect.y = 1 - (finalReflect.y + 1.09);
	float4 texcoords = float4(((finalReflect.xyz/finalReflect.www) + 1.0f) * 0.5f, 1);
	return tex2Dproj(envmapPlane, texcoords);
}

float4 EnvironmentMapLookup_Cube(float3 reflectionVector, samplerCUBE envmapCube, float3x3 world2envmap)
{
	reflectionVector.y = -reflectionVector.y;
	float4 envMapSample = texCUBE(envmapCube, mul(reflectionVector, world2envmap).xyz);

	return envMapSample;
}

float4 EnvironmentMapLookup_Paraboloid(float3 reflectionVector, samplerCUBE envmapCube, float3x3 world2envmap)
{
	float3 pbmsReflection = mul(reflectionVector, world2envmap);
	
	float scale = 1.4;
	float3 refFront;
	refFront.x = (pbmsReflection.x / (1*(1 + pbmsReflection.z))) + 0.0;
	refFront.y = (-pbmsReflection.y / (1*(1 + pbmsReflection.z))) + 0.0;
	refFront.z = 1 / scale;

	float3 refBack;
	refBack.x = (pbmsReflection.x / (1*(1 - pbmsReflection.z))) + 0.0;
	refBack.y = ((pbmsReflection.y / (1*(1 - pbmsReflection.z))) + 0.0);
	refBack.z = -1 / scale;

	float4	envmap_sampleF = texCUBE(envmapCube, refFront.xyz);
	float4	envmap_sampleB = texCUBE(envmapCube, refBack.xyz);

	float4	envmap_sample = 0; //float4(1, 1, 1, 1);
	
	// Branch is acceptable as this is effectively debugging code
	if (pbmsReflection.z &gt; 0)
	{
		envmap_sample = envmap_sampleF;
	}
	else
	{
		envmap_sample = envmap_sampleB;
	}
	return envmap_sample;
}

float4 EnvironmentMapLookup_ParaboloidUVUV(float3 pbmsReflection)
{
	float2 refFront;
	refFront.x = (pbmsReflection.x / (1*(1 + pbmsReflection.z))) + 0.0;
	refFront.y = (pbmsReflection.y / (1*(1 + pbmsReflection.z))) + 0.0;

	float2 refBack;
	refBack.x = (pbmsReflection.x / (1*(1 - pbmsReflection.z))) + 0.0;
	refBack.y = ((pbmsReflection.y / (1*(1 - pbmsReflection.z))) + 0.0);

	float2	envmap_sampleF = float2(0.5, 0.25) * refFront.xy + float2(0.5, 0.25);
	float2	envmap_sampleB = float2(0.5, 0.25) * refBack.xy + float2(0.5, 0.75);

	envmap_sampleB.x = 1 - envmap_sampleB.x;
	return float4(envmap_sampleF, envmap_sampleB);
}

float4 EnvironmentMapLookup_Paraboloid(float3 reflectionVector, sampler2D envmapParaboloid, float3x3 world2envmap)
{
	float3 pbmsReflection = mul(reflectionVector, world2envmap);

	float4 uvuv = EnvironmentMapLookup_ParaboloidUVUV(reflectionVector);
	float4	envmap_sampleF = tex2D(envmapParaboloid, uvuv.xy);
	float4	envmap_sampleB = tex2D(envmapParaboloid, uvuv.zw);

	float4	envmap_sample = 0;
	if (pbmsReflection.z &gt; 0)
	{
		envmap_sample = envmap_sampleF;
	}
	else
	{
		envmap_sample = envmap_sampleB;
	}
	return envmap_sample;
}

float4 EnvironmentMapLookup_Paraboloid_MipLevel(float3 reflectionVector, sampler2D envmapParaboloid, float3x3 world2envmap, float miplevel)
{
	float3 pbmsReflection = mul(reflectionVector, world2envmap);

	float4 uvuv = EnvironmentMapLookup_ParaboloidUVUV(reflectionVector);

#if defined(SHADERMODEL_3_0)
	float4	envmap_sampleF = tex2Dlod(envmapParaboloid, float4(uvuv.xy, 0.f, miplevel));
	float4	envmap_sampleB = tex2Dlod(envmapParaboloid, float4(uvuv.zw, 0.f, miplevel));
#elif defined(SHADERMODEL_2_0)
	float4	envmap_sampleF = tex2D(envmapParaboloid, uvuv.xy);
	float4	envmap_sampleB = tex2D(envmapParaboloid, uvuv.zw);
#else
#error Unsupported shadermodel
#endif

	float4	envmap_sample = 0;
	if (pbmsReflection.z &gt; 0)
	{
		envmap_sample = envmap_sampleF;
	}
	else
	{
		envmap_sample = envmap_sampleB;
	}
	return envmap_sample;
}

float4 world_paraboloid_position( float4 modelspace_position )
{
 	float4 p = mul(modelspace_position, cmWorldView);
#if defined(ENABLE_SCREENOFFSET)
	p.xy += cvScreenOffset.xy * p.w;
#endif // ENABLE_SCREENOFFSET
	p /= p.w;
	float L = length(p.xyz);
	p /= L;
	p.z += 1;
	p.x = p.x / p.z;
	p.y = -p.y / p.z;
	p.z = (L - PARABOLOID_BASIS_NEARPLANE) / (PARABOLOID_BASIS_FARPLANE - PARABOLOID_BASIS_NEARPLANE);
	p.w = 1;
    return p;
}

#endif	// _REFLECTION_H_
</file>
  <file id="6" path="C:\D1017315-LeigpzigDemo\MW2\Branches\LeipzigDemo\Speed\Indep\Src\Render\effects\common\gamma.h" time="01c8f9c0-c76d0f4e">#ifndef _GAMMA_H
#define _GAMMA_H

//////////////////////////////////////////////////////
// DEFINES
//////////////////////////////////////////////////////

//////////////////////////////////////////////////////
// GLOBAL FUNCTIONS
//////////////////////////////////////////////////////

// Linear to Gamma 2.0 transform (c^0.5)
inline float3 GammaCompress( float3 c ) 
{ 
    return sqrt(c);  
}

// Gamma 2.0 to linear transform (c*c)
inline float3 GammaExpand( float3 c )   
{ 
    return c * c;
}

#endif //_GAMMA_H
</file>
  <file id="7" path="C:\D1017315-LeigpzigDemo\MW2\Branches\LeipzigDemo\Speed\Xenon\Src\Render\effects\shadowmap_fx_def.h" time="01c8f9c5-4d521c5e">
#ifndef _SHADOWMAP_FX_DEF_H
#define _SHADOWMAP_FX_DEF_H

/////////////////////////////////////////////////////////////////////////////////////////
#include "shadowenum.h"
#include "depth.h"

shared float4x4	cmShadowMapWVP			: REG_cmShadowMapWVP;
shared float4x4	cmShadowMapVP			: REG_cmShadowMapVP;
shared float4x4 cmLightWVP				: REG_cmLightWVP;
shared float4x4 cmShadowMapBiasMatrix	: REG_cmShadowMapBiasMatrix;

shared float4 cvAmbientColour			: REG_cvAmbientColour;
shared float4 cvShadowParams0			: REG_cvShadowParams0;
shared float4 cvShadowParams1			: REG_cvShadowParams1;

shared float cfVSMEnabled				: REG_cfVSMEnabled;


#define	cfShadowMapAlphaMin cvShadowParams0.x
#define	cfShadowMapBiasA	cvShadowParams0.y
#define	cfShadowMapBiasB	cvShadowParams0.z
#define	cfVSMEpsilon		cvShadowParams0.w

#define	ShadowMapNdotLBiasOffset	cvShadowParams1.x
#define	ShadowMapNdotLBiasScale		cvShadowParams1.y
#define	ShadowMapVSMThreshold		cvShadowParams1.z
#define	ShadowMapWingMirrorBias		cvShadowParams1.w

#define SHADOWMAP_C1				0.2f
#define SHADOWMAP_C2				0.1f

#define BIAS 0.00005f

//#define cfShadowMapScaleY	cvShadowParams1.w


//#define ENABLE_SHADOW_STENCIL_MASK
//#define SHADOW_LOD_ON

#define FADE_SHADOW

/////////////////////////////////////////////////////////////////////////////////////////

sampler2D SHADOWMAP_SAMPLER
&lt;
	string TextureSamplerState = "SHADOWMAP_SAMPLER";
&gt;;

/////////////////////////////////////////////////////////////////////////////////////////

float CalculateShadowFade(float4 shadowTex)
{
	float2 edgeAttenuation = shadowTex.xy / shadowTex.w;
	edgeAttenuation = saturate(1 - pow(edgeAttenuation,4));
	return (1 - edgeAttenuation.x * edgeAttenuation.y);
}

/////////////////////////////////////////////////////////////////////////////////////////

float4 VertexShadowTex( float4 v_position, COMPILETIME_BOOL instanceRender )
{
	v_position.w = 1.0f;
	if(instanceRender)
	{
		return mul( v_position, mWorldInstance );
	}
	else
	{
		return mul( v_position, cmWorldMat );
	}
}

float4 VertexShadowTexOptimized( const float4 v_position, float ndotl, out float shadow_fade, COMPILETIME_BOOL instanceRender)
{
	shadow_fade =  1.0f;
	return VertexShadowTex( v_position, instanceRender );
}

/////////////////////////////////////////////////////////////////////////////////////////

float4 Tex2DOffset( sampler2D ss, float2 uv, float2 offset )
{
	float4 result;
	float offsetx = offset.x;
	float offsety = offset.y;

	asm
	{
		tfetch2D result, uv, ss, OffsetX=offsetx, OffsetY=offsety
	};

	return result;
}

float4x4 cmCSM0ShadowMapWVP;
float4x4 cmCSM1ShadowMapWVP;
float4x4 cmCSM2ShadowMapWVP;

const float kShadowMapWidth = 1024.0f;
const float kShadowMapHeight = 1024.0f;

inline float GetEdgeContrast(float2 shadowUV)
{
    #define EDGE_RADIUS 2.0

    float4 tap;
    float2 ret;

    asm
    {
        tfetch2D tap.x___, shadowUV, SHADOWMAP_SAMPLER, OffsetX =-EDGE_RADIUS, OffsetY = EDGE_RADIUS
        tfetch2D tap._x__, shadowUV, SHADOWMAP_SAMPLER, OffsetX = EDGE_RADIUS, OffsetY = EDGE_RADIUS
        tfetch2D tap.__x_, shadowUV, SHADOWMAP_SAMPLER, OffsetX =-EDGE_RADIUS, OffsetY =-EDGE_RADIUS
        tfetch2D tap.___x, shadowUV, SHADOWMAP_SAMPLER, OffsetX = EDGE_RADIUS, OffsetY =-EDGE_RADIUS
    };

    // edge detect
    float edge;

    edge=0;
    edge += abs(tap.x-tap.y);
    edge += abs(tap.z-tap.w);
    edge += abs(tap.x-tap.w);
    edge += abs(tap.y-tap.z);

    return (edge);
}

inline float SamplePCF(float2 shadowUV, float lightDepth)
{
    float4 pcfSamples0;
    float4 pcfSamples1;
    float  ret;

    asm
    {
        tfetch2D pcfSamples0.x___, shadowUV, SHADOWMAP_SAMPLER, OffsetX = -0.5, OffsetY = -0.5
        tfetch2D pcfSamples0._x__, shadowUV, SHADOWMAP_SAMPLER, OffsetX =  0.5, OffsetY = -0.5
        tfetch2D pcfSamples0.__x_, shadowUV, SHADOWMAP_SAMPLER, OffsetX = -0.5, OffsetY =  0.5
        tfetch2D pcfSamples0.___x, shadowUV, SHADOWMAP_SAMPLER, OffsetX =  0.5, OffsetY =  0.5
        tfetch2D pcfSamples1.x___, shadowUV, SHADOWMAP_SAMPLER, OffsetX = -1.5, OffsetY = -1.0
        tfetch2D pcfSamples1._x__, shadowUV, SHADOWMAP_SAMPLER, OffsetX =  1.5, OffsetY = -1.0
        tfetch2D pcfSamples1.__x_, shadowUV, SHADOWMAP_SAMPLER, OffsetX = -1.5, OffsetY =  1.0
        tfetch2D pcfSamples1.___x, shadowUV, SHADOWMAP_SAMPLER, OffsetX =  1.5, OffsetY =  1.0
    };

    pcfSamples0.xyzw = lightDepth &gt; pcfSamples0.xyzw;
    pcfSamples1.xyzw = lightDepth &gt; pcfSamples1.xyzw;
    ret  = dot(pcfSamples0, .125); // .125 to normalize the 8 samples
    ret += dot(pcfSamples1, .125); 

    return (ret);
}

float DoCSM3ShadowPCF( const float4 shadow_pos )
{
    const float EDGE = 0.99;

    float4 shadowTex0 = mul( shadow_pos, cmCSM0ShadowMapWVP );
    float4 shadowTex1 = mul( shadow_pos, cmCSM1ShadowMapWVP );
    float4 shadowTex2 = mul( shadow_pos, cmCSM2ShadowMapWVP );

    float4 shadowTex;
    float2 shadowUV;

    if ( abs(shadowTex2.x) &gt; EDGE || abs(shadowTex2.y) &gt; EDGE )
    {
        return 1.0f;
    }
    else if ( abs(shadowTex0.x) &lt; EDGE &amp;&amp; abs(shadowTex0.y) &lt; EDGE )
    {
        shadowTex = shadowTex0;
        shadowUV = float2(shadowTex.x/6.0f + (1.0f/6.0f),-shadowTex.y*0.5 + 0.5);
    }
    else if ( abs(shadowTex1.x) &lt; EDGE &amp;&amp; abs(shadowTex1.y) &lt; EDGE )
    {
        shadowTex = shadowTex1;
        shadowUV = float2(shadowTex.x/6.0f + (3.0f/6.0f),-shadowTex.y*0.5 + 0.5);
    }
    else //will pass when ( abs(shadowTex2.x) &lt; EDGE &amp;&amp; abs(shadowTex2.y) &lt; EDGE )
    {
        shadowTex = shadowTex2;
        shadowUV = float2(shadowTex.x/6.0f + (5.0f/6.0f),-shadowTex.y*0.5 + 0.5);
    }

    float lightDepth = shadowTex.z;
    float ret;
    float4 ctr;

    asm
    {
        // tap center
        tfetch2D ctr.x___, shadowUV, SHADOWMAP_SAMPLER
    };

#if defined (DEPTH_HIZ)
    // this places the light depth into inverted depth space
    // doing this avoids inverting all the depth taps
    lightDepth = 1-lightDepth;
#endif

    // add bias to remove acne
    lightDepth = lightDepth + BIAS;

    // solve center depth test
    float centerResult = lightDepth &gt; ctr.x;

    // edge detect
    if (GetEdgeContrast(shadowUV) &lt; .5)
    {
        // not on an edge, filtering not needed: early out 
        // return center result
        return centerResult;
    }

    // pcf sample
    ret = SamplePCF(shadowUV,lightDepth);

    // accumulate center sample
    ret += centerResult;

    // ret = (pcf + center) / 2
    return (ret/2);
}

#if 0
//Save for reference
float DoCSM3Shadow const float4 shadow_pos )
{
    /* texcorrd math removed ... the interesting stuff is the bilinear weighting below */
	float4 pcfSamples;

	asm
	{
		tfetch2D pcfSamples.x___, shadowUV, SHADOWMAP_SAMPLER, OffsetX = -0.5, OffsetY = -0.5
		tfetch2D pcfSamples._x__, shadowUV, SHADOWMAP_SAMPLER, OffsetX =  0.5, OffsetY = -0.5
		tfetch2D pcfSamples.__x_, shadowUV, SHADOWMAP_SAMPLER, OffsetX = -0.5, OffsetY =  0.5
		tfetch2D pcfSamples.___x, shadowUV, SHADOWMAP_SAMPLER, OffsetX =  0.5, OffsetY =  0.5
	};

	pcfSamples = step( pcfSamples, lightDepth - 0.0000f );

	shadowTex.xy = ( shadowTex.xy + 1.0f ) * 512.0f + 0.5f;

	float2 modfUnused;
	shadowTex.xy = modf( shadowTex.xy, modfUnused );

	float shadowBot = lerp( pcfSamples.x, pcfSamples.y, shadowTex.x );
	float shadowTop = lerp( pcfSamples.z, pcfSamples.w, shadowTex.x );

	float shadow = lerp( shadowTop, shadowBot, shadowTex.y );

	shadow = 1.0 - shadow;

	return 0.2f + ( 0.8f * shadow );
}
#endif //SAVE FOR REFERENCE

float DoShadow( const float4 shadow_pos, const float ndotl, int shadowDetail = ShadowShaderDetail_HIGH )
{
	float shadowmap = 0;
    
    shadowmap=DoCSM3ShadowPCF(shadow_pos);
    //shadowmap=DoCSM3Shadow_ORIG(shadow_pos);
	float adjusted_ndotl = max(SHADOWMAP_C2, saturate(ndotl));
	return lerp(0.0f, shadowmap, saturate(adjusted_ndotl - SHADOWMAP_C2)/(SHADOWMAP_C1 - SHADOWMAP_C2));
}

float DoShadowPCF( const float4 shadow_pos, const float ndotl, float shadow_fade, int shadowDetail = ShadowShaderDetail_HIGH)
{
	float shadowmap = 0;
    
    shadowmap=DoCSM3ShadowPCF(shadow_pos);
    //shadowmap=DoCSM3Shadow_ORIG(shadow_pos);
	float adjusted_ndotl = max(SHADOWMAP_C2, saturate(ndotl));
	return lerp(0.0f, shadowmap, saturate(adjusted_ndotl - SHADOWMAP_C2)/(SHADOWMAP_C1 - SHADOWMAP_C2));
}

float DoShadowOptimized( const float4 shadowTex, const float ndotl, float shadow_fade, int shadowDetail = ShadowShaderDetail_HIGH)
{
	return DoShadowPCF( shadowTex, ndotl, shadowDetail);
}

/////////////////////////////////////////////////////////////////////////////////////////


float DoShadowCar( const float4 shadowTex, const float ndotl, int shadowDetail = ShadowShaderDetail_HIGH )
{
	return DoShadow(shadowTex, ndotl, shadowDetail);
}

// handle legacy call (deprecated)
#define DoCSM3Shadow DoCSM3ShadowPCF

#endif
</file>
  <file id="8" path="C:\D1017315-LeigpzigDemo\MW2\Branches\LeipzigDemo\Speed\Indep\Src\Render\effects\common\shadowenum.h" time="01c8f9c0-c76f71a8">#ifndef SHADOWENUM_H
#define SHADOWENUM_H

// these numbers should match up with the enumerations in ShadowShaderDetail in eEffect.hpp
// (should make these in a header thats included by both fxc and the game compiler)
static const int ShadowShaderDetail_OFF = 0;
static const int ShadowShaderDetail_LOW = 1;
static const int ShadowShaderDetail_MEDIUM = 2;
static const int ShadowShaderDetail_HIGH = 3;

#endif
</file>
  <file id="9" path="C:\D1017315-LeigpzigDemo\MW2\Branches\LeipzigDemo\Speed\Xenon\Src\Render\effects\depth.h" time="01c8f9c5-4d521c5e">#ifndef DEPTH_H
#define DEPTH_H

// XBOX 360

#define DEPTH_HIZ

//--------------------------------------------------------------------------------------
// GLOBAL FUNCTIONS
//--------------------------------------------------------------------------------------

// at (uv), returns homogeneous depth, where 0 is the near plane, and 1 is the far plane
float DepthSampleDepth(sampler2D s, float2 uv)
{
    float depth = tex2D( s, uv.xy ).x;

#if defined (DEPTH_HIZ)
    // inverted depth transform
    depth = 1-depth;
#endif

    return (depth);
}

#endif // DEPTH_H
</file>
  <file id="10" path="C:\D1017315-LeigpzigDemo\MW2\Branches\LeipzigDemo\Speed\Indep\Src\Render\effects\common\mw2_shadow_skinnedAlpha_csm.h" time="01c8f9c0-c76d0f4e">
#ifndef _MW2_SHADOW_SKINNEDALPHA_CSM_H
#define _MW2_SHADOW_SKINNEDALPHA_CSM_H

/********************************************************************
	file:		mw2_shadow_skinnedalpha_csm.h
	purpose:	techniques for CSM shadows
*********************************************************************/

#ifndef SHADOW_SAMPLER
#error You must define SHADOW_SAMPLER before including this file
#endif

float4x4 cmCSMTransform : REG_cmCSMTransform;

//
//  Skinned characters
//

struct VsInputAlphaCSM
{
	float3 Position		: POSITION;
	float2 TexCoord		: TEXCOORD;
	float3 Weight		: BLENDWEIGHT;
	float3 Index		: BLENDINDICES;
};

struct PsInputAlphaCSM
{
	float4 Position		: POSITION;
	float2 TexCoord		: TEXCOORD0;
};

PsInputAlphaCSM VS_S_ACSM( const VsInputAlphaCSM IN)
{
	PsInputAlphaCSM OUT;
	float4x4 skinMatrix = 
		camBlendMatrices[IN.Index.x] * IN.Weight.x +
		camBlendMatrices[IN.Index.y] * IN.Weight.y +
		camBlendMatrices[IN.Index.z] * IN.Weight.z;

	float4 pos  = mul( float4( IN.Position.xyz, 1 ), skinMatrix );
	pos = mul( pos, cmCSMTransform );
	OUT.Position = pos;
	OUT.TexCoord.xy = DeCompressTextCoords(IN.TexCoord.xy);
	return OUT;
}

float4 PS_A_CSM( const PsInputAlphaCSM IN ) : COLOR0
{
	float4 v_tex = tex2D( SHADOW_SAMPLER, IN.TexCoord );
	clip( v_tex.w - 0.2 );

	return 0.0f;
}


/////////////////////////////////////////////////////////////////////////////////////////

technique RenderSkinnedAlphaCSM
&lt;
	string viewtag = "SHADOW";
	string lostag = "ANY";
&gt;
{
	pass p0
	&lt;
		string depthstencil = "default";
		string blend = "default";
		string rasterizer = "default";
	&gt;
	{
		VertexShader = compile vs_2_0 VS_S_ACSM();
		PixelShader  = compile ps_3_0 PS_A_CSM();
	}
}

#endif
</file>
 </files>
 <tool name="Compiler">
  <defines>
   <define name="SHADER_DEBUG" value="" />
   <define name="PLAT_XENON" value="" />
   <define name="SHADERMODEL_3_0" value="" />
  </defines>
  <arguments>
   <argument name="/Zi" value="false" />
   <argument name="/Vd" value="false" />
   <argument name="/Xu0_deprecated" value="false" />
   <argument name="/Odu_deprecated" value="false" />
   <argument name="/XOd_" value="false" />
   <argument name="/XOu" value="false" />
   <argument name="/Xmaxtempreg" value="0" />
   <argument name="PsSampBase" value="0" />
   <argument name="PsSampCount" value="0" />
   <argument name="VsSampBase" value="0" />
   <argument name="VsSampCount" value="0" />
   <argument name="VsInstCount" value="0" />
   <argument name="PsInstCount" value="0" />
   <argument name="/Od" value="false" />
   <argument name="/Zpr" value="true" />
   <argument name="/Zpc" value="false" />
   <argument name="/Gpp" value="false" />
   <argument name="/Op" value="false" />
   <argument name="/Gfa" value="false" />
   <argument name="/Gfp" value="true" />
   <argument name="/XZc:zeroInit" value="false" />
   <argument name="/XVe" value="false" />
   <argument name="/Xbe:3-" value="false" />
   <argument name="/Xbe:1-" value="false" />
   <argument name="/XQInomaskedexports" value="false" />
   <argument name="/XOautoz" value="false" />
  </arguments>
 </tool>
 <shaders>
  <shader entrypoint="VS_S_ACSM" target="vs_3_0" ZPass="0" pdbHint="4e4a0000-3a4422fd-9db0f30c">
   <constanttable>
    <constant register="c52" count="64">
     <type name="camBlendMatrices" class="matrix_rows" type="float" rows="4" columns="4" elements="16" />
    </constant>
    <constant register="c188" count="4">
     <type name="cmCSMTransform" class="matrix_rows" type="float" rows="4" columns="4" />
    </constant>
   </constanttable>
   <sourcemap>
    <statement pc="5" file="10" line="34" scope="-1" lastinstruction="0" />
    <statement pc="6" file="10" line="34" scope="-1" lastinstruction="0" />
    <statement pc="7" file="10" line="34" scope="-1" lastinstruction="0" />
    <statement pc="8" file="10" line="34" scope="-1" lastinstruction="0" />
    <statement pc="0.1" file="10" line="34" scope="-1" lastinstruction="0" />
    <statement pc="9" file="10" line="38" scope="-1" lastinstruction="0" />
    <statement pc="10" file="10" line="38" scope="-1" lastinstruction="0" />
    <statement pc="11" file="10" line="38" scope="-1" lastinstruction="0" />
    <statement pc="12" file="10" line="39" scope="-1" lastinstruction="0" />
    <statement pc="13" file="10" line="39" scope="-1" lastinstruction="0" />
    <statement pc="14" file="10" line="39" scope="-1" lastinstruction="0" />
    <statement pc="15" file="10" line="38" scope="-1" lastinstruction="0" />
    <statement pc="16" file="10" line="38" scope="-1" lastinstruction="0" />
    <statement pc="17" file="10" line="38" scope="-1" lastinstruction="0" />
    <statement pc="18" file="10" line="40" scope="-1" lastinstruction="0" />
    <statement pc="19" file="10" line="40" scope="-1" lastinstruction="0" />
    <statement pc="20" file="10" line="40" scope="-1" lastinstruction="0" />
    <statement pc="21" file="10" line="40" scope="-1" lastinstruction="0" />
    <statement pc="22" file="10" line="40" scope="-1" lastinstruction="0" />
    <statement pc="23" file="10" line="40" scope="-1" lastinstruction="0" />
    <statement pc="24" file="10" line="40" scope="-1" lastinstruction="0" />
    <statement pc="25" file="10" line="40" scope="-1" lastinstruction="0" />
    <statement pc="26" file="10" line="40" scope="-1" lastinstruction="0" />
    <statement pc="27" file="10" line="40" scope="-1" lastinstruction="0" />
    <statement pc="28" file="10" line="40" scope="-1" lastinstruction="0" />
    <statement pc="29" file="10" line="40" scope="-1" lastinstruction="0" />
    <statement pc="30" file="10" line="40" scope="-1" lastinstruction="0" />
    <statement pc="31" file="10" line="42" scope="-1" lastinstruction="0" />
    <statement pc="32" file="10" line="42" scope="-1" lastinstruction="0" />
    <statement pc="33" file="10" line="42" scope="-1" lastinstruction="0" />
    <statement pc="34" file="10" line="42" scope="-1" lastinstruction="0" />
    <statement pc="35" file="10" line="38" scope="-1" lastinstruction="0" />
    <statement pc="36" file="10" line="39" scope="-1" lastinstruction="0" />
    <statement pc="37" file="10" line="38" scope="-1" lastinstruction="0" />
    <statement pc="38" file="10" line="38" scope="-1" lastinstruction="0" />
    <statement pc="39" file="10" line="38" scope="-1" lastinstruction="0" />
    <statement pc="40" file="10" line="43" scope="-1" lastinstruction="0" />
    <statement pc="41" file="10" line="43" scope="-1" lastinstruction="0" />
    <statement pc="42" file="10" line="43" scope="-1" lastinstruction="0" />
    <statement pc="43" file="10" line="43" scope="-1" lastinstruction="0" />
    <statement pc="4.0" file="10" line="43" scope="-1" lastinstruction="0" />
    <statement pc="44" file="10" line="46" scope="-1" lastinstruction="0" />
   </sourcemap>
   <variables>
   </variables>
   <variableDebugInfo>
   </variableDebugInfo>
   <scopes>
   </scopes>
   <funcInfo>
    <function id="0" name="PS_A_CSM" retID="346">
     <parameter id="345" />
    </function>
    <function id="1" name="VS_S_ACSM" retID="341">
     <parameter id="340" />
    </function>
    <function id="2" name="NIS_PS" retID="289">
     <parameter id="288" />
    </function>
    <function id="3" name="Fresnel_Falloff" retID="287">
     <parameter id="283" />
     <parameter id="284" />
     <parameter id="285" />
     <parameter id="286" />
    </function>
    <function id="4" name="Light_Directional" retID="280">
     <parameter id="273" />
     <parameter id="274" />
     <parameter id="275" />
     <parameter id="276" />
     <parameter id="277" />
     <parameter id="278" />
     <parameter id="279" />
    </function>
    <function id="5" name="VertexMain" retID="272">
     <parameter id="271" />
    </function>
    <function id="6" name="NIS_VS" retID="265">
     <parameter id="263" />
     <parameter id="264" />
     <parameter id="0" />
    </function>
    <function id="7" name="DoShadowCar" retID="228">
     <parameter id="225" />
     <parameter id="226" />
     <parameter id="227" />
     <parameter id="0" />
    </function>
    <function id="8" name="DoShadowOptimized" retID="224">
     <parameter id="220" />
     <parameter id="221" />
     <parameter id="222" />
     <parameter id="223" />
     <parameter id="0" />
    </function>
    <function id="9" name="DoShadowPCF" retID="217">
     <parameter id="213" />
     <parameter id="214" />
     <parameter id="215" />
     <parameter id="216" />
     <parameter id="0" />
    </function>
    <function id="10" name="DoShadow" retID="210">
     <parameter id="207" />
     <parameter id="208" />
     <parameter id="209" />
     <parameter id="0" />
    </function>
    <function id="11" name="DoCSM3ShadowPCF" retID="196">
     <parameter id="195" />
    </function>
    <function id="12" name="SamplePCF" retID="191">
     <parameter id="189" />
     <parameter id="190" />
    </function>
    <function id="13" name="GetEdgeContrast" retID="185">
     <parameter id="184" />
    </function>
    <function id="14" name="Tex2DOffset" retID="175">
     <parameter id="172" />
     <parameter id="173" />
     <parameter id="174" />
    </function>
    <function id="15" name="VertexShadowTexOptimized" retID="171">
     <parameter id="167" />
     <parameter id="168" />
     <parameter id="169" />
     <parameter id="170" />
    </function>
    <function id="16" name="VertexShadowTex" retID="166">
     <parameter id="164" />
     <parameter id="165" />
    </function>
    <function id="17" name="CalculateShadowFade" retID="162">
     <parameter id="161" />
    </function>
    <function id="18" name="DepthSampleDepth" retID="149">
     <parameter id="147" />
     <parameter id="148" />
    </function>
    <function id="19" name="GammaExpand" retID="130">
     <parameter id="129" />
    </function>
    <function id="20" name="GammaCompress" retID="128">
     <parameter id="127" />
    </function>
    <function id="21" name="DecodeRGBE8" retID="124">
     <parameter id="123" />
    </function>
    <function id="22" name="EncodeRGBE8" retID="119">
     <parameter id="118" />
    </function>
    <function id="23" name="DeCompressTextCoords" retID="117">
     <parameter id="116" />
    </function>
    <function id="24" name="DeCompressColourSpace" retID="115">
     <parameter id="114" />
    </function>
    <function id="25" name="CompressColourSpace" retID="113">
     <parameter id="112" />
    </function>
    <function id="26" name="world_position" retID="111">
     <parameter id="108" />
     <parameter id="109" />
     <parameter id="110" />
    </function>
    <function id="27" name="world_position" retID="107">
     <parameter id="105" />
     <parameter id="106" />
    </function>
    <function id="28" name="world_cartesian_position" retID="103">
     <parameter id="102" />
    </function>
    <function id="29" name="world_paraboloid_position" retID="99">
     <parameter id="98" />
    </function>
    <function id="30" name="EnvironmentMapLookup_Paraboloid_MipLevel" retID="92">
     <parameter id="88" />
     <parameter id="89" />
     <parameter id="90" />
     <parameter id="91" />
    </function>
    <function id="31" name="EnvironmentMapLookup_Paraboloid" retID="82">
     <parameter id="79" />
     <parameter id="80" />
     <parameter id="81" />
    </function>
    <function id="32" name="EnvironmentMapLookup_ParaboloidUVUV" retID="74">
     <parameter id="73" />
    </function>
    <function id="33" name="EnvironmentMapLookup_Paraboloid" retID="65">
     <parameter id="62" />
     <parameter id="63" />
     <parameter id="64" />
    </function>
    <function id="34" name="EnvironmentMapLookup_Cube" retID="60">
     <parameter id="57" />
     <parameter id="58" />
     <parameter id="59" />
    </function>
    <function id="35" name="EnvironmentMapLookup_Plane" retID="54">
     <parameter id="51" />
     <parameter id="52" />
     <parameter id="53" />
    </function>
    <function id="36" name="valueOf" retID="22">
     <parameter id="21" />
    </function>
    <function id="37" name="bias" retID="20">
     <parameter id="18" />
     <parameter id="19" />
    </function>
    <function id="38" name="NormalTransform" retID="16">
     <parameter id="14" />
     <parameter id="15" />
    </function>
    <function id="39" name="GetLocalEyePos" retID="13">
     <parameter id="12" />
    </function>
    <function id="40" name="GetLocalLightDir" retID="11">
     <parameter id="10" />
    </function>
   </funcInfo>
   <funcEntryExitInfo>
   </funcEntryExitInfo>
   <VfetchInfo>
    <vfetch Address="5" Register="4" DestSwizzle="xyz_" Semantic="0x00" End="false" />
    <vfetch Address="6" Register="0" DestSwizzle="_xy_" Semantic="0x50" End="false" />
    <vfetch Address="7" Register="2" DestSwizzle="xyz_" Semantic="0x10" End="false" />
    <vfetch Address="8" Register="1" DestSwizzle="xyz_" Semantic="0x20" End="true" />
   </VfetchInfo>
   <InterpolatorInfo>
    <Interpolator Register="0" Semantic="0x50" Mask="xy" />
   </InterpolatorInfo>
   <LiteralFloats>
    <Float Register="252" value0="0" value1="0" value2="0" value3="0" />
    <Float Register="253" value0="0" value1="0" value2="0" value3="0" />
    <Float Register="254" value0="0" value1="0" value2="0" value3="0" />
    <Float Register="255" value0="4" value1="0" value2="0" value3="0" />
   </LiteralFloats>
   <LiteralInts>
   </LiteralInts>
   <LiteralBools>
   </LiteralBools>
  </shader>
 </shaders>
</shader-pdb>
